// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ExternalProtocol.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "InternalProtocol.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ExternalProtocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ExternalProtocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ExternalProtocol_2eproto;
namespace ExternalProtocol {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class Connect;
struct ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class ConnectResponse;
struct ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class ExternalClient;
struct ExternalClientDefaultTypeInternal;
extern ExternalClientDefaultTypeInternal _ExternalClient_default_instance_;
class ExternalServer;
struct ExternalServerDefaultTypeInternal;
extern ExternalServerDefaultTypeInternal _ExternalServer_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace ExternalProtocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ExternalProtocol {
enum ConnectResponse_Type : int {
  ConnectResponse_Type_OK = 0,
  ConnectResponse_Type_ALREADY_LOGGED = 1,
  ConnectResponse_Type_ConnectResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConnectResponse_Type_ConnectResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConnectResponse_Type_IsValid(int value);
extern const uint32_t ConnectResponse_Type_internal_data_[];
constexpr ConnectResponse_Type ConnectResponse_Type_Type_MIN = static_cast<ConnectResponse_Type>(0);
constexpr ConnectResponse_Type ConnectResponse_Type_Type_MAX = static_cast<ConnectResponse_Type>(1);
constexpr int ConnectResponse_Type_Type_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ConnectResponse_Type_descriptor();
template <typename T>
const std::string& ConnectResponse_Type_Name(T value) {
  static_assert(std::is_same<T, ConnectResponse_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ConnectResponse_Type_Name(static_cast<ConnectResponse_Type>(value));
}
template <>
inline const std::string& ConnectResponse_Type_Name(ConnectResponse_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConnectResponse_Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ConnectResponse_Type_Parse(absl::string_view name, ConnectResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectResponse_Type>(
      ConnectResponse_Type_descriptor(), name, value);
}
enum Status_DeviceState : int {
  Status_DeviceState_CONNECTING = 0,
  Status_DeviceState_RUNNING = 1,
  Status_DeviceState_ERROR = 2,
  Status_DeviceState_DISCONNECT = 3,
  Status_DeviceState_Status_DeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_DeviceState_Status_DeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_DeviceState_IsValid(int value);
extern const uint32_t Status_DeviceState_internal_data_[];
constexpr Status_DeviceState Status_DeviceState_DeviceState_MIN = static_cast<Status_DeviceState>(0);
constexpr Status_DeviceState Status_DeviceState_DeviceState_MAX = static_cast<Status_DeviceState>(3);
constexpr int Status_DeviceState_DeviceState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Status_DeviceState_descriptor();
template <typename T>
const std::string& Status_DeviceState_Name(T value) {
  static_assert(std::is_same<T, Status_DeviceState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceState_Name().");
  return Status_DeviceState_Name(static_cast<Status_DeviceState>(value));
}
template <>
inline const std::string& Status_DeviceState_Name(Status_DeviceState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_DeviceState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Status_DeviceState_Parse(absl::string_view name, Status_DeviceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_DeviceState>(
      Status_DeviceState_descriptor(), name, value);
}
enum StatusResponse_Type : int {
  StatusResponse_Type_OK = 0,
  StatusResponse_Type_StatusResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StatusResponse_Type_StatusResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StatusResponse_Type_IsValid(int value);
extern const uint32_t StatusResponse_Type_internal_data_[];
constexpr StatusResponse_Type StatusResponse_Type_Type_MIN = static_cast<StatusResponse_Type>(0);
constexpr StatusResponse_Type StatusResponse_Type_Type_MAX = static_cast<StatusResponse_Type>(0);
constexpr int StatusResponse_Type_Type_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
StatusResponse_Type_descriptor();
template <typename T>
const std::string& StatusResponse_Type_Name(T value) {
  static_assert(std::is_same<T, StatusResponse_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return StatusResponse_Type_Name(static_cast<StatusResponse_Type>(value));
}
template <>
inline const std::string& StatusResponse_Type_Name(StatusResponse_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusResponse_Type_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool StatusResponse_Type_Parse(absl::string_view name, StatusResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusResponse_Type>(
      StatusResponse_Type_descriptor(), name, value);
}
enum CommandResponse_Type : int {
  CommandResponse_Type_OK = 0,
  CommandResponse_Type_DEVICE_NOT_CONNECTED = 1,
  CommandResponse_Type_DEVICE_NOT_SUPPORTED = 2,
  CommandResponse_Type_INVALID_COMMAND = 3,
  CommandResponse_Type_CommandResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CommandResponse_Type_CommandResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CommandResponse_Type_IsValid(int value);
extern const uint32_t CommandResponse_Type_internal_data_[];
constexpr CommandResponse_Type CommandResponse_Type_Type_MIN = static_cast<CommandResponse_Type>(0);
constexpr CommandResponse_Type CommandResponse_Type_Type_MAX = static_cast<CommandResponse_Type>(3);
constexpr int CommandResponse_Type_Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CommandResponse_Type_descriptor();
template <typename T>
const std::string& CommandResponse_Type_Name(T value) {
  static_assert(std::is_same<T, CommandResponse_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return CommandResponse_Type_Name(static_cast<CommandResponse_Type>(value));
}
template <>
inline const std::string& CommandResponse_Type_Name(CommandResponse_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CommandResponse_Type_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CommandResponse_Type_Parse(absl::string_view name, CommandResponse_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandResponse_Type>(
      CommandResponse_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StatusResponse(const StatusResponse& from) : StatusResponse(nullptr, from) {}
  inline StatusResponse(StatusResponse&& from) noexcept
      : StatusResponse(nullptr, std::move(from)) {}
  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
        &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StatusResponse& a, StatusResponse& b) { a.Swap(&b); }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<StatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from) { StatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StatusResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.StatusResponse"; }

 protected:
  explicit StatusResponse(::google::protobuf::Arena* arena);
  StatusResponse(::google::protobuf::Arena* arena, const StatusResponse& from);
  StatusResponse(::google::protobuf::Arena* arena, StatusResponse&& from) noexcept
      : StatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = StatusResponse_Type;
  static constexpr Type OK = StatusResponse_Type_OK;
  static inline bool Type_IsValid(int value) {
    return StatusResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = StatusResponse_Type_Type_MIN;
  static constexpr Type Type_MAX = StatusResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = StatusResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return StatusResponse_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return StatusResponse_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return StatusResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
  };
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // .ExternalProtocol.StatusResponse.Type type = 2 [features = {
  void clear_type() ;
  ::ExternalProtocol::StatusResponse_Type type() const;
  void set_type(::ExternalProtocol::StatusResponse_Type value);

  private:
  ::ExternalProtocol::StatusResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::StatusResponse_Type value);

  public:
  // uint32 messageCounter = 3 [features = {
  void clear_messagecounter() ;
  ::uint32_t messagecounter() const;
  void set_messagecounter(::uint32_t value);

  private:
  ::uint32_t _internal_messagecounter() const;
  void _internal_set_messagecounter(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.StatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StatusResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StatusResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    int type_;
    ::uint32_t messagecounter_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.ConnectResponse) */ {
 public:
  inline ConnectResponse() : ConnectResponse(nullptr) {}
  ~ConnectResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectResponse(const ConnectResponse& from) : ConnectResponse(nullptr, from) {}
  inline ConnectResponse(ConnectResponse&& from) noexcept
      : ConnectResponse(nullptr, std::move(from)) {}
  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
        &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ConnectResponse& a, ConnectResponse& b) { a.Swap(&b); }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ConnectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectResponse& from) { ConnectResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.ConnectResponse"; }

 protected:
  explicit ConnectResponse(::google::protobuf::Arena* arena);
  ConnectResponse(::google::protobuf::Arena* arena, const ConnectResponse& from);
  ConnectResponse(::google::protobuf::Arena* arena, ConnectResponse&& from) noexcept
      : ConnectResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ConnectResponse_Type;
  static constexpr Type OK = ConnectResponse_Type_OK;
  static constexpr Type ALREADY_LOGGED = ConnectResponse_Type_ALREADY_LOGGED;
  static inline bool Type_IsValid(int value) {
    return ConnectResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ConnectResponse_Type_Type_MIN;
  static constexpr Type Type_MAX = ConnectResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ConnectResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return ConnectResponse_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ConnectResponse_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return ConnectResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // .ExternalProtocol.ConnectResponse.Type type = 2 [features = {
  void clear_type() ;
  ::ExternalProtocol::ConnectResponse_Type type() const;
  void set_type(::ExternalProtocol::ConnectResponse_Type value);

  private:
  ::ExternalProtocol::ConnectResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::ConnectResponse_Type value);

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.ConnectResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ConnectResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommandResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommandResponse(const CommandResponse& from) : CommandResponse(nullptr, from) {}
  inline CommandResponse(CommandResponse&& from) noexcept
      : CommandResponse(nullptr, std::move(from)) {}
  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
        &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CommandResponse& a, CommandResponse& b) { a.Swap(&b); }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CommandResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommandResponse& from) { CommandResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommandResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.CommandResponse"; }

 protected:
  explicit CommandResponse(::google::protobuf::Arena* arena);
  CommandResponse(::google::protobuf::Arena* arena, const CommandResponse& from);
  CommandResponse(::google::protobuf::Arena* arena, CommandResponse&& from) noexcept
      : CommandResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = CommandResponse_Type;
  static constexpr Type OK = CommandResponse_Type_OK;
  static constexpr Type DEVICE_NOT_CONNECTED = CommandResponse_Type_DEVICE_NOT_CONNECTED;
  static constexpr Type DEVICE_NOT_SUPPORTED = CommandResponse_Type_DEVICE_NOT_SUPPORTED;
  static constexpr Type INVALID_COMMAND = CommandResponse_Type_INVALID_COMMAND;
  static inline bool Type_IsValid(int value) {
    return CommandResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = CommandResponse_Type_Type_MIN;
  static constexpr Type Type_MAX = CommandResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = CommandResponse_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return CommandResponse_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return CommandResponse_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return CommandResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
  };
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // .ExternalProtocol.CommandResponse.Type type = 2 [features = {
  void clear_type() ;
  ::ExternalProtocol::CommandResponse_Type type() const;
  void set_type(::ExternalProtocol::CommandResponse_Type value);

  private:
  ::ExternalProtocol::CommandResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::CommandResponse_Type value);

  public:
  // uint32 messageCounter = 3 [features = {
  void clear_messagecounter() ;
  ::uint32_t messagecounter() const;
  void set_messagecounter(::uint32_t value);

  private:
  ::uint32_t _internal_messagecounter() const;
  void _internal_set_messagecounter(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.CommandResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CommandResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommandResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    int type_;
    ::uint32_t messagecounter_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Connect final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.Connect) */ {
 public:
  inline Connect() : Connect(nullptr) {}
  ~Connect() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Connect(
      ::google::protobuf::internal::ConstantInitialized);

  inline Connect(const Connect& from) : Connect(nullptr, from) {}
  inline Connect(Connect&& from) noexcept
      : Connect(nullptr, std::move(from)) {}
  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connect& operator=(Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
        &_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Connect& a, Connect& b) { a.Swap(&b); }
  inline void Swap(Connect* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connect* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Connect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Connect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Connect& from) { Connect::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Connect* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.Connect"; }

 protected:
  explicit Connect(::google::protobuf::Arena* arena);
  Connect(::google::protobuf::Arena* arena, const Connect& from);
  Connect(::google::protobuf::Arena* arena, Connect&& from) noexcept
      : Connect(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevicesFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kCompanyFieldNumber = 2,
    kVehicleNameFieldNumber = 3,
  };
  // repeated .InternalProtocol.Device devices = 4;
  int devices_size() const;
  private:
  int _internal_devices_size() const;

  public:
  void clear_devices() ;
  ::InternalProtocol::Device* mutable_devices(int index);
  ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>* mutable_devices();

  private:
  const ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>& _internal_devices() const;
  ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>* _internal_mutable_devices();
  public:
  const ::InternalProtocol::Device& devices(int index) const;
  ::InternalProtocol::Device* add_devices();
  const ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>& devices() const;
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // string company = 2 [features = {
  void clear_company() ;
  const std::string& company() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_company(Arg_&& arg, Args_... args);
  std::string* mutable_company();
  PROTOBUF_NODISCARD std::string* release_company();
  void set_allocated_company(std::string* value);

  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(
      const std::string& value);
  std::string* _internal_mutable_company();

  public:
  // string vehicleName = 3 [features = {
  void clear_vehiclename() ;
  const std::string& vehiclename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vehiclename(Arg_&& arg, Args_... args);
  std::string* mutable_vehiclename();
  PROTOBUF_NODISCARD std::string* release_vehiclename();
  void set_allocated_vehiclename(std::string* value);

  private:
  const std::string& _internal_vehiclename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehiclename(
      const std::string& value);
  std::string* _internal_mutable_vehiclename();

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.Connect)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Connect_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Connect& from_msg);
    ::google::protobuf::RepeatedPtrField< ::InternalProtocol::Device > devices_;
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    ::google::protobuf::internal::ArenaStringPtr company_;
    ::google::protobuf::internal::ArenaStringPtr vehiclename_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Status final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Status(
      ::google::protobuf::internal::ConstantInitialized);

  inline Status(const Status& from) : Status(nullptr, from) {}
  inline Status(Status&& from) noexcept
      : Status(nullptr, std::move(from)) {}
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
        &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Status& a, Status& b) { a.Swap(&b); }
  inline void Swap(Status* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Status>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Status& from) { Status::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Status* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.Status"; }

 protected:
  explicit Status(::google::protobuf::Arena* arena);
  Status(::google::protobuf::Arena* arena, const Status& from);
  Status(::google::protobuf::Arena* arena, Status&& from) noexcept
      : Status(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DeviceState = Status_DeviceState;
  static constexpr DeviceState CONNECTING = Status_DeviceState_CONNECTING;
  static constexpr DeviceState RUNNING = Status_DeviceState_RUNNING;
  static constexpr DeviceState ERROR = Status_DeviceState_ERROR;
  static constexpr DeviceState DISCONNECT = Status_DeviceState_DISCONNECT;
  static inline bool DeviceState_IsValid(int value) {
    return Status_DeviceState_IsValid(value);
  }
  static constexpr DeviceState DeviceState_MIN = Status_DeviceState_DeviceState_MIN;
  static constexpr DeviceState DeviceState_MAX = Status_DeviceState_DeviceState_MAX;
  static constexpr int DeviceState_ARRAYSIZE = Status_DeviceState_DeviceState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DeviceState_descriptor() {
    return Status_DeviceState_descriptor();
  }
  template <typename T>
  static inline const std::string& DeviceState_Name(T value) {
    return Status_DeviceState_Name(value);
  }
  static inline bool DeviceState_Parse(absl::string_view name, DeviceState* value) {
    return Status_DeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kErrorMessageFieldNumber = 5,
    kDeviceStatusFieldNumber = 4,
    kDeviceStateFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
  };
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // bytes errorMessage = 5;
  bool has_errormessage() const;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // .InternalProtocol.DeviceStatus deviceStatus = 4;
  bool has_devicestatus() const;
  void clear_devicestatus() ;
  const ::InternalProtocol::DeviceStatus& devicestatus() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceStatus* release_devicestatus();
  ::InternalProtocol::DeviceStatus* mutable_devicestatus();
  void set_allocated_devicestatus(::InternalProtocol::DeviceStatus* value);
  void unsafe_arena_set_allocated_devicestatus(::InternalProtocol::DeviceStatus* value);
  ::InternalProtocol::DeviceStatus* unsafe_arena_release_devicestatus();

  private:
  const ::InternalProtocol::DeviceStatus& _internal_devicestatus() const;
  ::InternalProtocol::DeviceStatus* _internal_mutable_devicestatus();

  public:
  // .ExternalProtocol.Status.DeviceState deviceState = 2 [features = {
  void clear_devicestate() ;
  ::ExternalProtocol::Status_DeviceState devicestate() const;
  void set_devicestate(::ExternalProtocol::Status_DeviceState value);

  private:
  ::ExternalProtocol::Status_DeviceState _internal_devicestate() const;
  void _internal_set_devicestate(::ExternalProtocol::Status_DeviceState value);

  public:
  // uint32 messageCounter = 3 [features = {
  void clear_messagecounter() ;
  ::uint32_t messagecounter() const;
  void set_messagecounter(::uint32_t value);

  private:
  ::uint32_t _internal_messagecounter() const;
  void _internal_set_messagecounter(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.Status)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Status_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Status& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::InternalProtocol::DeviceStatus* devicestatus_;
    int devicestate_;
    ::uint32_t messagecounter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Command final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Command(
      ::google::protobuf::internal::ConstantInitialized);

  inline Command(const Command& from) : Command(nullptr, from) {}
  inline Command(Command&& from) noexcept
      : Command(nullptr, std::move(from)) {}
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
        &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Command& a, Command& b) { a.Swap(&b); }
  inline void Swap(Command* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Command>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Command& from) { Command::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Command* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.Command"; }

 protected:
  explicit Command(::google::protobuf::Arena* arena);
  Command(::google::protobuf::Arena* arena, const Command& from);
  Command(::google::protobuf::Arena* arena, Command&& from) noexcept
      : Command(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionIdFieldNumber = 1,
    kDeviceCommandFieldNumber = 3,
    kMessageCounterFieldNumber = 2,
  };
  // string sessionId = 1 [features = {
  void clear_sessionid() ;
  const std::string& sessionid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionid(Arg_&& arg, Args_... args);
  std::string* mutable_sessionid();
  PROTOBUF_NODISCARD std::string* release_sessionid();
  void set_allocated_sessionid(std::string* value);

  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(
      const std::string& value);
  std::string* _internal_mutable_sessionid();

  public:
  // .InternalProtocol.DeviceCommand deviceCommand = 3;
  bool has_devicecommand() const;
  void clear_devicecommand() ;
  const ::InternalProtocol::DeviceCommand& devicecommand() const;
  PROTOBUF_NODISCARD ::InternalProtocol::DeviceCommand* release_devicecommand();
  ::InternalProtocol::DeviceCommand* mutable_devicecommand();
  void set_allocated_devicecommand(::InternalProtocol::DeviceCommand* value);
  void unsafe_arena_set_allocated_devicecommand(::InternalProtocol::DeviceCommand* value);
  ::InternalProtocol::DeviceCommand* unsafe_arena_release_devicecommand();

  private:
  const ::InternalProtocol::DeviceCommand& _internal_devicecommand() const;
  ::InternalProtocol::DeviceCommand* _internal_mutable_devicecommand();

  public:
  // uint32 messageCounter = 2 [features = {
  void clear_messagecounter() ;
  ::uint32_t messagecounter() const;
  void set_messagecounter(::uint32_t value);

  private:
  ::uint32_t _internal_messagecounter() const;
  void _internal_set_messagecounter(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ExternalProtocol.Command)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Command_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Command& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sessionid_;
    ::InternalProtocol::DeviceCommand* devicecommand_;
    ::uint32_t messagecounter_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class ExternalServer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.ExternalServer) */ {
 public:
  inline ExternalServer() : ExternalServer(nullptr) {}
  ~ExternalServer() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExternalServer(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExternalServer(const ExternalServer& from) : ExternalServer(nullptr, from) {}
  inline ExternalServer(ExternalServer&& from) noexcept
      : ExternalServer(nullptr, std::move(from)) {}
  inline ExternalServer& operator=(const ExternalServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalServer& operator=(ExternalServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalServer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kConnectResponse = 1,
    kStatusResponse = 2,
    kCommand = 3,
    MESSAGETYPE_NOT_SET = 0,
  };
  static inline const ExternalServer* internal_default_instance() {
    return reinterpret_cast<const ExternalServer*>(
        &_ExternalServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ExternalServer& a, ExternalServer& b) { a.Swap(&b); }
  inline void Swap(ExternalServer* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalServer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalServer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ExternalServer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExternalServer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExternalServer& from) { ExternalServer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExternalServer* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.ExternalServer"; }

 protected:
  explicit ExternalServer(::google::protobuf::Arena* arena);
  ExternalServer(::google::protobuf::Arena* arena, const ExternalServer& from);
  ExternalServer(::google::protobuf::Arena* arena, ExternalServer&& from) noexcept
      : ExternalServer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectResponseFieldNumber = 1,
    kStatusResponseFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // .ExternalProtocol.ConnectResponse connectResponse = 1;
  bool has_connectresponse() const;
  private:
  bool _internal_has_connectresponse() const;

  public:
  void clear_connectresponse() ;
  const ::ExternalProtocol::ConnectResponse& connectresponse() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::ConnectResponse* release_connectresponse();
  ::ExternalProtocol::ConnectResponse* mutable_connectresponse();
  void set_allocated_connectresponse(::ExternalProtocol::ConnectResponse* value);
  void unsafe_arena_set_allocated_connectresponse(::ExternalProtocol::ConnectResponse* value);
  ::ExternalProtocol::ConnectResponse* unsafe_arena_release_connectresponse();

  private:
  const ::ExternalProtocol::ConnectResponse& _internal_connectresponse() const;
  ::ExternalProtocol::ConnectResponse* _internal_mutable_connectresponse();

  public:
  // .ExternalProtocol.StatusResponse statusResponse = 2;
  bool has_statusresponse() const;
  private:
  bool _internal_has_statusresponse() const;

  public:
  void clear_statusresponse() ;
  const ::ExternalProtocol::StatusResponse& statusresponse() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::StatusResponse* release_statusresponse();
  ::ExternalProtocol::StatusResponse* mutable_statusresponse();
  void set_allocated_statusresponse(::ExternalProtocol::StatusResponse* value);
  void unsafe_arena_set_allocated_statusresponse(::ExternalProtocol::StatusResponse* value);
  ::ExternalProtocol::StatusResponse* unsafe_arena_release_statusresponse();

  private:
  const ::ExternalProtocol::StatusResponse& _internal_statusresponse() const;
  ::ExternalProtocol::StatusResponse* _internal_mutable_statusresponse();

  public:
  // .ExternalProtocol.Command command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;

  public:
  void clear_command() ;
  const ::ExternalProtocol::Command& command() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::Command* release_command();
  ::ExternalProtocol::Command* mutable_command();
  void set_allocated_command(::ExternalProtocol::Command* value);
  void unsafe_arena_set_allocated_command(::ExternalProtocol::Command* value);
  ::ExternalProtocol::Command* unsafe_arena_release_command();

  private:
  const ::ExternalProtocol::Command& _internal_command() const;
  ::ExternalProtocol::Command* _internal_mutable_command();

  public:
  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.ExternalServer)
 private:
  class _Internal;
  void set_has_connectresponse();
  void set_has_statusresponse();
  void set_has_command();
  inline bool has_MessageType() const;
  inline void clear_has_MessageType();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ExternalServer_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExternalServer& from_msg);
    union MessageTypeUnion {
      constexpr MessageTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ExternalProtocol::ConnectResponse* connectresponse_;
      ::ExternalProtocol::StatusResponse* statusresponse_;
      ::ExternalProtocol::Command* command_;
    } MessageType_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class ExternalClient final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ExternalProtocol.ExternalClient) */ {
 public:
  inline ExternalClient() : ExternalClient(nullptr) {}
  ~ExternalClient() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExternalClient(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExternalClient(const ExternalClient& from) : ExternalClient(nullptr, from) {}
  inline ExternalClient(ExternalClient&& from) noexcept
      : ExternalClient(nullptr, std::move(from)) {}
  inline ExternalClient& operator=(const ExternalClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalClient& operator=(ExternalClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalClient& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kConnect = 1,
    kStatus = 2,
    kCommandResponse = 3,
    MESSAGETYPE_NOT_SET = 0,
  };
  static inline const ExternalClient* internal_default_instance() {
    return reinterpret_cast<const ExternalClient*>(
        &_ExternalClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ExternalClient& a, ExternalClient& b) { a.Swap(&b); }
  inline void Swap(ExternalClient* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalClient* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExternalClient* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ExternalClient>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExternalClient& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExternalClient& from) { ExternalClient::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExternalClient* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ExternalProtocol.ExternalClient"; }

 protected:
  explicit ExternalClient(::google::protobuf::Arena* arena);
  ExternalClient(::google::protobuf::Arena* arena, const ExternalClient& from);
  ExternalClient(::google::protobuf::Arena* arena, ExternalClient&& from) noexcept
      : ExternalClient(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCommandResponseFieldNumber = 3,
  };
  // .ExternalProtocol.Connect connect = 1;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;

  public:
  void clear_connect() ;
  const ::ExternalProtocol::Connect& connect() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::Connect* release_connect();
  ::ExternalProtocol::Connect* mutable_connect();
  void set_allocated_connect(::ExternalProtocol::Connect* value);
  void unsafe_arena_set_allocated_connect(::ExternalProtocol::Connect* value);
  ::ExternalProtocol::Connect* unsafe_arena_release_connect();

  private:
  const ::ExternalProtocol::Connect& _internal_connect() const;
  ::ExternalProtocol::Connect* _internal_mutable_connect();

  public:
  // .ExternalProtocol.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::ExternalProtocol::Status& status() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::Status* release_status();
  ::ExternalProtocol::Status* mutable_status();
  void set_allocated_status(::ExternalProtocol::Status* value);
  void unsafe_arena_set_allocated_status(::ExternalProtocol::Status* value);
  ::ExternalProtocol::Status* unsafe_arena_release_status();

  private:
  const ::ExternalProtocol::Status& _internal_status() const;
  ::ExternalProtocol::Status* _internal_mutable_status();

  public:
  // .ExternalProtocol.CommandResponse commandResponse = 3;
  bool has_commandresponse() const;
  private:
  bool _internal_has_commandresponse() const;

  public:
  void clear_commandresponse() ;
  const ::ExternalProtocol::CommandResponse& commandresponse() const;
  PROTOBUF_NODISCARD ::ExternalProtocol::CommandResponse* release_commandresponse();
  ::ExternalProtocol::CommandResponse* mutable_commandresponse();
  void set_allocated_commandresponse(::ExternalProtocol::CommandResponse* value);
  void unsafe_arena_set_allocated_commandresponse(::ExternalProtocol::CommandResponse* value);
  ::ExternalProtocol::CommandResponse* unsafe_arena_release_commandresponse();

  private:
  const ::ExternalProtocol::CommandResponse& _internal_commandresponse() const;
  ::ExternalProtocol::CommandResponse* _internal_mutable_commandresponse();

  public:
  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.ExternalClient)
 private:
  class _Internal;
  void set_has_connect();
  void set_has_status();
  void set_has_commandresponse();
  inline bool has_MessageType() const;
  inline void clear_has_MessageType();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ExternalClient_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExternalClient& from_msg);
    union MessageTypeUnion {
      constexpr MessageTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ExternalProtocol::Connect* connect_;
      ::ExternalProtocol::Status* status_;
      ::ExternalProtocol::CommandResponse* commandresponse_;
    } MessageType_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExternalServer

// .ExternalProtocol.ConnectResponse connectResponse = 1;
inline bool ExternalServer::has_connectresponse() const {
  return MessageType_case() == kConnectResponse;
}
inline bool ExternalServer::_internal_has_connectresponse() const {
  return MessageType_case() == kConnectResponse;
}
inline void ExternalServer::set_has_connectresponse() {
  _impl_._oneof_case_[0] = kConnectResponse;
}
inline void ExternalServer::clear_connectresponse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kConnectResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.connectresponse_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.connectresponse_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::release_connectresponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.connectResponse)
  if (MessageType_case() == kConnectResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.connectresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.connectresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::ConnectResponse& ExternalServer::_internal_connectresponse() const {
  return MessageType_case() == kConnectResponse ? *_impl_.MessageType_.connectresponse_ : reinterpret_cast<::ExternalProtocol::ConnectResponse&>(::ExternalProtocol::_ConnectResponse_default_instance_);
}
inline const ::ExternalProtocol::ConnectResponse& ExternalServer::connectresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.connectResponse)
  return _internal_connectresponse();
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::unsafe_arena_release_connectresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.connectResponse)
  if (MessageType_case() == kConnectResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.connectresponse_;
    _impl_.MessageType_.connectresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_connectresponse(::ExternalProtocol::ConnectResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_connectresponse();
    _impl_.MessageType_.connectresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.connectResponse)
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::_internal_mutable_connectresponse() {
  if (MessageType_case() != kConnectResponse) {
    clear_MessageType();
    set_has_connectresponse();
    _impl_.MessageType_.connectresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::ConnectResponse>(GetArena());
  }
  return _impl_.MessageType_.connectresponse_;
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::mutable_connectresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::ConnectResponse* _msg = _internal_mutable_connectresponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.connectResponse)
  return _msg;
}

// .ExternalProtocol.StatusResponse statusResponse = 2;
inline bool ExternalServer::has_statusresponse() const {
  return MessageType_case() == kStatusResponse;
}
inline bool ExternalServer::_internal_has_statusresponse() const {
  return MessageType_case() == kStatusResponse;
}
inline void ExternalServer::set_has_statusresponse() {
  _impl_._oneof_case_[0] = kStatusResponse;
}
inline void ExternalServer::clear_statusresponse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kStatusResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.statusresponse_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.statusresponse_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::release_statusresponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.statusResponse)
  if (MessageType_case() == kStatusResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.statusresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.statusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::StatusResponse& ExternalServer::_internal_statusresponse() const {
  return MessageType_case() == kStatusResponse ? *_impl_.MessageType_.statusresponse_ : reinterpret_cast<::ExternalProtocol::StatusResponse&>(::ExternalProtocol::_StatusResponse_default_instance_);
}
inline const ::ExternalProtocol::StatusResponse& ExternalServer::statusresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.statusResponse)
  return _internal_statusresponse();
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::unsafe_arena_release_statusresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.statusResponse)
  if (MessageType_case() == kStatusResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.statusresponse_;
    _impl_.MessageType_.statusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_statusresponse(::ExternalProtocol::StatusResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_statusresponse();
    _impl_.MessageType_.statusresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.statusResponse)
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::_internal_mutable_statusresponse() {
  if (MessageType_case() != kStatusResponse) {
    clear_MessageType();
    set_has_statusresponse();
    _impl_.MessageType_.statusresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::StatusResponse>(GetArena());
  }
  return _impl_.MessageType_.statusresponse_;
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::mutable_statusresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::StatusResponse* _msg = _internal_mutable_statusresponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.statusResponse)
  return _msg;
}

// .ExternalProtocol.Command command = 3;
inline bool ExternalServer::has_command() const {
  return MessageType_case() == kCommand;
}
inline bool ExternalServer::_internal_has_command() const {
  return MessageType_case() == kCommand;
}
inline void ExternalServer::set_has_command() {
  _impl_._oneof_case_[0] = kCommand;
}
inline void ExternalServer::clear_command() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kCommand) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.command_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.command_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Command* ExternalServer::release_command() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.command)
  if (MessageType_case() == kCommand) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.command_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Command& ExternalServer::_internal_command() const {
  return MessageType_case() == kCommand ? *_impl_.MessageType_.command_ : reinterpret_cast<::ExternalProtocol::Command&>(::ExternalProtocol::_Command_default_instance_);
}
inline const ::ExternalProtocol::Command& ExternalServer::command() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.command)
  return _internal_command();
}
inline ::ExternalProtocol::Command* ExternalServer::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.command)
  if (MessageType_case() == kCommand) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.command_;
    _impl_.MessageType_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_command(::ExternalProtocol::Command* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_command();
    _impl_.MessageType_.command_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.command)
}
inline ::ExternalProtocol::Command* ExternalServer::_internal_mutable_command() {
  if (MessageType_case() != kCommand) {
    clear_MessageType();
    set_has_command();
    _impl_.MessageType_.command_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::Command>(GetArena());
  }
  return _impl_.MessageType_.command_;
}
inline ::ExternalProtocol::Command* ExternalServer::mutable_command() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.command)
  return _msg;
}

inline bool ExternalServer::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void ExternalServer::clear_has_MessageType() {
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline ExternalServer::MessageTypeCase ExternalServer::MessageType_case() const {
  return ExternalServer::MessageTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExternalClient

// .ExternalProtocol.Connect connect = 1;
inline bool ExternalClient::has_connect() const {
  return MessageType_case() == kConnect;
}
inline bool ExternalClient::_internal_has_connect() const {
  return MessageType_case() == kConnect;
}
inline void ExternalClient::set_has_connect() {
  _impl_._oneof_case_[0] = kConnect;
}
inline void ExternalClient::clear_connect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kConnect) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.connect_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.connect_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Connect* ExternalClient::release_connect() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.connect)
  if (MessageType_case() == kConnect) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.connect_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Connect& ExternalClient::_internal_connect() const {
  return MessageType_case() == kConnect ? *_impl_.MessageType_.connect_ : reinterpret_cast<::ExternalProtocol::Connect&>(::ExternalProtocol::_Connect_default_instance_);
}
inline const ::ExternalProtocol::Connect& ExternalClient::connect() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.connect)
  return _internal_connect();
}
inline ::ExternalProtocol::Connect* ExternalClient::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.connect)
  if (MessageType_case() == kConnect) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.connect_;
    _impl_.MessageType_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_connect(::ExternalProtocol::Connect* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_connect();
    _impl_.MessageType_.connect_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.connect)
}
inline ::ExternalProtocol::Connect* ExternalClient::_internal_mutable_connect() {
  if (MessageType_case() != kConnect) {
    clear_MessageType();
    set_has_connect();
    _impl_.MessageType_.connect_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::Connect>(GetArena());
  }
  return _impl_.MessageType_.connect_;
}
inline ::ExternalProtocol::Connect* ExternalClient::mutable_connect() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::Connect* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.connect)
  return _msg;
}

// .ExternalProtocol.Status status = 2;
inline bool ExternalClient::has_status() const {
  return MessageType_case() == kStatus;
}
inline bool ExternalClient::_internal_has_status() const {
  return MessageType_case() == kStatus;
}
inline void ExternalClient::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void ExternalClient::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.status_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.status_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Status* ExternalClient::release_status() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.status)
  if (MessageType_case() == kStatus) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Status& ExternalClient::_internal_status() const {
  return MessageType_case() == kStatus ? *_impl_.MessageType_.status_ : reinterpret_cast<::ExternalProtocol::Status&>(::ExternalProtocol::_Status_default_instance_);
}
inline const ::ExternalProtocol::Status& ExternalClient::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.status)
  return _internal_status();
}
inline ::ExternalProtocol::Status* ExternalClient::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.status)
  if (MessageType_case() == kStatus) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.status_;
    _impl_.MessageType_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_status(::ExternalProtocol::Status* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_status();
    _impl_.MessageType_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.status)
}
inline ::ExternalProtocol::Status* ExternalClient::_internal_mutable_status() {
  if (MessageType_case() != kStatus) {
    clear_MessageType();
    set_has_status();
    _impl_.MessageType_.status_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::Status>(GetArena());
  }
  return _impl_.MessageType_.status_;
}
inline ::ExternalProtocol::Status* ExternalClient::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.status)
  return _msg;
}

// .ExternalProtocol.CommandResponse commandResponse = 3;
inline bool ExternalClient::has_commandresponse() const {
  return MessageType_case() == kCommandResponse;
}
inline bool ExternalClient::_internal_has_commandresponse() const {
  return MessageType_case() == kCommandResponse;
}
inline void ExternalClient::set_has_commandresponse() {
  _impl_._oneof_case_[0] = kCommandResponse;
}
inline void ExternalClient::clear_commandresponse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (MessageType_case() == kCommandResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.MessageType_.commandresponse_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.MessageType_.commandresponse_);
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::release_commandresponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.commandResponse)
  if (MessageType_case() == kCommandResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.commandresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.MessageType_.commandresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::CommandResponse& ExternalClient::_internal_commandresponse() const {
  return MessageType_case() == kCommandResponse ? *_impl_.MessageType_.commandresponse_ : reinterpret_cast<::ExternalProtocol::CommandResponse&>(::ExternalProtocol::_CommandResponse_default_instance_);
}
inline const ::ExternalProtocol::CommandResponse& ExternalClient::commandresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.commandResponse)
  return _internal_commandresponse();
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::unsafe_arena_release_commandresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.commandResponse)
  if (MessageType_case() == kCommandResponse) {
    clear_has_MessageType();
    auto* temp = _impl_.MessageType_.commandresponse_;
    _impl_.MessageType_.commandresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_commandresponse(::ExternalProtocol::CommandResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_MessageType();
  if (value) {
    set_has_commandresponse();
    _impl_.MessageType_.commandresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.commandResponse)
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::_internal_mutable_commandresponse() {
  if (MessageType_case() != kCommandResponse) {
    clear_MessageType();
    set_has_commandresponse();
    _impl_.MessageType_.commandresponse_ =
        ::google::protobuf::Message::DefaultConstruct<::ExternalProtocol::CommandResponse>(GetArena());
  }
  return _impl_.MessageType_.commandresponse_;
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::mutable_commandresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ExternalProtocol::CommandResponse* _msg = _internal_mutable_commandresponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.commandResponse)
  return _msg;
}

inline bool ExternalClient::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void ExternalClient::clear_has_MessageType() {
  _impl_._oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline ExternalClient::MessageTypeCase ExternalClient::MessageType_case() const {
  return ExternalClient::MessageTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Connect

// string sessionId = 1 [features = {
inline void Connect::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& Connect::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.sessionId)
}
inline std::string* Connect::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.sessionId)
  return _s;
}
inline const std::string& Connect::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void Connect::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* Connect::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.sessionId)
  return _impl_.sessionid_.Release();
}
inline void Connect::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.sessionId)
}

// string company = 2 [features = {
inline void Connect::clear_company() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_.ClearToEmpty();
}
inline const std::string& Connect::company() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.company)
  return _internal_company();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_company(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.company)
}
inline std::string* Connect::mutable_company() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.company)
  return _s;
}
inline const std::string& Connect::_internal_company() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.company_.Get();
}
inline void Connect::_internal_set_company(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_company() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.company_.Mutable( GetArena());
}
inline std::string* Connect::release_company() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.company)
  return _impl_.company_.Release();
}
inline void Connect::set_allocated_company(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.company_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.company_.IsDefault()) {
          _impl_.company_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.company)
}

// string vehicleName = 3 [features = {
inline void Connect::clear_vehiclename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehiclename_.ClearToEmpty();
}
inline const std::string& Connect::vehiclename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.vehicleName)
  return _internal_vehiclename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Connect::set_vehiclename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehiclename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.vehicleName)
}
inline std::string* Connect::mutable_vehiclename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vehiclename();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.vehicleName)
  return _s;
}
inline const std::string& Connect::_internal_vehiclename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vehiclename_.Get();
}
inline void Connect::_internal_set_vehiclename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehiclename_.Set(value, GetArena());
}
inline std::string* Connect::_internal_mutable_vehiclename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vehiclename_.Mutable( GetArena());
}
inline std::string* Connect::release_vehiclename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.vehicleName)
  return _impl_.vehiclename_.Release();
}
inline void Connect::set_allocated_vehiclename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vehiclename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vehiclename_.IsDefault()) {
          _impl_.vehiclename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.vehicleName)
}

// repeated .InternalProtocol.Device devices = 4;
inline int Connect::_internal_devices_size() const {
  return _internal_devices().size();
}
inline int Connect::devices_size() const {
  return _internal_devices_size();
}
inline ::InternalProtocol::Device* Connect::mutable_devices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.devices)
  return _internal_mutable_devices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>* Connect::mutable_devices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ExternalProtocol.Connect.devices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_devices();
}
inline const ::InternalProtocol::Device& Connect::devices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.devices)
  return _internal_devices().Get(index);
}
inline ::InternalProtocol::Device* Connect::add_devices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::InternalProtocol::Device* _add = _internal_mutable_devices()->Add();
  // @@protoc_insertion_point(field_add:ExternalProtocol.Connect.devices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>& Connect::devices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ExternalProtocol.Connect.devices)
  return _internal_devices();
}
inline const ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>&
Connect::_internal_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devices_;
}
inline ::google::protobuf::RepeatedPtrField<::InternalProtocol::Device>*
Connect::_internal_mutable_devices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.devices_;
}

// -------------------------------------------------------------------

// ConnectResponse

// string sessionId = 1 [features = {
inline void ConnectResponse::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& ConnectResponse::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ConnectResponse.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectResponse::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.ConnectResponse.sessionId)
}
inline std::string* ConnectResponse::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ConnectResponse.sessionId)
  return _s;
}
inline const std::string& ConnectResponse::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void ConnectResponse::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* ConnectResponse::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* ConnectResponse::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.ConnectResponse.sessionId)
  return _impl_.sessionid_.Release();
}
inline void ConnectResponse::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ConnectResponse.sessionId)
}

// .ExternalProtocol.ConnectResponse.Type type = 2 [features = {
inline void ConnectResponse::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::ExternalProtocol::ConnectResponse_Type ConnectResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ConnectResponse.type)
  return _internal_type();
}
inline void ConnectResponse::set_type(::ExternalProtocol::ConnectResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.ConnectResponse.type)
}
inline ::ExternalProtocol::ConnectResponse_Type ConnectResponse::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExternalProtocol::ConnectResponse_Type>(_impl_.type_);
}
inline void ConnectResponse::_internal_set_type(::ExternalProtocol::ConnectResponse_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Status

// string sessionId = 1 [features = {
inline void Status::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& Status::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.sessionId)
}
inline std::string* Status::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.sessionId)
  return _s;
}
inline const std::string& Status::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void Status::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* Status::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.sessionId)
  return _impl_.sessionid_.Release();
}
inline void Status::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Status.sessionId)
}

// .ExternalProtocol.Status.DeviceState deviceState = 2 [features = {
inline void Status::clear_devicestate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicestate_ = 0;
}
inline ::ExternalProtocol::Status_DeviceState Status::devicestate() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.deviceState)
  return _internal_devicestate();
}
inline void Status::set_devicestate(::ExternalProtocol::Status_DeviceState value) {
  _internal_set_devicestate(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.deviceState)
}
inline ::ExternalProtocol::Status_DeviceState Status::_internal_devicestate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExternalProtocol::Status_DeviceState>(_impl_.devicestate_);
}
inline void Status::_internal_set_devicestate(::ExternalProtocol::Status_DeviceState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devicestate_ = value;
}

// uint32 messageCounter = 3 [features = {
inline void Status::clear_messagecounter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = 0u;
}
inline ::uint32_t Status::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.messageCounter)
  return _internal_messagecounter();
}
inline void Status::set_messagecounter(::uint32_t value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.messageCounter)
}
inline ::uint32_t Status::_internal_messagecounter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messagecounter_;
}
inline void Status::_internal_set_messagecounter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = value;
}

// .InternalProtocol.DeviceStatus deviceStatus = 4;
inline bool Status::has_devicestatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.devicestatus_ != nullptr);
  return value;
}
inline const ::InternalProtocol::DeviceStatus& Status::_internal_devicestatus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::InternalProtocol::DeviceStatus* p = _impl_.devicestatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::DeviceStatus&>(::InternalProtocol::_DeviceStatus_default_instance_);
}
inline const ::InternalProtocol::DeviceStatus& Status::devicestatus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.deviceStatus)
  return _internal_devicestatus();
}
inline void Status::unsafe_arena_set_allocated_devicestatus(::InternalProtocol::DeviceStatus* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devicestatus_);
  }
  _impl_.devicestatus_ = reinterpret_cast<::InternalProtocol::DeviceStatus*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Status.deviceStatus)
}
inline ::InternalProtocol::DeviceStatus* Status::release_devicestatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::InternalProtocol::DeviceStatus* released = _impl_.devicestatus_;
  _impl_.devicestatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::InternalProtocol::DeviceStatus* Status::unsafe_arena_release_devicestatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.deviceStatus)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::InternalProtocol::DeviceStatus* temp = _impl_.devicestatus_;
  _impl_.devicestatus_ = nullptr;
  return temp;
}
inline ::InternalProtocol::DeviceStatus* Status::_internal_mutable_devicestatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.devicestatus_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::InternalProtocol::DeviceStatus>(GetArena());
    _impl_.devicestatus_ = reinterpret_cast<::InternalProtocol::DeviceStatus*>(p);
  }
  return _impl_.devicestatus_;
}
inline ::InternalProtocol::DeviceStatus* Status::mutable_devicestatus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::InternalProtocol::DeviceStatus* _msg = _internal_mutable_devicestatus();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.deviceStatus)
  return _msg;
}
inline void Status::set_allocated_devicestatus(::InternalProtocol::DeviceStatus* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devicestatus_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.devicestatus_ = reinterpret_cast<::InternalProtocol::DeviceStatus*>(value);
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Status.deviceStatus)
}

// bytes errorMessage = 5;
inline bool Status::has_errormessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Status::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Status::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Status::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errormessage_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.errorMessage)
}
inline std::string* Status::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.errorMessage)
  return _s;
}
inline const std::string& Status::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void Status::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* Status::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* Status::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.errorMessage)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.errormessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Status::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errormessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errormessage_.IsDefault()) {
          _impl_.errormessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Status.errorMessage)
}

// -------------------------------------------------------------------

// StatusResponse

// string sessionId = 1 [features = {
inline void StatusResponse::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& StatusResponse::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StatusResponse::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.sessionId)
}
inline std::string* StatusResponse::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.StatusResponse.sessionId)
  return _s;
}
inline const std::string& StatusResponse::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void StatusResponse::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* StatusResponse::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* StatusResponse::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.StatusResponse.sessionId)
  return _impl_.sessionid_.Release();
}
inline void StatusResponse::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.StatusResponse.sessionId)
}

// .ExternalProtocol.StatusResponse.Type type = 2 [features = {
inline void StatusResponse::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::ExternalProtocol::StatusResponse_Type StatusResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.type)
  return _internal_type();
}
inline void StatusResponse::set_type(::ExternalProtocol::StatusResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.type)
}
inline ::ExternalProtocol::StatusResponse_Type StatusResponse::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExternalProtocol::StatusResponse_Type>(_impl_.type_);
}
inline void StatusResponse::_internal_set_type(::ExternalProtocol::StatusResponse_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint32 messageCounter = 3 [features = {
inline void StatusResponse::clear_messagecounter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = 0u;
}
inline ::uint32_t StatusResponse::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.messageCounter)
  return _internal_messagecounter();
}
inline void StatusResponse::set_messagecounter(::uint32_t value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.messageCounter)
}
inline ::uint32_t StatusResponse::_internal_messagecounter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messagecounter_;
}
inline void StatusResponse::_internal_set_messagecounter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = value;
}

// -------------------------------------------------------------------

// Command

// string sessionId = 1 [features = {
inline void Command::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& Command::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Command::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Command.sessionId)
}
inline std::string* Command::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Command.sessionId)
  return _s;
}
inline const std::string& Command::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void Command::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* Command::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* Command::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Command.sessionId)
  return _impl_.sessionid_.Release();
}
inline void Command::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Command.sessionId)
}

// uint32 messageCounter = 2 [features = {
inline void Command::clear_messagecounter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = 0u;
}
inline ::uint32_t Command::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.messageCounter)
  return _internal_messagecounter();
}
inline void Command::set_messagecounter(::uint32_t value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Command.messageCounter)
}
inline ::uint32_t Command::_internal_messagecounter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messagecounter_;
}
inline void Command::_internal_set_messagecounter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = value;
}

// .InternalProtocol.DeviceCommand deviceCommand = 3;
inline bool Command::has_devicecommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.devicecommand_ != nullptr);
  return value;
}
inline const ::InternalProtocol::DeviceCommand& Command::_internal_devicecommand() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::InternalProtocol::DeviceCommand* p = _impl_.devicecommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::InternalProtocol::DeviceCommand&>(::InternalProtocol::_DeviceCommand_default_instance_);
}
inline const ::InternalProtocol::DeviceCommand& Command::devicecommand() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.deviceCommand)
  return _internal_devicecommand();
}
inline void Command::unsafe_arena_set_allocated_devicecommand(::InternalProtocol::DeviceCommand* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devicecommand_);
  }
  _impl_.devicecommand_ = reinterpret_cast<::InternalProtocol::DeviceCommand*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Command.deviceCommand)
}
inline ::InternalProtocol::DeviceCommand* Command::release_devicecommand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::InternalProtocol::DeviceCommand* released = _impl_.devicecommand_;
  _impl_.devicecommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::InternalProtocol::DeviceCommand* Command::unsafe_arena_release_devicecommand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.Command.deviceCommand)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::InternalProtocol::DeviceCommand* temp = _impl_.devicecommand_;
  _impl_.devicecommand_ = nullptr;
  return temp;
}
inline ::InternalProtocol::DeviceCommand* Command::_internal_mutable_devicecommand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.devicecommand_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::InternalProtocol::DeviceCommand>(GetArena());
    _impl_.devicecommand_ = reinterpret_cast<::InternalProtocol::DeviceCommand*>(p);
  }
  return _impl_.devicecommand_;
}
inline ::InternalProtocol::DeviceCommand* Command::mutable_devicecommand() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::InternalProtocol::DeviceCommand* _msg = _internal_mutable_devicecommand();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Command.deviceCommand)
  return _msg;
}
inline void Command::set_allocated_devicecommand(::InternalProtocol::DeviceCommand* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.devicecommand_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.devicecommand_ = reinterpret_cast<::InternalProtocol::DeviceCommand*>(value);
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Command.deviceCommand)
}

// -------------------------------------------------------------------

// CommandResponse

// string sessionId = 1 [features = {
inline void CommandResponse::clear_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.ClearToEmpty();
}
inline const std::string& CommandResponse::sessionid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.sessionId)
  return _internal_sessionid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommandResponse::set_sessionid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.sessionId)
}
inline std::string* CommandResponse::mutable_sessionid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.CommandResponse.sessionId)
  return _s;
}
inline const std::string& CommandResponse::_internal_sessionid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sessionid_.Get();
}
inline void CommandResponse::_internal_set_sessionid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.Set(value, GetArena());
}
inline std::string* CommandResponse::_internal_mutable_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sessionid_.Mutable( GetArena());
}
inline std::string* CommandResponse::release_sessionid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ExternalProtocol.CommandResponse.sessionId)
  return _impl_.sessionid_.Release();
}
inline void CommandResponse::set_allocated_sessionid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sessionid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionid_.IsDefault()) {
          _impl_.sessionid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.CommandResponse.sessionId)
}

// .ExternalProtocol.CommandResponse.Type type = 2 [features = {
inline void CommandResponse::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::ExternalProtocol::CommandResponse_Type CommandResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.type)
  return _internal_type();
}
inline void CommandResponse::set_type(::ExternalProtocol::CommandResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.type)
}
inline ::ExternalProtocol::CommandResponse_Type CommandResponse::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ExternalProtocol::CommandResponse_Type>(_impl_.type_);
}
inline void CommandResponse::_internal_set_type(::ExternalProtocol::CommandResponse_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint32 messageCounter = 3 [features = {
inline void CommandResponse::clear_messagecounter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = 0u;
}
inline ::uint32_t CommandResponse::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.messageCounter)
  return _internal_messagecounter();
}
inline void CommandResponse::set_messagecounter(::uint32_t value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.messageCounter)
}
inline ::uint32_t CommandResponse::_internal_messagecounter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messagecounter_;
}
inline void CommandResponse::_internal_set_messagecounter(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messagecounter_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ExternalProtocol


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ExternalProtocol::ConnectResponse_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExternalProtocol::ConnectResponse_Type>() {
  return ::ExternalProtocol::ConnectResponse_Type_descriptor();
}
template <>
struct is_proto_enum<::ExternalProtocol::Status_DeviceState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExternalProtocol::Status_DeviceState>() {
  return ::ExternalProtocol::Status_DeviceState_descriptor();
}
template <>
struct is_proto_enum<::ExternalProtocol::StatusResponse_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExternalProtocol::StatusResponse_Type>() {
  return ::ExternalProtocol::StatusResponse_Type_descriptor();
}
template <>
struct is_proto_enum<::ExternalProtocol::CommandResponse_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ExternalProtocol::CommandResponse_Type>() {
  return ::ExternalProtocol::CommandResponse_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto_2epb_2eh
