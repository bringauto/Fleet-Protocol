// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InternalProtocol.proto

#include "InternalProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace InternalProtocol {
PROTOBUF_CONSTEXPR DeviceConnect::DeviceConnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConnectDefaultTypeInternal() {}
  union {
    DeviceConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConnectDefaultTypeInternal _DeviceConnect_default_instance_;
PROTOBUF_CONSTEXPR DeviceConnectResponse::DeviceConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responsetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceConnectResponseDefaultTypeInternal() {}
  union {
    DeviceConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceConnectResponseDefaultTypeInternal _DeviceConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR DeviceStatus::DeviceStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.statusdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
PROTOBUF_CONSTEXPR DeviceCommand::DeviceCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.commanddata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCommandDefaultTypeInternal() {}
  union {
    DeviceCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCommandDefaultTypeInternal _DeviceCommand_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.devicerole_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.module_)*/0
  , /*decltype(_impl_.devicetype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace InternalProtocol
static ::_pb::Metadata file_level_metadata_InternalProtocol_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_InternalProtocol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_InternalProtocol_2eproto = nullptr;

const uint32_t TableStruct_InternalProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceConnect, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceConnect, _impl_.priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceConnectResponse, _impl_.responsetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceStatus, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceStatus, _impl_.statusdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::DeviceCommand, _impl_.commanddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::Device, _impl_.module_),
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::Device, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::Device, _impl_.devicerole_),
  PROTOBUF_FIELD_OFFSET(::InternalProtocol::Device, _impl_.devicename_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::InternalProtocol::DeviceConnect)},
  { 8, -1, -1, sizeof(::InternalProtocol::DeviceConnectResponse)},
  { 15, -1, -1, sizeof(::InternalProtocol::DeviceStatus)},
  { 23, -1, -1, sizeof(::InternalProtocol::DeviceCommand)},
  { 30, -1, -1, sizeof(::InternalProtocol::Device)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::InternalProtocol::_DeviceConnect_default_instance_._instance,
  &::InternalProtocol::_DeviceConnectResponse_default_instance_._instance,
  &::InternalProtocol::_DeviceStatus_default_instance_._instance,
  &::InternalProtocol::_DeviceCommand_default_instance_._instance,
  &::InternalProtocol::_Device_default_instance_._instance,
};

const char descriptor_table_protodef_InternalProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026InternalProtocol.proto\022\020InternalProtoc"
  "ol\"K\n\rDeviceConnect\022(\n\006device\030\001 \001(\0132\030.In"
  "ternalProtocol.Device\022\020\n\010priority\030\002 \001(\r\""
  "\356\001\n\025DeviceConnectResponse\022J\n\014responseTyp"
  "e\030\001 \001(\01624.InternalProtocol.DeviceConnect"
  "Response.ResponseType\"\210\001\n\014ResponseType\022\006"
  "\n\002OK\020\000\022\025\n\021ALREADY_CONNECTED\020\001\022\030\n\024MODULE_"
  "NOT_SUPPORTED\020\002\022\030\n\024DEVICE_NOT_SUPPORTED\020"
  "\003\022%\n!HIGHER_PRIORITY_ALREADY_CONNECTED\020\004"
  "\"L\n\014DeviceStatus\022(\n\006device\030\001 \001(\0132\030.Inter"
  "nalProtocol.Device\022\022\n\nstatusData\030\002 \001(\014\"$"
  "\n\rDeviceCommand\022\023\n\013commandData\030\001 \001(\014\"\336\001\n"
  "\006Device\022/\n\006module\030\001 \001(\0162\037.InternalProtoc"
  "ol.Device.Module\022\022\n\ndeviceType\030\002 \001(\r\022\022\n\n"
  "deviceRole\030\003 \001(\t\022\022\n\ndeviceName\030\004 \001(\t\"g\n\006"
  "Module\022\023\n\017RESERVED_MODULE\020\000\022\022\n\016MISSION_M"
  "ODULE\020\001\022\030\n\024CAR_ACCESSORY_MODULE\020\002\022\023\n\016EXA"
  "MPLE_MODULE\020\347\007\"\005\010\003\020\346\007B>Z!../internal/pkg"
  "/ba_proto;ba_proto\252\002\030Google.Protobuf.ba_"
  "protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_InternalProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_InternalProtocol_2eproto = {
    false, false, 773, descriptor_table_protodef_InternalProtocol_2eproto,
    "InternalProtocol.proto",
    &descriptor_table_InternalProtocol_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_InternalProtocol_2eproto::offsets,
    file_level_metadata_InternalProtocol_2eproto, file_level_enum_descriptors_InternalProtocol_2eproto,
    file_level_service_descriptors_InternalProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_InternalProtocol_2eproto_getter() {
  return &descriptor_table_InternalProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_InternalProtocol_2eproto(&descriptor_table_InternalProtocol_2eproto);
namespace InternalProtocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceConnectResponse_ResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_InternalProtocol_2eproto);
  return file_level_enum_descriptors_InternalProtocol_2eproto[0];
}
bool DeviceConnectResponse_ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::OK;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::ALREADY_CONNECTED;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::MODULE_NOT_SUPPORTED;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::DEVICE_NOT_SUPPORTED;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::HIGHER_PRIORITY_ALREADY_CONNECTED;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::ResponseType_MIN;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse::ResponseType_MAX;
constexpr int DeviceConnectResponse::ResponseType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_InternalProtocol_2eproto);
  return file_level_enum_descriptors_InternalProtocol_2eproto[1];
}
bool Device_Module_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 999:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Device_Module Device::RESERVED_MODULE;
constexpr Device_Module Device::MISSION_MODULE;
constexpr Device_Module Device::CAR_ACCESSORY_MODULE;
constexpr Device_Module Device::EXAMPLE_MODULE;
constexpr Device_Module Device::Module_MIN;
constexpr Device_Module Device::Module_MAX;
constexpr int Device::Module_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DeviceConnect::_Internal {
 public:
  static const ::InternalProtocol::Device& device(const DeviceConnect* msg);
};

const ::InternalProtocol::Device&
DeviceConnect::_Internal::device(const DeviceConnect* msg) {
  return *msg->_impl_.device_;
}
DeviceConnect::DeviceConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InternalProtocol.DeviceConnect)
}
DeviceConnect::DeviceConnect(const DeviceConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceConnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::InternalProtocol::Device(*from._impl_.device_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:InternalProtocol.DeviceConnect)
}

inline void DeviceConnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){nullptr}
    , decltype(_impl_.priority_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceConnect::~DeviceConnect() {
  // @@protoc_insertion_point(destructor:InternalProtocol.DeviceConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
}

void DeviceConnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:InternalProtocol.DeviceConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _impl_.priority_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InternalProtocol.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InternalProtocol.DeviceConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InternalProtocol.Device device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // uint32 priority = 2;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalProtocol.DeviceConnect)
  return target;
}

size_t DeviceConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InternalProtocol.DeviceConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InternalProtocol.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  // uint32 priority = 2;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceConnect::GetClassData() const { return &_class_data_; }


void DeviceConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceConnect*>(&to_msg);
  auto& from = static_cast<const DeviceConnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalProtocol.DeviceConnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::InternalProtocol::Device::MergeFrom(
        from._internal_device());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConnect::CopyFrom(const DeviceConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InternalProtocol.DeviceConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConnect::IsInitialized() const {
  return true;
}

void DeviceConnect::InternalSwap(DeviceConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConnect, _impl_.priority_)
      + sizeof(DeviceConnect::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(DeviceConnect, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InternalProtocol_2eproto_getter, &descriptor_table_InternalProtocol_2eproto_once,
      file_level_metadata_InternalProtocol_2eproto[0]);
}

// ===================================================================

class DeviceConnectResponse::_Internal {
 public:
};

DeviceConnectResponse::DeviceConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InternalProtocol.DeviceConnectResponse)
}
DeviceConnectResponse::DeviceConnectResponse(const DeviceConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.responsetype_ = from._impl_.responsetype_;
  // @@protoc_insertion_point(copy_constructor:InternalProtocol.DeviceConnectResponse)
}

inline void DeviceConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responsetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceConnectResponse::~DeviceConnectResponse() {
  // @@protoc_insertion_point(destructor:InternalProtocol.DeviceConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:InternalProtocol.DeviceConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_responsetype(static_cast<::InternalProtocol::DeviceConnectResponse_ResponseType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InternalProtocol.DeviceConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
  if (this->_internal_responsetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_responsetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalProtocol.DeviceConnectResponse)
  return target;
}

size_t DeviceConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InternalProtocol.DeviceConnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
  if (this->_internal_responsetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_responsetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceConnectResponse::GetClassData() const { return &_class_data_; }


void DeviceConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceConnectResponse*>(&to_msg);
  auto& from = static_cast<const DeviceConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalProtocol.DeviceConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_responsetype() != 0) {
    _this->_internal_set_responsetype(from._internal_responsetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceConnectResponse::CopyFrom(const DeviceConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InternalProtocol.DeviceConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConnectResponse::IsInitialized() const {
  return true;
}

void DeviceConnectResponse::InternalSwap(DeviceConnectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.responsetype_, other->_impl_.responsetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InternalProtocol_2eproto_getter, &descriptor_table_InternalProtocol_2eproto_once,
      file_level_metadata_InternalProtocol_2eproto[1]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
  static const ::InternalProtocol::Device& device(const DeviceStatus* msg);
};

const ::InternalProtocol::Device&
DeviceStatus::_Internal::device(const DeviceStatus* msg) {
  return *msg->_impl_.device_;
}
DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InternalProtocol.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.statusdata_){}
    , decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.statusdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statusdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statusdata().empty()) {
    _this->_impl_.statusdata_.Set(from._internal_statusdata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_device()) {
    _this->_impl_.device_ = new ::InternalProtocol::Device(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:InternalProtocol.DeviceStatus)
}

inline void DeviceStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.statusdata_){}
    , decltype(_impl_.device_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.statusdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.statusdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:InternalProtocol.DeviceStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.statusdata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.device_;
}

void DeviceStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:InternalProtocol.DeviceStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statusdata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.device_ != nullptr) {
    delete _impl_.device_;
  }
  _impl_.device_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InternalProtocol.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes statusData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_statusdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InternalProtocol.DeviceStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InternalProtocol.Device device = 1;
  if (this->_internal_has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // bytes statusData = 2;
  if (!this->_internal_statusdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_statusdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalProtocol.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InternalProtocol.DeviceStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes statusData = 2;
  if (!this->_internal_statusdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_statusdata());
  }

  // .InternalProtocol.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }


void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceStatus*>(&to_msg);
  auto& from = static_cast<const DeviceStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalProtocol.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_statusdata().empty()) {
    _this->_internal_set_statusdata(from._internal_statusdata());
  }
  if (from._internal_has_device()) {
    _this->_internal_mutable_device()->::InternalProtocol::Device::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InternalProtocol.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.statusdata_, lhs_arena,
      &other->_impl_.statusdata_, rhs_arena
  );
  swap(_impl_.device_, other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InternalProtocol_2eproto_getter, &descriptor_table_InternalProtocol_2eproto_once,
      file_level_metadata_InternalProtocol_2eproto[2]);
}

// ===================================================================

class DeviceCommand::_Internal {
 public:
};

DeviceCommand::DeviceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InternalProtocol.DeviceCommand)
}
DeviceCommand::DeviceCommand(const DeviceCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.commanddata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.commanddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commanddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commanddata().empty()) {
    _this->_impl_.commanddata_.Set(from._internal_commanddata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:InternalProtocol.DeviceCommand)
}

inline void DeviceCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.commanddata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.commanddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commanddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceCommand::~DeviceCommand() {
  // @@protoc_insertion_point(destructor:InternalProtocol.DeviceCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commanddata_.Destroy();
}

void DeviceCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:InternalProtocol.DeviceCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commanddata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes commandData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_commanddata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InternalProtocol.DeviceCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes commandData = 1;
  if (!this->_internal_commanddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_commanddata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalProtocol.DeviceCommand)
  return target;
}

size_t DeviceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InternalProtocol.DeviceCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commandData = 1;
  if (!this->_internal_commanddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commanddata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceCommand::GetClassData() const { return &_class_data_; }


void DeviceCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceCommand*>(&to_msg);
  auto& from = static_cast<const DeviceCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalProtocol.DeviceCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commanddata().empty()) {
    _this->_internal_set_commanddata(from._internal_commanddata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceCommand::CopyFrom(const DeviceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InternalProtocol.DeviceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCommand::IsInitialized() const {
  return true;
}

void DeviceCommand::InternalSwap(DeviceCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commanddata_, lhs_arena,
      &other->_impl_.commanddata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InternalProtocol_2eproto_getter, &descriptor_table_InternalProtocol_2eproto_once,
      file_level_metadata_InternalProtocol_2eproto[3]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InternalProtocol.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.devicerole_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.module_){}
    , decltype(_impl_.devicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.devicerole_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicerole_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicerole().empty()) {
    _this->_impl_.devicerole_.Set(from._internal_devicerole(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicename().empty()) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.module_, &from._impl_.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.devicetype_) -
    reinterpret_cast<char*>(&_impl_.module_)) + sizeof(_impl_.devicetype_));
  // @@protoc_insertion_point(copy_constructor:InternalProtocol.Device)
}

inline void Device::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.devicerole_){}
    , decltype(_impl_.devicename_){}
    , decltype(_impl_.module_){0}
    , decltype(_impl_.devicetype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.devicerole_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicerole_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:InternalProtocol.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.devicerole_.Destroy();
  _impl_.devicename_.Destroy();
}

void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:InternalProtocol.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.devicerole_.ClearToEmpty();
  _impl_.devicename_.ClearToEmpty();
  ::memset(&_impl_.module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.devicetype_) -
      reinterpret_cast<char*>(&_impl_.module_)) + sizeof(_impl_.devicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .InternalProtocol.Device.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::InternalProtocol::Device_Module>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string deviceRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_devicerole();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InternalProtocol.Device.deviceRole"));
        } else
          goto handle_unusual;
        continue;
      // string deviceName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InternalProtocol.Device.deviceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InternalProtocol.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .InternalProtocol.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_module(), target);
  }

  // uint32 deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_devicetype(), target);
  }

  // string deviceRole = 3;
  if (!this->_internal_devicerole().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicerole().data(), static_cast<int>(this->_internal_devicerole().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InternalProtocol.Device.deviceRole");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicerole(), target);
  }

  // string deviceName = 4;
  if (!this->_internal_devicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InternalProtocol.Device.deviceName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InternalProtocol.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InternalProtocol.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceRole = 3;
  if (!this->_internal_devicerole().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicerole());
  }

  // string deviceName = 4;
  if (!this->_internal_devicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  // .InternalProtocol.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_module());
  }

  // uint32 deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_devicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }


void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InternalProtocol.Device)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devicerole().empty()) {
    _this->_internal_set_devicerole(from._internal_devicerole());
  }
  if (!from._internal_devicename().empty()) {
    _this->_internal_set_devicename(from._internal_devicename());
  }
  if (from._internal_module() != 0) {
    _this->_internal_set_module(from._internal_module());
  }
  if (from._internal_devicetype() != 0) {
    _this->_internal_set_devicetype(from._internal_devicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InternalProtocol.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicerole_, lhs_arena,
      &other->_impl_.devicerole_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicename_, lhs_arena,
      &other->_impl_.devicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, _impl_.devicetype_)
      + sizeof(Device::_impl_.devicetype_)
      - PROTOBUF_FIELD_OFFSET(Device, _impl_.module_)>(
          reinterpret_cast<char*>(&_impl_.module_),
          reinterpret_cast<char*>(&other->_impl_.module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InternalProtocol_2eproto_getter, &descriptor_table_InternalProtocol_2eproto_once,
      file_level_metadata_InternalProtocol_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace InternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InternalProtocol::DeviceConnect*
Arena::CreateMaybeMessage< ::InternalProtocol::DeviceConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InternalProtocol::DeviceConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::InternalProtocol::DeviceConnectResponse*
Arena::CreateMaybeMessage< ::InternalProtocol::DeviceConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InternalProtocol::DeviceConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::InternalProtocol::DeviceStatus*
Arena::CreateMaybeMessage< ::InternalProtocol::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InternalProtocol::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::InternalProtocol::DeviceCommand*
Arena::CreateMaybeMessage< ::InternalProtocol::DeviceCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InternalProtocol::DeviceCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::InternalProtocol::Device*
Arena::CreateMaybeMessage< ::InternalProtocol::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InternalProtocol::Device >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
