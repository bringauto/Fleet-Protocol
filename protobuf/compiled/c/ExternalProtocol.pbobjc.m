// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternalProtocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ExternalProtocol.pbobjc.h"
#import "InternalProtocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Command);
GPBObjCClassDeclaration(CommandResponse);
GPBObjCClassDeclaration(Connect);
GPBObjCClassDeclaration(ConnectResponse);
GPBObjCClassDeclaration(Device);
GPBObjCClassDeclaration(DeviceCommand);
GPBObjCClassDeclaration(DeviceStatus);
GPBObjCClassDeclaration(Status);
GPBObjCClassDeclaration(StatusResponse);

#pragma mark - ExternalProtocolRoot

@implementation ExternalProtocolRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ExternalProtocolRoot_FileDescriptor

static GPBFileDescriptor *ExternalProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ExternalProtocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ExternalServer

@implementation ExternalServer

@dynamic messageTypeOneOfCase;
@dynamic connectResponse;
@dynamic statusResponse;
@dynamic command;

typedef struct ExternalServer__storage_ {
  uint32_t _has_storage_[2];
  ConnectResponse *connectResponse;
  StatusResponse *statusResponse;
  Command *command;
} ExternalServer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connectResponse",
        .dataTypeSpecific.clazz = GPBObjCClass(ConnectResponse),
        .number = ExternalServer_FieldNumber_ConnectResponse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalServer__storage_, connectResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "statusResponse",
        .dataTypeSpecific.clazz = GPBObjCClass(StatusResponse),
        .number = ExternalServer_FieldNumber_StatusResponse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalServer__storage_, statusResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "command",
        .dataTypeSpecific.clazz = GPBObjCClass(Command),
        .number = ExternalServer_FieldNumber_Command,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalServer__storage_, command),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExternalServer class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExternalServer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "messageType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\017\000\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ExternalServer_ClearMessageTypeOneOfCase(ExternalServer *message) {
  GPBDescriptor *descriptor = [ExternalServer descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ExternalClient

@implementation ExternalClient

@dynamic messageTypeOneOfCase;
@dynamic connect;
@dynamic status;
@dynamic commandResponse;

typedef struct ExternalClient__storage_ {
  uint32_t _has_storage_[2];
  Connect *connect;
  Status *status;
  CommandResponse *commandResponse;
} ExternalClient__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connect",
        .dataTypeSpecific.clazz = GPBObjCClass(Connect),
        .number = ExternalClient_FieldNumber_Connect,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalClient__storage_, connect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(Status),
        .number = ExternalClient_FieldNumber_Status,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalClient__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commandResponse",
        .dataTypeSpecific.clazz = GPBObjCClass(CommandResponse),
        .number = ExternalClient_FieldNumber_CommandResponse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ExternalClient__storage_, commandResponse),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExternalClient class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExternalClient__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "messageType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ExternalClient_ClearMessageTypeOneOfCase(ExternalClient *message) {
  GPBDescriptor *descriptor = [ExternalClient descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Connect

@implementation Connect

@dynamic sessionId;
@dynamic company;
@dynamic vehicleName;
@dynamic devicesArray, devicesArray_Count;

typedef struct Connect__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
  NSString *company;
  NSString *vehicleName;
  NSMutableArray *devicesArray;
} Connect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Connect_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Connect__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "company",
        .dataTypeSpecific.clazz = Nil,
        .number = Connect_FieldNumber_Company,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Connect__storage_, company),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vehicleName",
        .dataTypeSpecific.clazz = Nil,
        .number = Connect_FieldNumber_VehicleName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Connect__storage_, vehicleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "devicesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Device),
        .number = Connect_FieldNumber_DevicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Connect__storage_, devicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Connect class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Connect__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConnectResponse

@implementation ConnectResponse

@dynamic sessionId;
@dynamic type;

typedef struct ConnectResponse__storage_ {
  uint32_t _has_storage_[1];
  ConnectResponse_Type type;
  NSString *sessionId;
} ConnectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ConnectResponse_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnectResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ConnectResponse_Type_EnumDescriptor,
        .number = ConnectResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnectResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConnectResponse class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnectResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ConnectResponse_Type_RawValue(ConnectResponse *message) {
  GPBDescriptor *descriptor = [ConnectResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnectResponse_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetConnectResponse_Type_RawValue(ConnectResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ConnectResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnectResponse_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum ConnectResponse_Type

GPBEnumDescriptor *ConnectResponse_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000AlreadyLogged\000";
    static const int32_t values[] = {
        ConnectResponse_Type_Ok,
        ConnectResponse_Type_AlreadyLogged,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ConnectResponse_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ConnectResponse_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ConnectResponse_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case ConnectResponse_Type_Ok:
    case ConnectResponse_Type_AlreadyLogged:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Status

@implementation Status

@dynamic sessionId;
@dynamic deviceState;
@dynamic messageCounter;
@dynamic hasDeviceStatus, deviceStatus;
@dynamic hasErrorMessage, errorMessage;

typedef struct Status__storage_ {
  uint32_t _has_storage_[1];
  Status_DeviceState deviceState;
  uint32_t messageCounter;
  NSString *sessionId;
  DeviceStatus *deviceStatus;
  NSData *errorMessage;
} Status__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Status_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Status__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceState",
        .dataTypeSpecific.enumDescFunc = Status_DeviceState_EnumDescriptor,
        .number = Status_FieldNumber_DeviceState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Status__storage_, deviceState),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = Status_FieldNumber_MessageCounter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Status__storage_, messageCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deviceStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceStatus),
        .number = Status_FieldNumber_DeviceStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Status__storage_, deviceStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = Status_FieldNumber_ErrorMessage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Status__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Status class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Status__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\013\000\003\016\000\004\014\000\005\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Status_DeviceState_RawValue(Status *message) {
  GPBDescriptor *descriptor = [Status descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Status_FieldNumber_DeviceState];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStatus_DeviceState_RawValue(Status *message, int32_t value) {
  GPBDescriptor *descriptor = [Status descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Status_FieldNumber_DeviceState];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Status_DeviceState

GPBEnumDescriptor *Status_DeviceState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Connecting\000Running\000Error\000Disconnect\000";
    static const int32_t values[] = {
        Status_DeviceState_Connecting,
        Status_DeviceState_Running,
        Status_DeviceState_Error,
        Status_DeviceState_Disconnect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Status_DeviceState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Status_DeviceState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Status_DeviceState_IsValidValue(int32_t value__) {
  switch (value__) {
    case Status_DeviceState_Connecting:
    case Status_DeviceState_Running:
    case Status_DeviceState_Error:
    case Status_DeviceState_Disconnect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StatusResponse

@implementation StatusResponse

@dynamic sessionId;
@dynamic type;
@dynamic messageCounter;

typedef struct StatusResponse__storage_ {
  uint32_t _has_storage_[1];
  StatusResponse_Type type;
  uint32_t messageCounter;
  NSString *sessionId;
} StatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = StatusResponse_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = StatusResponse_Type_EnumDescriptor,
        .number = StatusResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = StatusResponse_FieldNumber_MessageCounter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StatusResponse__storage_, messageCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusResponse class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\003\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StatusResponse_Type_RawValue(StatusResponse *message) {
  GPBDescriptor *descriptor = [StatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StatusResponse_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStatusResponse_Type_RawValue(StatusResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [StatusResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StatusResponse_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum StatusResponse_Type

GPBEnumDescriptor *StatusResponse_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000";
    static const int32_t values[] = {
        StatusResponse_Type_Ok,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(StatusResponse_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:StatusResponse_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL StatusResponse_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case StatusResponse_Type_Ok:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Command

@implementation Command

@dynamic sessionId;
@dynamic messageCounter;
@dynamic hasDevice, device;
@dynamic hasDeviceCommand, deviceCommand;

typedef struct Command__storage_ {
  uint32_t _has_storage_[1];
  uint32_t messageCounter;
  NSString *sessionId;
  Device *device;
  DeviceCommand *deviceCommand;
} Command__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Command_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Command__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = Command_FieldNumber_MessageCounter,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Command__storage_, messageCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "device",
        .dataTypeSpecific.clazz = GPBObjCClass(Device),
        .number = Command_FieldNumber_Device,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Command__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deviceCommand",
        .dataTypeSpecific.clazz = GPBObjCClass(DeviceCommand),
        .number = Command_FieldNumber_DeviceCommand,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Command__storage_, deviceCommand),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Command class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Command__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\016\000\004\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommandResponse

@implementation CommandResponse

@dynamic sessionId;
@dynamic type;
@dynamic messageCounter;

typedef struct CommandResponse__storage_ {
  uint32_t _has_storage_[1];
  CommandResponse_Type type;
  uint32_t messageCounter;
  NSString *sessionId;
} CommandResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = CommandResponse_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommandResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = CommandResponse_Type_EnumDescriptor,
        .number = CommandResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommandResponse__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageCounter",
        .dataTypeSpecific.clazz = Nil,
        .number = CommandResponse_FieldNumber_MessageCounter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommandResponse__storage_, messageCounter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommandResponse class]
                                     rootClass:[ExternalProtocolRoot class]
                                          file:ExternalProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommandResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\003\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommandResponse_Type_RawValue(CommandResponse *message) {
  GPBDescriptor *descriptor = [CommandResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommandResponse_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCommandResponse_Type_RawValue(CommandResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [CommandResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommandResponse_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CommandResponse_Type

GPBEnumDescriptor *CommandResponse_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000DeviceNotConnected\000";
    static const int32_t values[] = {
        CommandResponse_Type_Ok,
        CommandResponse_Type_DeviceNotConnected,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommandResponse_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommandResponse_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommandResponse_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommandResponse_Type_Ok:
    case CommandResponse_Type_DeviceNotConnected:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
