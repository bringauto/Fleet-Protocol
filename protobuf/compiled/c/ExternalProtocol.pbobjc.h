// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternalProtocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Command;
@class CommandResponse;
@class Connect;
@class ConnectResponse;
@class Device;
@class DeviceCommand;
@class DeviceStatus;
@class Status;
@class StatusResponse;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ConnectResponse_Type

typedef GPB_ENUM(ConnectResponse_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ConnectResponse_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  ConnectResponse_Type_Ok = 0,

  /**
   * *
   * If some car is already logged in under same company and name
   **/
  ConnectResponse_Type_AlreadyLogged = 1,
};

GPBEnumDescriptor *ConnectResponse_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ConnectResponse_Type_IsValidValue(int32_t value);

#pragma mark - Enum Status_DeviceState

typedef GPB_ENUM(Status_DeviceState) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Status_DeviceState_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Status_DeviceState_Connecting = 0,
  Status_DeviceState_Running = 1,
  Status_DeviceState_Error = 2,
  Status_DeviceState_Disconnect = 3,
};

GPBEnumDescriptor *Status_DeviceState_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Status_DeviceState_IsValidValue(int32_t value);

#pragma mark - Enum StatusResponse_Type

typedef GPB_ENUM(StatusResponse_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  StatusResponse_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  StatusResponse_Type_Ok = 0,
};

GPBEnumDescriptor *StatusResponse_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL StatusResponse_Type_IsValidValue(int32_t value);

#pragma mark - Enum CommandResponse_Type

typedef GPB_ENUM(CommandResponse_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CommandResponse_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  CommandResponse_Type_Ok = 0,
  CommandResponse_Type_DeviceNotConnected = 1,
};

GPBEnumDescriptor *CommandResponse_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CommandResponse_Type_IsValidValue(int32_t value);

#pragma mark - ExternalProtocolRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ExternalProtocolRoot : GPBRootObject
@end

#pragma mark - ExternalServer

typedef GPB_ENUM(ExternalServer_FieldNumber) {
  ExternalServer_FieldNumber_ConnectResponse = 1,
  ExternalServer_FieldNumber_StatusResponse = 2,
  ExternalServer_FieldNumber_Command = 3,
};

typedef GPB_ENUM(ExternalServer_MessageType_OneOfCase) {
  ExternalServer_MessageType_OneOfCase_GPBUnsetOneOfCase = 0,
  ExternalServer_MessageType_OneOfCase_ConnectResponse = 1,
  ExternalServer_MessageType_OneOfCase_StatusResponse = 2,
  ExternalServer_MessageType_OneOfCase_Command = 3,
};

/**
 * *
 * Special message which contains other fleet server messages
 * Every message of this type can contain only one of the fleet server messages
 * From Server to Client only.
 **/
GPB_FINAL @interface ExternalServer : GPBMessage

@property(nonatomic, readonly) ExternalServer_MessageType_OneOfCase messageTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) ConnectResponse *connectResponse;

@property(nonatomic, readwrite, strong, null_resettable) StatusResponse *statusResponse;

@property(nonatomic, readwrite, strong, null_resettable) Command *command;

@end

/**
 * Clears whatever value was set for the oneof 'messageType'.
 **/
void ExternalServer_ClearMessageTypeOneOfCase(ExternalServer *message);

#pragma mark - ExternalClient

typedef GPB_ENUM(ExternalClient_FieldNumber) {
  ExternalClient_FieldNumber_Connect = 1,
  ExternalClient_FieldNumber_Status = 2,
  ExternalClient_FieldNumber_CommandResponse = 3,
};

typedef GPB_ENUM(ExternalClient_MessageType_OneOfCase) {
  ExternalClient_MessageType_OneOfCase_GPBUnsetOneOfCase = 0,
  ExternalClient_MessageType_OneOfCase_Connect = 1,
  ExternalClient_MessageType_OneOfCase_Status = 2,
  ExternalClient_MessageType_OneOfCase_CommandResponse = 3,
};

/**
 * *
 * Special message which contains other fleet client messages
 * Every message of this type can contain only one of the fleet client messages
 * From Client to Server only.
 **/
GPB_FINAL @interface ExternalClient : GPBMessage

@property(nonatomic, readonly) ExternalClient_MessageType_OneOfCase messageTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Connect *connect;

@property(nonatomic, readwrite, strong, null_resettable) Status *status;

@property(nonatomic, readwrite, strong, null_resettable) CommandResponse *commandResponse;

@end

/**
 * Clears whatever value was set for the oneof 'messageType'.
 **/
void ExternalClient_ClearMessageTypeOneOfCase(ExternalClient *message);

#pragma mark - Connect

typedef GPB_ENUM(Connect_FieldNumber) {
  Connect_FieldNumber_SessionId = 1,
  Connect_FieldNumber_Company = 2,
  Connect_FieldNumber_VehicleName = 3,
  Connect_FieldNumber_DevicesArray = 4,
};

/**
 * *
 * Connect message information
 * First message in new communication.
 **/
GPB_FINAL @interface Connect : GPBMessage

/**
 *
 * sessionId of the car
 * - generated before sending first message
 * - stays same in each session
 * - is for check if server communicates with the same car
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/**
 *
 * Company name
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *company;

/**
 *
 * Car name
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *vehicleName;

/**
 *
 * Unique names of all connected devices
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Device*> *devicesArray;
/** The number of items in @c devicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger devicesArray_Count;

@end

#pragma mark - ConnectResponse

typedef GPB_ENUM(ConnectResponse_FieldNumber) {
  ConnectResponse_FieldNumber_SessionId = 1,
  ConnectResponse_FieldNumber_Type = 2,
};

/**
 * *
 * ConnectResponse information
 * Response only to Connect message
 **/
GPB_FINAL @interface ConnectResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@property(nonatomic, readwrite) ConnectResponse_Type type;

@end

/**
 * Fetches the raw value of a @c ConnectResponse's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ConnectResponse_Type_RawValue(ConnectResponse *message);
/**
 * Sets the raw value of an @c ConnectResponse's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetConnectResponse_Type_RawValue(ConnectResponse *message, int32_t value);

#pragma mark - Status

typedef GPB_ENUM(Status_FieldNumber) {
  Status_FieldNumber_SessionId = 1,
  Status_FieldNumber_DeviceState = 2,
  Status_FieldNumber_MessageCounter = 3,
  Status_FieldNumber_DeviceStatus = 4,
  Status_FieldNumber_ErrorMessage = 5,
};

/**
 * *
 * Status information with error type, contains status from a device
 **/
GPB_FINAL @interface Status : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/**
 * *
 * State of the device sending the Status
 **/
@property(nonatomic, readwrite) Status_DeviceState deviceState;

/**
 * *
 * Message ID
 **/
@property(nonatomic, readwrite) uint32_t messageCounter;

/**
 * *
 * Device specific status message, containing device information and status data
 **/
@property(nonatomic, readwrite, strong, null_resettable) DeviceStatus *deviceStatus;
/** Test to see if @c deviceStatus has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceStatus;

/**
 * *
 * Device specific error message
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *errorMessage;
/** Test to see if @c errorMessage has been set. */
@property(nonatomic, readwrite) BOOL hasErrorMessage;

@end

/**
 * Fetches the raw value of a @c Status's @c deviceState property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Status_DeviceState_RawValue(Status *message);
/**
 * Sets the raw value of an @c Status's @c deviceState property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetStatus_DeviceState_RawValue(Status *message, int32_t value);

#pragma mark - StatusResponse

typedef GPB_ENUM(StatusResponse_FieldNumber) {
  StatusResponse_FieldNumber_SessionId = 1,
  StatusResponse_FieldNumber_Type = 2,
  StatusResponse_FieldNumber_MessageCounter = 3,
};

/**
 * *
 * StatusResponse information
 * Response only to Status message
 **/
GPB_FINAL @interface StatusResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@property(nonatomic, readwrite) StatusResponse_Type type;

@property(nonatomic, readwrite) uint32_t messageCounter;

@end

/**
 * Fetches the raw value of a @c StatusResponse's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t StatusResponse_Type_RawValue(StatusResponse *message);
/**
 * Sets the raw value of an @c StatusResponse's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetStatusResponse_Type_RawValue(StatusResponse *message, int32_t value);

#pragma mark - Command

typedef GPB_ENUM(Command_FieldNumber) {
  Command_FieldNumber_SessionId = 1,
  Command_FieldNumber_MessageCounter = 2,
  Command_FieldNumber_Device = 3,
  Command_FieldNumber_DeviceCommand = 4,
};

/**
 * *
 * Command message information
 * - contains command for a device
 **/
GPB_FINAL @interface Command : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@property(nonatomic, readwrite) uint32_t messageCounter;

/**
 * *
 * command destination device
 **/
@property(nonatomic, readwrite, strong, null_resettable) Device *device;
/** Test to see if @c device has been set. */
@property(nonatomic, readwrite) BOOL hasDevice;

/**
 * *
 * command binary data
 **/
@property(nonatomic, readwrite, strong, null_resettable) DeviceCommand *deviceCommand;
/** Test to see if @c deviceCommand has been set. */
@property(nonatomic, readwrite) BOOL hasDeviceCommand;

@end

#pragma mark - CommandResponse

typedef GPB_ENUM(CommandResponse_FieldNumber) {
  CommandResponse_FieldNumber_SessionId = 1,
  CommandResponse_FieldNumber_Type = 2,
  CommandResponse_FieldNumber_MessageCounter = 3,
};

/**
 * *
 * CommandResponse information
 * Response only to Command message
 **/
GPB_FINAL @interface CommandResponse : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@property(nonatomic, readwrite) CommandResponse_Type type;

@property(nonatomic, readwrite) uint32_t messageCounter;

@end

/**
 * Fetches the raw value of a @c CommandResponse's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CommandResponse_Type_RawValue(CommandResponse *message);
/**
 * Sets the raw value of an @c CommandResponse's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCommandResponse_Type_RawValue(CommandResponse *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
