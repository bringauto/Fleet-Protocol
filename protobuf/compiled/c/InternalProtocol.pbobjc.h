// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: InternalProtocol.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Device;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum DeviceConnectResponse_ResponseType

/**
 * *
 * Indicates if connection was successful or which error occurred
 **/
typedef GPB_ENUM(DeviceConnectResponse_ResponseType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DeviceConnectResponse_ResponseType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * *
   * Connection successful
   **/
  DeviceConnectResponse_ResponseType_Ok = 0,

  /**
   * *
   * Device with given name is already connected
   **/
  DeviceConnectResponse_ResponseType_AlreadyConnected = 1,

  /**
   * *
   * Module server does not support given module
   **/
  DeviceConnectResponse_ResponseType_ModuleNotSupported = 2,

  /**
   * *
   * Module loaded by module server does not recognize given device type
   **/
  DeviceConnectResponse_ResponseType_DeviceNotSupported = 3,

  /**
   * *
   * Device of the same deviceType with higher priority is already connected
   **/
  DeviceConnectResponse_ResponseType_HigherPriorityAlreadyConnected = 4,
};

GPBEnumDescriptor *DeviceConnectResponse_ResponseType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DeviceConnectResponse_ResponseType_IsValidValue(int32_t value);

#pragma mark - Enum Device_Module

/**
 *
 * Enum for specification to which module the messages should be forwarded by internal server.
 * Must mirror the enum number in InternalProtocol.proto
 * RESERVED_MODULE is default module taking control of unspecified messages.
 **/
typedef GPB_ENUM(Device_Module) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Device_Module_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /**
   * *
   * This is reserved place for a control module, which is default for devices that didn't set correct module
   * It may serve for messages that are not aggregated. TODO will be implemented
   **/
  Device_Module_ReservedModule = 0,

  /** Sending missions with the information about the route and stops to the autonomy */
  Device_Module_MissionModule = 1,

  /** Control of car accessories */
  Device_Module_CarAccessoryModule = 2,
  Device_Module_ExampleModule = 999,
};

GPBEnumDescriptor *Device_Module_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Device_Module_IsValidValue(int32_t value);

#pragma mark - InternalProtocolRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface InternalProtocolRoot : GPBRootObject
@end

#pragma mark - DeviceConnect

typedef GPB_ENUM(DeviceConnect_FieldNumber) {
  DeviceConnect_FieldNumber_Device = 1,
  DeviceConnect_FieldNumber_Priority = 2,
};

/**
 * *
 * Device connect information.
 * Device connect message is used for establishing connection from module client to module server
 * send as first message from module client to module server
 **/
GPB_FINAL @interface DeviceConnect : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Device *device;
/** Test to see if @c device has been set. */
@property(nonatomic, readwrite) BOOL hasDevice;

/**
 *
 * Priority of the device. Max priority = 0
 **/
@property(nonatomic, readwrite) uint32_t priority;

@end

#pragma mark - DeviceConnectResponse

typedef GPB_ENUM(DeviceConnectResponse_FieldNumber) {
  DeviceConnectResponse_FieldNumber_ResponseType = 1,
};

/**
 * *
 * Device connect response information.
 * Device connect response message is used for establishing connection from module client to module server
 * send as response to deviceConnect message from module server to module client
 **/
GPB_FINAL @interface DeviceConnectResponse : GPBMessage

@property(nonatomic, readwrite) DeviceConnectResponse_ResponseType responseType;

@end

/**
 * Fetches the raw value of a @c DeviceConnectResponse's @c responseType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DeviceConnectResponse_ResponseType_RawValue(DeviceConnectResponse *message);
/**
 * Sets the raw value of an @c DeviceConnectResponse's @c responseType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDeviceConnectResponse_ResponseType_RawValue(DeviceConnectResponse *message, int32_t value);

#pragma mark - DeviceStatus

typedef GPB_ENUM(DeviceStatus_FieldNumber) {
  DeviceStatus_FieldNumber_Device = 1,
  DeviceStatus_FieldNumber_StatusData = 2,
};

GPB_FINAL @interface DeviceStatus : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Device *device;
/** Test to see if @c device has been set. */
@property(nonatomic, readwrite) BOOL hasDevice;

@property(nonatomic, readwrite, copy, null_resettable) NSData *statusData;

@end

#pragma mark - DeviceCommand

typedef GPB_ENUM(DeviceCommand_FieldNumber) {
  DeviceCommand_FieldNumber_CommandData = 1,
};

/**
 *
 * binary command data
 **/
GPB_FINAL @interface DeviceCommand : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSData *commandData;

@end

#pragma mark - Device

typedef GPB_ENUM(Device_FieldNumber) {
  Device_FieldNumber_Module = 1,
  Device_FieldNumber_DeviceType = 2,
  Device_FieldNumber_DeviceRole = 3,
  Device_FieldNumber_DeviceName = 4,
};

/**
 *
 * Identification of a device. Only devices with unique module-deviceType-dataProvider combination can be connected.
 **/
GPB_FINAL @interface Device : GPBMessage

/**
 * *
 * Serves for internal client to forward message to the correct module.
 **/
@property(nonatomic, readwrite) Device_Module module;

/**
 *
 * Device type is module implementation dependent, it is recommended to implement as enumeration.
 **/
@property(nonatomic, readwrite) uint32_t deviceType;

/**
 * *
 * name of role that the device provides, serves for distinction of devices
 * important in device connection, where only single device of a deviceRole type can be connected to a module.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceRole;

/**
 *
 * device name
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceName;

@end

/**
 * Fetches the raw value of a @c Device's @c module property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Device_Module_RawValue(Device *message);
/**
 * Sets the raw value of an @c Device's @c module property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDevice_Module_RawValue(Device *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
