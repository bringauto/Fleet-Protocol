// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ExampleModule.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "modules/ExampleModule.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ExampleModuleRoot

@implementation ExampleModuleRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ExampleModuleRoot_FileDescriptor

static GPBFileDescriptor *ExampleModuleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ExampleModule"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BlinkerStatus

@implementation BlinkerStatus

@dynamic isFlashing;

typedef struct BlinkerStatus__storage_ {
  uint32_t _has_storage_[1];
} BlinkerStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isFlashing",
        .dataTypeSpecific.clazz = Nil,
        .number = BlinkerStatus_FieldNumber_IsFlashing,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlinkerStatus class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlinkerStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LightsStatus

@implementation LightsStatus

@dynamic isOn;

typedef struct LightsStatus__storage_ {
  uint32_t _has_storage_[1];
} LightsStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isOn",
        .dataTypeSpecific.clazz = Nil,
        .number = LightsStatus_FieldNumber_IsOn,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LightsStatus class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightsStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlinkerCommand

@implementation BlinkerCommand

@dynamic command;

typedef struct BlinkerCommand__storage_ {
  uint32_t _has_storage_[1];
  BlinkerCommand_Command command;
} BlinkerCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = BlinkerCommand_Command_EnumDescriptor,
        .number = BlinkerCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlinkerCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlinkerCommand class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlinkerCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BlinkerCommand_Command_RawValue(BlinkerCommand *message) {
  GPBDescriptor *descriptor = [BlinkerCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BlinkerCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetBlinkerCommand_Command_RawValue(BlinkerCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [BlinkerCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BlinkerCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum BlinkerCommand_Command

GPBEnumDescriptor *BlinkerCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TurnOn\000TurnOff\000";
    static const int32_t values[] = {
        BlinkerCommand_Command_TurnOn,
        BlinkerCommand_Command_TurnOff,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BlinkerCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BlinkerCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BlinkerCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case BlinkerCommand_Command_TurnOn:
    case BlinkerCommand_Command_TurnOff:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - LightsCommand

@implementation LightsCommand

@dynamic command;

typedef struct LightsCommand__storage_ {
  uint32_t _has_storage_[1];
  LightsCommand_Command command;
} LightsCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = LightsCommand_Command_EnumDescriptor,
        .number = LightsCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LightsCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LightsCommand class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightsCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t LightsCommand_Command_RawValue(LightsCommand *message) {
  GPBDescriptor *descriptor = [LightsCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightsCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetLightsCommand_Command_RawValue(LightsCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [LightsCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:LightsCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum LightsCommand_Command

GPBEnumDescriptor *LightsCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Press\000";
    static const int32_t values[] = {
        LightsCommand_Command_Press,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LightsCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LightsCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LightsCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case LightsCommand_Command_Press:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BlinkerError

@implementation BlinkerError

@dynamic errorMessage;

typedef struct BlinkerError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} BlinkerError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = BlinkerError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlinkerError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlinkerError class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlinkerError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LightsError

@implementation LightsError

@dynamic errorMessage;

typedef struct LightsError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} LightsError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = LightsError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LightsError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LightsError class]
                                     rootClass:[ExampleModuleRoot class]
                                          file:ExampleModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LightsError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
