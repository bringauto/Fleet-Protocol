// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ActionModule.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "modules/ActionModule.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ActionModuleRoot

@implementation ActionModuleRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ActionModuleRoot_FileDescriptor

static GPBFileDescriptor *ActionModuleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ActionModule"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SystemLoggerStatus

@implementation SystemLoggerStatus

@dynamic sourceDevice;
@dynamic logsArray, logsArray_Count;
@dynamic verbosity;

typedef struct SystemLoggerStatus__storage_ {
  uint32_t _has_storage_[1];
  SystemLoggerStatus_Verbosity verbosity;
  NSString *sourceDevice;
  NSMutableArray *logsArray;
} SystemLoggerStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceDevice",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemLoggerStatus_FieldNumber_SourceDevice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLoggerStatus__storage_, sourceDevice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemLoggerStatus_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemLoggerStatus__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verbosity",
        .dataTypeSpecific.enumDescFunc = SystemLoggerStatus_Verbosity_EnumDescriptor,
        .number = SystemLoggerStatus_FieldNumber_Verbosity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemLoggerStatus__storage_, verbosity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLoggerStatus class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLoggerStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemLoggerStatus_Verbosity_RawValue(SystemLoggerStatus *message) {
  GPBDescriptor *descriptor = [SystemLoggerStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLoggerStatus_FieldNumber_Verbosity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSystemLoggerStatus_Verbosity_RawValue(SystemLoggerStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemLoggerStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLoggerStatus_FieldNumber_Verbosity];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SystemLoggerStatus_Verbosity

GPBEnumDescriptor *SystemLoggerStatus_Verbosity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Debug\000Info\000Warning\000Error\000";
    static const int32_t values[] = {
        SystemLoggerStatus_Verbosity_Debug,
        SystemLoggerStatus_Verbosity_Info,
        SystemLoggerStatus_Verbosity_Warning,
        SystemLoggerStatus_Verbosity_Error,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SystemLoggerStatus_Verbosity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SystemLoggerStatus_Verbosity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SystemLoggerStatus_Verbosity_IsValidValue(int32_t value__) {
  switch (value__) {
    case SystemLoggerStatus_Verbosity_Debug:
    case SystemLoggerStatus_Verbosity_Info:
    case SystemLoggerStatus_Verbosity_Warning:
    case SystemLoggerStatus_Verbosity_Error:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GreenButtonStatus

@implementation GreenButtonStatus

@dynamic isPressed;
@dynamic isAlive;

typedef struct GreenButtonStatus__storage_ {
  uint32_t _has_storage_[1];
} GreenButtonStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isPressed",
        .dataTypeSpecific.clazz = Nil,
        .number = GreenButtonStatus_FieldNumber_IsPressed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = GreenButtonStatus_FieldNumber_IsAlive,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GreenButtonStatus class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GreenButtonStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedButtonStatus

@implementation RedButtonStatus

@dynamic isPressed;

typedef struct RedButtonStatus__storage_ {
  uint32_t _has_storage_[1];
} RedButtonStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isPressed",
        .dataTypeSpecific.clazz = Nil,
        .number = RedButtonStatus_FieldNumber_IsPressed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedButtonStatus class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedButtonStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WatchdogStatus

@implementation WatchdogStatus

@dynamic isAlive;
@dynamic state;

typedef struct WatchdogStatus__storage_ {
  uint32_t _has_storage_[1];
  NSString *state;
} WatchdogStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isAlive",
        .dataTypeSpecific.clazz = Nil,
        .number = WatchdogStatus_FieldNumber_IsAlive,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = WatchdogStatus_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WatchdogStatus__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WatchdogStatus class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WatchdogStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemLoggerCommand

@implementation SystemLoggerCommand

@dynamic command;

typedef struct SystemLoggerCommand__storage_ {
  uint32_t _has_storage_[1];
  SystemLoggerCommand_Command command;
} SystemLoggerCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = SystemLoggerCommand_Command_EnumDescriptor,
        .number = SystemLoggerCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLoggerCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLoggerCommand class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLoggerCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SystemLoggerCommand_Command_RawValue(SystemLoggerCommand *message) {
  GPBDescriptor *descriptor = [SystemLoggerCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLoggerCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSystemLoggerCommand_Command_RawValue(SystemLoggerCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [SystemLoggerCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SystemLoggerCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum SystemLoggerCommand_Command

GPBEnumDescriptor *SystemLoggerCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Log\000";
    static const int32_t values[] = {
        SystemLoggerCommand_Command_Log,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SystemLoggerCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SystemLoggerCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SystemLoggerCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case SystemLoggerCommand_Command_Log:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GreenButtonCommand

@implementation GreenButtonCommand

@dynamic command;

typedef struct GreenButtonCommand__storage_ {
  uint32_t _has_storage_[1];
  GreenButtonCommand_Command command;
} GreenButtonCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = GreenButtonCommand_Command_EnumDescriptor,
        .number = GreenButtonCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GreenButtonCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GreenButtonCommand class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GreenButtonCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GreenButtonCommand_Command_RawValue(GreenButtonCommand *message) {
  GPBDescriptor *descriptor = [GreenButtonCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GreenButtonCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetGreenButtonCommand_Command_RawValue(GreenButtonCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [GreenButtonCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GreenButtonCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum GreenButtonCommand_Command

GPBEnumDescriptor *GreenButtonCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Press\000";
    static const int32_t values[] = {
        GreenButtonCommand_Command_Press,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GreenButtonCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GreenButtonCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GreenButtonCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case GreenButtonCommand_Command_Press:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RedButtonCommand

@implementation RedButtonCommand

@dynamic command;

typedef struct RedButtonCommand__storage_ {
  uint32_t _has_storage_[1];
  RedButtonCommand_Command command;
} RedButtonCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = RedButtonCommand_Command_EnumDescriptor,
        .number = RedButtonCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedButtonCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedButtonCommand class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedButtonCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RedButtonCommand_Command_RawValue(RedButtonCommand *message) {
  GPBDescriptor *descriptor = [RedButtonCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedButtonCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRedButtonCommand_Command_RawValue(RedButtonCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [RedButtonCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RedButtonCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum RedButtonCommand_Command

GPBEnumDescriptor *RedButtonCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Press\000";
    static const int32_t values[] = {
        RedButtonCommand_Command_Press,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RedButtonCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RedButtonCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RedButtonCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case RedButtonCommand_Command_Press:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WatchdogCommand

@implementation WatchdogCommand

@dynamic command;

typedef struct WatchdogCommand__storage_ {
  uint32_t _has_storage_[1];
  WatchdogCommand_Command command;
} WatchdogCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = WatchdogCommand_Command_EnumDescriptor,
        .number = WatchdogCommand_FieldNumber_Command,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WatchdogCommand__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WatchdogCommand class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WatchdogCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WatchdogCommand_Command_RawValue(WatchdogCommand *message) {
  GPBDescriptor *descriptor = [WatchdogCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WatchdogCommand_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWatchdogCommand_Command_RawValue(WatchdogCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [WatchdogCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WatchdogCommand_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum WatchdogCommand_Command

GPBEnumDescriptor *WatchdogCommand_Command_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Reset\000";
    static const int32_t values[] = {
        WatchdogCommand_Command_Reset,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WatchdogCommand_Command)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WatchdogCommand_Command_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WatchdogCommand_Command_IsValidValue(int32_t value__) {
  switch (value__) {
    case WatchdogCommand_Command_Reset:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SystemLoggerError

@implementation SystemLoggerError

@dynamic errorMessage;

typedef struct SystemLoggerError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} SystemLoggerError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemLoggerError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemLoggerError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SystemLoggerError class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemLoggerError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GreenButtonError

@implementation GreenButtonError

@dynamic errorMessage;

typedef struct GreenButtonError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} GreenButtonError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = GreenButtonError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GreenButtonError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GreenButtonError class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GreenButtonError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RedButtonError

@implementation RedButtonError

@dynamic errorMessage;

typedef struct RedButtonError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} RedButtonError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = RedButtonError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RedButtonError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RedButtonError class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RedButtonError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WatchdogError

@implementation WatchdogError

@dynamic errorMessage;

typedef struct WatchdogError__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMessage;
} WatchdogError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMessage",
        .dataTypeSpecific.clazz = Nil,
        .number = WatchdogError_FieldNumber_ErrorMessage,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WatchdogError__storage_, errorMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WatchdogError class]
                                     rootClass:[ActionModuleRoot class]
                                          file:ActionModuleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WatchdogError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
