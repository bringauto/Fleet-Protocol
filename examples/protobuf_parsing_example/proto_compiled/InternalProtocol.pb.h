// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InternalProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InternalProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InternalProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InternalProtocol_2eproto;
namespace InternalProtocol {
class deviceConnect;
struct deviceConnectDefaultTypeInternal;
extern deviceConnectDefaultTypeInternal _deviceConnect_default_instance_;
class deviceConnectResponse;
struct deviceConnectResponseDefaultTypeInternal;
extern deviceConnectResponseDefaultTypeInternal _deviceConnectResponse_default_instance_;
}  // namespace InternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::InternalProtocol::deviceConnect* Arena::CreateMaybeMessage<::InternalProtocol::deviceConnect>(Arena*);
template<> ::InternalProtocol::deviceConnectResponse* Arena::CreateMaybeMessage<::InternalProtocol::deviceConnectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InternalProtocol {

enum deviceConnect_Module : int {
  deviceConnect_Module_RESERVED_MODULE = 0,
  deviceConnect_Module_MISSION_MODULE = 1,
  deviceConnect_Module_CAR_ACCESSORY_MODULE = 2,
  deviceConnect_Module_deviceConnect_Module_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  deviceConnect_Module_deviceConnect_Module_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool deviceConnect_Module_IsValid(int value);
constexpr deviceConnect_Module deviceConnect_Module_Module_MIN = deviceConnect_Module_RESERVED_MODULE;
constexpr deviceConnect_Module deviceConnect_Module_Module_MAX = deviceConnect_Module_CAR_ACCESSORY_MODULE;
constexpr int deviceConnect_Module_Module_ARRAYSIZE = deviceConnect_Module_Module_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* deviceConnect_Module_descriptor();
template<typename T>
inline const std::string& deviceConnect_Module_Name(T enum_t_value) {
  static_assert(::std::is_same<T, deviceConnect_Module>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function deviceConnect_Module_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    deviceConnect_Module_descriptor(), enum_t_value);
}
inline bool deviceConnect_Module_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, deviceConnect_Module* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<deviceConnect_Module>(
    deviceConnect_Module_descriptor(), name, value);
}
enum deviceConnectResponse_ResponseType : int {
  deviceConnectResponse_ResponseType_OK = 0,
  deviceConnectResponse_ResponseType_ALREADY_CONNECTED = 1,
  deviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED = 2,
  deviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED = 3,
  deviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED = 4,
  deviceConnectResponse_ResponseType_deviceConnectResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  deviceConnectResponse_ResponseType_deviceConnectResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool deviceConnectResponse_ResponseType_IsValid(int value);
constexpr deviceConnectResponse_ResponseType deviceConnectResponse_ResponseType_ResponseType_MIN = deviceConnectResponse_ResponseType_OK;
constexpr deviceConnectResponse_ResponseType deviceConnectResponse_ResponseType_ResponseType_MAX = deviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
constexpr int deviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE = deviceConnectResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* deviceConnectResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& deviceConnectResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, deviceConnectResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function deviceConnectResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    deviceConnectResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool deviceConnectResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, deviceConnectResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<deviceConnectResponse_ResponseType>(
    deviceConnectResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class deviceConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.deviceConnect) */ {
 public:
  inline deviceConnect() : deviceConnect(nullptr) {}
  ~deviceConnect() override;
  explicit constexpr deviceConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deviceConnect(const deviceConnect& from);
  deviceConnect(deviceConnect&& from) noexcept
    : deviceConnect() {
    *this = ::std::move(from);
  }

  inline deviceConnect& operator=(const deviceConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline deviceConnect& operator=(deviceConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deviceConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const deviceConnect* internal_default_instance() {
    return reinterpret_cast<const deviceConnect*>(
               &_deviceConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(deviceConnect& a, deviceConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(deviceConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deviceConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deviceConnect* New() const final {
    return new deviceConnect();
  }

  deviceConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deviceConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deviceConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deviceConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deviceConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.deviceConnect";
  }
  protected:
  explicit deviceConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef deviceConnect_Module Module;
  static constexpr Module RESERVED_MODULE =
    deviceConnect_Module_RESERVED_MODULE;
  static constexpr Module MISSION_MODULE =
    deviceConnect_Module_MISSION_MODULE;
  static constexpr Module CAR_ACCESSORY_MODULE =
    deviceConnect_Module_CAR_ACCESSORY_MODULE;
  static inline bool Module_IsValid(int value) {
    return deviceConnect_Module_IsValid(value);
  }
  static constexpr Module Module_MIN =
    deviceConnect_Module_Module_MIN;
  static constexpr Module Module_MAX =
    deviceConnect_Module_Module_MAX;
  static constexpr int Module_ARRAYSIZE =
    deviceConnect_Module_Module_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Module_descriptor() {
    return deviceConnect_Module_descriptor();
  }
  template<typename T>
  static inline const std::string& Module_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Module>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Module_Name.");
    return deviceConnect_Module_Name(enum_t_value);
  }
  static inline bool Module_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Module* value) {
    return deviceConnect_Module_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kModuleFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kPriorityFieldNumber = 4,
  };
  // string deviceName = 3;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_MUST_USE_RESULT std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // .InternalProtocol.deviceConnect.Module module = 1;
  void clear_module();
  ::InternalProtocol::deviceConnect_Module module() const;
  void set_module(::InternalProtocol::deviceConnect_Module value);
  private:
  ::InternalProtocol::deviceConnect_Module _internal_module() const;
  void _internal_set_module(::InternalProtocol::deviceConnect_Module value);
  public:

  // int32 deviceType = 2;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.deviceConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  int module_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class deviceConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.deviceConnectResponse) */ {
 public:
  inline deviceConnectResponse() : deviceConnectResponse(nullptr) {}
  ~deviceConnectResponse() override;
  explicit constexpr deviceConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deviceConnectResponse(const deviceConnectResponse& from);
  deviceConnectResponse(deviceConnectResponse&& from) noexcept
    : deviceConnectResponse() {
    *this = ::std::move(from);
  }

  inline deviceConnectResponse& operator=(const deviceConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deviceConnectResponse& operator=(deviceConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deviceConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deviceConnectResponse* internal_default_instance() {
    return reinterpret_cast<const deviceConnectResponse*>(
               &_deviceConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(deviceConnectResponse& a, deviceConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deviceConnectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deviceConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deviceConnectResponse* New() const final {
    return new deviceConnectResponse();
  }

  deviceConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deviceConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deviceConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deviceConnectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deviceConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.deviceConnectResponse";
  }
  protected:
  explicit deviceConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef deviceConnectResponse_ResponseType ResponseType;
  static constexpr ResponseType OK =
    deviceConnectResponse_ResponseType_OK;
  static constexpr ResponseType ALREADY_CONNECTED =
    deviceConnectResponse_ResponseType_ALREADY_CONNECTED;
  static constexpr ResponseType MODULE_NOT_SUPPORTED =
    deviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED;
  static constexpr ResponseType DEVICE_NOT_SUPPORTED =
    deviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED;
  static constexpr ResponseType HIGHER_PRIORITY_ALREADY_CONNECTED =
    deviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
  static inline bool ResponseType_IsValid(int value) {
    return deviceConnectResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    deviceConnectResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    deviceConnectResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    deviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return deviceConnectResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return deviceConnectResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return deviceConnectResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTypeFieldNumber = 1,
  };
  // .InternalProtocol.deviceConnectResponse.ResponseType responseType = 1;
  void clear_responsetype();
  ::InternalProtocol::deviceConnectResponse_ResponseType responsetype() const;
  void set_responsetype(::InternalProtocol::deviceConnectResponse_ResponseType value);
  private:
  ::InternalProtocol::deviceConnectResponse_ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::InternalProtocol::deviceConnectResponse_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.deviceConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int responsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// deviceConnect

// .InternalProtocol.deviceConnect.Module module = 1;
inline void deviceConnect::clear_module() {
  module_ = 0;
}
inline ::InternalProtocol::deviceConnect_Module deviceConnect::_internal_module() const {
  return static_cast< ::InternalProtocol::deviceConnect_Module >(module_);
}
inline ::InternalProtocol::deviceConnect_Module deviceConnect::module() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.deviceConnect.module)
  return _internal_module();
}
inline void deviceConnect::_internal_set_module(::InternalProtocol::deviceConnect_Module value) {
  
  module_ = value;
}
inline void deviceConnect::set_module(::InternalProtocol::deviceConnect_Module value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.deviceConnect.module)
}

// int32 deviceType = 2;
inline void deviceConnect::clear_devicetype() {
  devicetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 deviceConnect::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 deviceConnect::devicetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.deviceConnect.deviceType)
  return _internal_devicetype();
}
inline void deviceConnect::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devicetype_ = value;
}
inline void deviceConnect::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.deviceConnect.deviceType)
}

// string deviceName = 3;
inline void deviceConnect::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& deviceConnect::devicename() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.deviceConnect.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deviceConnect::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.deviceConnect.deviceName)
}
inline std::string* deviceConnect::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.deviceConnect.deviceName)
  return _s;
}
inline const std::string& deviceConnect::_internal_devicename() const {
  return devicename_.Get();
}
inline void deviceConnect::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deviceConnect::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deviceConnect::release_devicename() {
  // @@protoc_insertion_point(field_release:InternalProtocol.deviceConnect.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deviceConnect::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.deviceConnect.deviceName)
}

// int32 priority = 4;
inline void deviceConnect::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 deviceConnect::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 deviceConnect::priority() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.deviceConnect.priority)
  return _internal_priority();
}
inline void deviceConnect::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void deviceConnect::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.deviceConnect.priority)
}

// -------------------------------------------------------------------

// deviceConnectResponse

// .InternalProtocol.deviceConnectResponse.ResponseType responseType = 1;
inline void deviceConnectResponse::clear_responsetype() {
  responsetype_ = 0;
}
inline ::InternalProtocol::deviceConnectResponse_ResponseType deviceConnectResponse::_internal_responsetype() const {
  return static_cast< ::InternalProtocol::deviceConnectResponse_ResponseType >(responsetype_);
}
inline ::InternalProtocol::deviceConnectResponse_ResponseType deviceConnectResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.deviceConnectResponse.responseType)
  return _internal_responsetype();
}
inline void deviceConnectResponse::_internal_set_responsetype(::InternalProtocol::deviceConnectResponse_ResponseType value) {
  
  responsetype_ = value;
}
inline void deviceConnectResponse::set_responsetype(::InternalProtocol::deviceConnectResponse_ResponseType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.deviceConnectResponse.responseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InternalProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::InternalProtocol::deviceConnect_Module> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::deviceConnect_Module>() {
  return ::InternalProtocol::deviceConnect_Module_descriptor();
}
template <> struct is_proto_enum< ::InternalProtocol::deviceConnectResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::deviceConnectResponse_ResponseType>() {
  return ::InternalProtocol::deviceConnectResponse_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
