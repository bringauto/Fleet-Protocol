// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InternalProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InternalProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InternalProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InternalProtocol_2eproto;
namespace InternalProtocol {
class DeviceConnect;
struct DeviceConnectDefaultTypeInternal;
extern DeviceConnectDefaultTypeInternal _DeviceConnect_default_instance_;
class DeviceConnectResponse;
struct DeviceConnectResponseDefaultTypeInternal;
extern DeviceConnectResponseDefaultTypeInternal _DeviceConnectResponse_default_instance_;
}  // namespace InternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::InternalProtocol::DeviceConnect* Arena::CreateMaybeMessage<::InternalProtocol::DeviceConnect>(Arena*);
template<> ::InternalProtocol::DeviceConnectResponse* Arena::CreateMaybeMessage<::InternalProtocol::DeviceConnectResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace InternalProtocol {

enum DeviceConnect_Module : int {
  DeviceConnect_Module_RESERVED_MODULE = 0,
  DeviceConnect_Module_MISSION_MODULE = 1,
  DeviceConnect_Module_CAR_ACCESSORY_MODULE = 2,
  DeviceConnect_Module_DeviceConnect_Module_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceConnect_Module_DeviceConnect_Module_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceConnect_Module_IsValid(int value);
constexpr DeviceConnect_Module DeviceConnect_Module_Module_MIN = DeviceConnect_Module_RESERVED_MODULE;
constexpr DeviceConnect_Module DeviceConnect_Module_Module_MAX = DeviceConnect_Module_CAR_ACCESSORY_MODULE;
constexpr int DeviceConnect_Module_Module_ARRAYSIZE = DeviceConnect_Module_Module_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceConnect_Module_descriptor();
template<typename T>
inline const std::string& DeviceConnect_Module_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceConnect_Module>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceConnect_Module_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceConnect_Module_descriptor(), enum_t_value);
}
inline bool DeviceConnect_Module_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceConnect_Module* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceConnect_Module>(
    DeviceConnect_Module_descriptor(), name, value);
}
enum DeviceConnectResponse_ResponseType : int {
  DeviceConnectResponse_ResponseType_OK = 0,
  DeviceConnectResponse_ResponseType_ALREADY_CONNECTED = 1,
  DeviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED = 2,
  DeviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED = 3,
  DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED = 4,
  DeviceConnectResponse_ResponseType_DeviceConnectResponse_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceConnectResponse_ResponseType_DeviceConnectResponse_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceConnectResponse_ResponseType_IsValid(int value);
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse_ResponseType_ResponseType_MIN = DeviceConnectResponse_ResponseType_OK;
constexpr DeviceConnectResponse_ResponseType DeviceConnectResponse_ResponseType_ResponseType_MAX = DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
constexpr int DeviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE = DeviceConnectResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceConnectResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& DeviceConnectResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceConnectResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceConnectResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceConnectResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool DeviceConnectResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceConnectResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceConnectResponse_ResponseType>(
    DeviceConnectResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class DeviceConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceConnect) */ {
 public:
  inline DeviceConnect() : DeviceConnect(nullptr) {}
  ~DeviceConnect() override;
  explicit constexpr DeviceConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConnect(const DeviceConnect& from);
  DeviceConnect(DeviceConnect&& from) noexcept
    : DeviceConnect() {
    *this = ::std::move(from);
  }

  inline DeviceConnect& operator=(const DeviceConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConnect& operator=(DeviceConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConnect* internal_default_instance() {
    return reinterpret_cast<const DeviceConnect*>(
               &_DeviceConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceConnect& a, DeviceConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConnect* New() const final {
    return new DeviceConnect();
  }

  DeviceConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceConnect";
  }
  protected:
  explicit DeviceConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceConnect_Module Module;
  static constexpr Module RESERVED_MODULE =
    DeviceConnect_Module_RESERVED_MODULE;
  static constexpr Module MISSION_MODULE =
    DeviceConnect_Module_MISSION_MODULE;
  static constexpr Module CAR_ACCESSORY_MODULE =
    DeviceConnect_Module_CAR_ACCESSORY_MODULE;
  static inline bool Module_IsValid(int value) {
    return DeviceConnect_Module_IsValid(value);
  }
  static constexpr Module Module_MIN =
    DeviceConnect_Module_Module_MIN;
  static constexpr Module Module_MAX =
    DeviceConnect_Module_Module_MAX;
  static constexpr int Module_ARRAYSIZE =
    DeviceConnect_Module_Module_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Module_descriptor() {
    return DeviceConnect_Module_descriptor();
  }
  template<typename T>
  static inline const std::string& Module_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Module>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Module_Name.");
    return DeviceConnect_Module_Name(enum_t_value);
  }
  static inline bool Module_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Module* value) {
    return DeviceConnect_Module_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kModuleFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
    kPriorityFieldNumber = 4,
  };
  // string deviceName = 3;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_MUST_USE_RESULT std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // .InternalProtocol.DeviceConnect.Module module = 1;
  void clear_module();
  ::InternalProtocol::DeviceConnect_Module module() const;
  void set_module(::InternalProtocol::DeviceConnect_Module value);
  private:
  ::InternalProtocol::DeviceConnect_Module _internal_module() const;
  void _internal_set_module(::InternalProtocol::DeviceConnect_Module value);
  public:

  // uint32 deviceType = 2;
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 priority = 4;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  int module_;
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class DeviceConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InternalProtocol.DeviceConnectResponse) */ {
 public:
  inline DeviceConnectResponse() : DeviceConnectResponse(nullptr) {}
  ~DeviceConnectResponse() override;
  explicit constexpr DeviceConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceConnectResponse(const DeviceConnectResponse& from);
  DeviceConnectResponse(DeviceConnectResponse&& from) noexcept
    : DeviceConnectResponse() {
    *this = ::std::move(from);
  }

  inline DeviceConnectResponse& operator=(const DeviceConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConnectResponse& operator=(DeviceConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceConnectResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceConnectResponse*>(
               &_DeviceConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceConnectResponse& a, DeviceConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConnectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConnectResponse* New() const final {
    return new DeviceConnectResponse();
  }

  DeviceConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceConnectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InternalProtocol.DeviceConnectResponse";
  }
  protected:
  explicit DeviceConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DeviceConnectResponse_ResponseType ResponseType;
  static constexpr ResponseType OK =
    DeviceConnectResponse_ResponseType_OK;
  static constexpr ResponseType ALREADY_CONNECTED =
    DeviceConnectResponse_ResponseType_ALREADY_CONNECTED;
  static constexpr ResponseType MODULE_NOT_SUPPORTED =
    DeviceConnectResponse_ResponseType_MODULE_NOT_SUPPORTED;
  static constexpr ResponseType DEVICE_NOT_SUPPORTED =
    DeviceConnectResponse_ResponseType_DEVICE_NOT_SUPPORTED;
  static constexpr ResponseType HIGHER_PRIORITY_ALREADY_CONNECTED =
    DeviceConnectResponse_ResponseType_HIGHER_PRIORITY_ALREADY_CONNECTED;
  static inline bool ResponseType_IsValid(int value) {
    return DeviceConnectResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    DeviceConnectResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    DeviceConnectResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    DeviceConnectResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return DeviceConnectResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return DeviceConnectResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return DeviceConnectResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseTypeFieldNumber = 1,
  };
  // .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
  void clear_responsetype();
  ::InternalProtocol::DeviceConnectResponse_ResponseType responsetype() const;
  void set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value);
  private:
  ::InternalProtocol::DeviceConnectResponse_ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:InternalProtocol.DeviceConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int responsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_InternalProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceConnect

// .InternalProtocol.DeviceConnect.Module module = 1;
inline void DeviceConnect::clear_module() {
  module_ = 0;
}
inline ::InternalProtocol::DeviceConnect_Module DeviceConnect::_internal_module() const {
  return static_cast< ::InternalProtocol::DeviceConnect_Module >(module_);
}
inline ::InternalProtocol::DeviceConnect_Module DeviceConnect::module() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnect.module)
  return _internal_module();
}
inline void DeviceConnect::_internal_set_module(::InternalProtocol::DeviceConnect_Module value) {
  
  module_ = value;
}
inline void DeviceConnect::set_module(::InternalProtocol::DeviceConnect_Module value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnect.module)
}

// uint32 deviceType = 2;
inline void DeviceConnect::clear_devicetype() {
  devicetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConnect::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceConnect::devicetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnect.deviceType)
  return _internal_devicetype();
}
inline void DeviceConnect::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  devicetype_ = value;
}
inline void DeviceConnect::set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnect.deviceType)
}

// string deviceName = 3;
inline void DeviceConnect::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& DeviceConnect::devicename() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnect.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceConnect::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnect.deviceName)
}
inline std::string* DeviceConnect::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:InternalProtocol.DeviceConnect.deviceName)
  return _s;
}
inline const std::string& DeviceConnect::_internal_devicename() const {
  return devicename_.Get();
}
inline void DeviceConnect::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceConnect::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceConnect::release_devicename() {
  // @@protoc_insertion_point(field_release:InternalProtocol.DeviceConnect.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceConnect::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:InternalProtocol.DeviceConnect.deviceName)
}

// int32 priority = 4;
inline void DeviceConnect::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceConnect::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceConnect::priority() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnect.priority)
  return _internal_priority();
}
inline void DeviceConnect::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void DeviceConnect::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnect.priority)
}

// -------------------------------------------------------------------

// DeviceConnectResponse

// .InternalProtocol.DeviceConnectResponse.ResponseType responseType = 1;
inline void DeviceConnectResponse::clear_responsetype() {
  responsetype_ = 0;
}
inline ::InternalProtocol::DeviceConnectResponse_ResponseType DeviceConnectResponse::_internal_responsetype() const {
  return static_cast< ::InternalProtocol::DeviceConnectResponse_ResponseType >(responsetype_);
}
inline ::InternalProtocol::DeviceConnectResponse_ResponseType DeviceConnectResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:InternalProtocol.DeviceConnectResponse.responseType)
  return _internal_responsetype();
}
inline void DeviceConnectResponse::_internal_set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value) {
  
  responsetype_ = value;
}
inline void DeviceConnectResponse::set_responsetype(::InternalProtocol::DeviceConnectResponse_ResponseType value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:InternalProtocol.DeviceConnectResponse.responseType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace InternalProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::InternalProtocol::DeviceConnect_Module> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::DeviceConnect_Module>() {
  return ::InternalProtocol::DeviceConnect_Module_descriptor();
}
template <> struct is_proto_enum< ::InternalProtocol::DeviceConnectResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InternalProtocol::DeviceConnectResponse_ResponseType>() {
  return ::InternalProtocol::DeviceConnectResponse_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InternalProtocol_2eproto
