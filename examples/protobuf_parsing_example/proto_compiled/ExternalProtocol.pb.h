// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExternalProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/MissionModule.pb.h"
#include "modules/CarAccessoryModule.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ExternalProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ExternalProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ExternalProtocol_2eproto;
namespace ExternalProtocol {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class Connect;
struct ConnectDefaultTypeInternal;
extern ConnectDefaultTypeInternal _Connect_default_instance_;
class ConnectResponse;
struct ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class ExternalClient;
struct ExternalClientDefaultTypeInternal;
extern ExternalClientDefaultTypeInternal _ExternalClient_default_instance_;
class ExternalServer;
struct ExternalServerDefaultTypeInternal;
extern ExternalServerDefaultTypeInternal _ExternalServer_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace ExternalProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::ExternalProtocol::Command* Arena::CreateMaybeMessage<::ExternalProtocol::Command>(Arena*);
template<> ::ExternalProtocol::CommandResponse* Arena::CreateMaybeMessage<::ExternalProtocol::CommandResponse>(Arena*);
template<> ::ExternalProtocol::Connect* Arena::CreateMaybeMessage<::ExternalProtocol::Connect>(Arena*);
template<> ::ExternalProtocol::ConnectResponse* Arena::CreateMaybeMessage<::ExternalProtocol::ConnectResponse>(Arena*);
template<> ::ExternalProtocol::ExternalClient* Arena::CreateMaybeMessage<::ExternalProtocol::ExternalClient>(Arena*);
template<> ::ExternalProtocol::ExternalServer* Arena::CreateMaybeMessage<::ExternalProtocol::ExternalServer>(Arena*);
template<> ::ExternalProtocol::Status* Arena::CreateMaybeMessage<::ExternalProtocol::Status>(Arena*);
template<> ::ExternalProtocol::StatusResponse* Arena::CreateMaybeMessage<::ExternalProtocol::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ExternalProtocol {

enum ConnectResponse_Type : int {
  ConnectResponse_Type_OK = 0,
  ConnectResponse_Type_ALREADY_LOGGED = 1,
  ConnectResponse_Type_ConnectResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectResponse_Type_ConnectResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectResponse_Type_IsValid(int value);
constexpr ConnectResponse_Type ConnectResponse_Type_Type_MIN = ConnectResponse_Type_OK;
constexpr ConnectResponse_Type ConnectResponse_Type_Type_MAX = ConnectResponse_Type_ALREADY_LOGGED;
constexpr int ConnectResponse_Type_Type_ARRAYSIZE = ConnectResponse_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectResponse_Type_descriptor();
template<typename T>
inline const std::string& ConnectResponse_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectResponse_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectResponse_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectResponse_Type_descriptor(), enum_t_value);
}
inline bool ConnectResponse_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectResponse_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectResponse_Type>(
    ConnectResponse_Type_descriptor(), name, value);
}
enum Status_DeviceState : int {
  Status_DeviceState_CONNECTING = 0,
  Status_DeviceState_RUNNING = 1,
  Status_DeviceState_ERROR = 2,
  Status_DeviceState_DISCONNECT = 3,
  Status_DeviceState_Status_DeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_DeviceState_Status_DeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_DeviceState_IsValid(int value);
constexpr Status_DeviceState Status_DeviceState_DeviceState_MIN = Status_DeviceState_CONNECTING;
constexpr Status_DeviceState Status_DeviceState_DeviceState_MAX = Status_DeviceState_DISCONNECT;
constexpr int Status_DeviceState_DeviceState_ARRAYSIZE = Status_DeviceState_DeviceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_DeviceState_descriptor();
template<typename T>
inline const std::string& Status_DeviceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_DeviceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_DeviceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_DeviceState_descriptor(), enum_t_value);
}
inline bool Status_DeviceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_DeviceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_DeviceState>(
    Status_DeviceState_descriptor(), name, value);
}
enum StatusResponse_Type : int {
  StatusResponse_Type_OK = 0,
  StatusResponse_Type_StatusResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusResponse_Type_StatusResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusResponse_Type_IsValid(int value);
constexpr StatusResponse_Type StatusResponse_Type_Type_MIN = StatusResponse_Type_OK;
constexpr StatusResponse_Type StatusResponse_Type_Type_MAX = StatusResponse_Type_OK;
constexpr int StatusResponse_Type_Type_ARRAYSIZE = StatusResponse_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusResponse_Type_descriptor();
template<typename T>
inline const std::string& StatusResponse_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusResponse_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusResponse_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusResponse_Type_descriptor(), enum_t_value);
}
inline bool StatusResponse_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusResponse_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusResponse_Type>(
    StatusResponse_Type_descriptor(), name, value);
}
enum CommandResponse_Type : int {
  CommandResponse_Type_OK = 0,
  CommandResponse_Type_DEVICE_NOT_CONNECTED = 1,
  CommandResponse_Type_CommandResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommandResponse_Type_CommandResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommandResponse_Type_IsValid(int value);
constexpr CommandResponse_Type CommandResponse_Type_Type_MIN = CommandResponse_Type_OK;
constexpr CommandResponse_Type CommandResponse_Type_Type_MAX = CommandResponse_Type_DEVICE_NOT_CONNECTED;
constexpr int CommandResponse_Type_Type_ARRAYSIZE = CommandResponse_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandResponse_Type_descriptor();
template<typename T>
inline const std::string& CommandResponse_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandResponse_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandResponse_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandResponse_Type_descriptor(), enum_t_value);
}
inline bool CommandResponse_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandResponse_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandResponse_Type>(
    CommandResponse_Type_descriptor(), name, value);
}
// ===================================================================

class ExternalServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.ExternalServer) */ {
 public:
  inline ExternalServer() : ExternalServer(nullptr) {}
  ~ExternalServer() override;
  explicit constexpr ExternalServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalServer(const ExternalServer& from);
  ExternalServer(ExternalServer&& from) noexcept
    : ExternalServer() {
    *this = ::std::move(from);
  }

  inline ExternalServer& operator=(const ExternalServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalServer& operator=(ExternalServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalServer& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kConnectReponse = 1,
    kStatusResponse = 2,
    kCommand = 3,
    MESSAGETYPE_NOT_SET = 0,
  };

  static inline const ExternalServer* internal_default_instance() {
    return reinterpret_cast<const ExternalServer*>(
               &_ExternalServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExternalServer& a, ExternalServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalServer* New() const final {
    return new ExternalServer();
  }

  ExternalServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternalServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExternalServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.ExternalServer";
  }
  protected:
  explicit ExternalServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectReponseFieldNumber = 1,
    kStatusResponseFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // .ExternalProtocol.ConnectResponse connectReponse = 1;
  bool has_connectreponse() const;
  private:
  bool _internal_has_connectreponse() const;
  public:
  void clear_connectreponse();
  const ::ExternalProtocol::ConnectResponse& connectreponse() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::ConnectResponse* release_connectreponse();
  ::ExternalProtocol::ConnectResponse* mutable_connectreponse();
  void set_allocated_connectreponse(::ExternalProtocol::ConnectResponse* connectreponse);
  private:
  const ::ExternalProtocol::ConnectResponse& _internal_connectreponse() const;
  ::ExternalProtocol::ConnectResponse* _internal_mutable_connectreponse();
  public:
  void unsafe_arena_set_allocated_connectreponse(
      ::ExternalProtocol::ConnectResponse* connectreponse);
  ::ExternalProtocol::ConnectResponse* unsafe_arena_release_connectreponse();

  // .ExternalProtocol.StatusResponse statusResponse = 2;
  bool has_statusresponse() const;
  private:
  bool _internal_has_statusresponse() const;
  public:
  void clear_statusresponse();
  const ::ExternalProtocol::StatusResponse& statusresponse() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::StatusResponse* release_statusresponse();
  ::ExternalProtocol::StatusResponse* mutable_statusresponse();
  void set_allocated_statusresponse(::ExternalProtocol::StatusResponse* statusresponse);
  private:
  const ::ExternalProtocol::StatusResponse& _internal_statusresponse() const;
  ::ExternalProtocol::StatusResponse* _internal_mutable_statusresponse();
  public:
  void unsafe_arena_set_allocated_statusresponse(
      ::ExternalProtocol::StatusResponse* statusresponse);
  ::ExternalProtocol::StatusResponse* unsafe_arena_release_statusresponse();

  // .ExternalProtocol.Command command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::ExternalProtocol::Command& command() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::Command* release_command();
  ::ExternalProtocol::Command* mutable_command();
  void set_allocated_command(::ExternalProtocol::Command* command);
  private:
  const ::ExternalProtocol::Command& _internal_command() const;
  ::ExternalProtocol::Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::ExternalProtocol::Command* command);
  ::ExternalProtocol::Command* unsafe_arena_release_command();

  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.ExternalServer)
 private:
  class _Internal;
  void set_has_connectreponse();
  void set_has_statusresponse();
  void set_has_command();

  inline bool has_MessageType() const;
  inline void clear_has_MessageType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageTypeUnion {
    constexpr MessageTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ExternalProtocol::ConnectResponse* connectreponse_;
    ::ExternalProtocol::StatusResponse* statusresponse_;
    ::ExternalProtocol::Command* command_;
  } MessageType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class ExternalClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.ExternalClient) */ {
 public:
  inline ExternalClient() : ExternalClient(nullptr) {}
  ~ExternalClient() override;
  explicit constexpr ExternalClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalClient(const ExternalClient& from);
  ExternalClient(ExternalClient&& from) noexcept
    : ExternalClient() {
    *this = ::std::move(from);
  }

  inline ExternalClient& operator=(const ExternalClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalClient& operator=(ExternalClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExternalClient& default_instance() {
    return *internal_default_instance();
  }
  enum MessageTypeCase {
    kConnect = 1,
    kStatus = 2,
    kCommandResponse = 3,
    MESSAGETYPE_NOT_SET = 0,
  };

  static inline const ExternalClient* internal_default_instance() {
    return reinterpret_cast<const ExternalClient*>(
               &_ExternalClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExternalClient& a, ExternalClient& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalClient* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalClient* New() const final {
    return new ExternalClient();
  }

  ExternalClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExternalClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExternalClient& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.ExternalClient";
  }
  protected:
  explicit ExternalClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectFieldNumber = 1,
    kStatusFieldNumber = 2,
    kCommandResponseFieldNumber = 3,
  };
  // .ExternalProtocol.Connect connect = 1;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::ExternalProtocol::Connect& connect() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::Connect* release_connect();
  ::ExternalProtocol::Connect* mutable_connect();
  void set_allocated_connect(::ExternalProtocol::Connect* connect);
  private:
  const ::ExternalProtocol::Connect& _internal_connect() const;
  ::ExternalProtocol::Connect* _internal_mutable_connect();
  public:
  void unsafe_arena_set_allocated_connect(
      ::ExternalProtocol::Connect* connect);
  ::ExternalProtocol::Connect* unsafe_arena_release_connect();

  // .ExternalProtocol.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::ExternalProtocol::Status& status() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::Status* release_status();
  ::ExternalProtocol::Status* mutable_status();
  void set_allocated_status(::ExternalProtocol::Status* status);
  private:
  const ::ExternalProtocol::Status& _internal_status() const;
  ::ExternalProtocol::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::ExternalProtocol::Status* status);
  ::ExternalProtocol::Status* unsafe_arena_release_status();

  // .ExternalProtocol.CommandResponse commandResponse = 3;
  bool has_commandresponse() const;
  private:
  bool _internal_has_commandresponse() const;
  public:
  void clear_commandresponse();
  const ::ExternalProtocol::CommandResponse& commandresponse() const;
  PROTOBUF_MUST_USE_RESULT ::ExternalProtocol::CommandResponse* release_commandresponse();
  ::ExternalProtocol::CommandResponse* mutable_commandresponse();
  void set_allocated_commandresponse(::ExternalProtocol::CommandResponse* commandresponse);
  private:
  const ::ExternalProtocol::CommandResponse& _internal_commandresponse() const;
  ::ExternalProtocol::CommandResponse* _internal_mutable_commandresponse();
  public:
  void unsafe_arena_set_allocated_commandresponse(
      ::ExternalProtocol::CommandResponse* commandresponse);
  ::ExternalProtocol::CommandResponse* unsafe_arena_release_commandresponse();

  void clear_MessageType();
  MessageTypeCase MessageType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.ExternalClient)
 private:
  class _Internal;
  void set_has_connect();
  void set_has_status();
  void set_has_commandresponse();

  inline bool has_MessageType() const;
  inline void clear_has_MessageType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageTypeUnion {
    constexpr MessageTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ExternalProtocol::Connect* connect_;
    ::ExternalProtocol::Status* status_;
    ::ExternalProtocol::CommandResponse* commandresponse_;
  } MessageType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Connect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.Connect) */ {
 public:
  inline Connect() : Connect(nullptr) {}
  ~Connect() override;
  explicit constexpr Connect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connect(const Connect& from);
  Connect(Connect&& from) noexcept
    : Connect() {
    *this = ::std::move(from);
  }

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connect& operator=(Connect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connect* internal_default_instance() {
    return reinterpret_cast<const Connect*>(
               &_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Connect& a, Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(Connect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Connect* New() const final {
    return new Connect();
  }

  Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Connect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Connect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Connect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.Connect";
  }
  protected:
  explicit Connect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNamesFieldNumber = 4,
    kSessionIdFieldNumber = 1,
    kCompanyFieldNumber = 2,
    kVehicleNameFieldNumber = 3,
  };
  // repeated string deviceNames = 4;
  int devicenames_size() const;
  private:
  int _internal_devicenames_size() const;
  public:
  void clear_devicenames();
  const std::string& devicenames(int index) const;
  std::string* mutable_devicenames(int index);
  void set_devicenames(int index, const std::string& value);
  void set_devicenames(int index, std::string&& value);
  void set_devicenames(int index, const char* value);
  void set_devicenames(int index, const char* value, size_t size);
  std::string* add_devicenames();
  void add_devicenames(const std::string& value);
  void add_devicenames(std::string&& value);
  void add_devicenames(const char* value);
  void add_devicenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& devicenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_devicenames();
  private:
  const std::string& _internal_devicenames(int index) const;
  std::string* _internal_add_devicenames();
  public:

  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // string company = 2;
  void clear_company();
  const std::string& company() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_company(ArgT0&& arg0, ArgT... args);
  std::string* mutable_company();
  PROTOBUF_MUST_USE_RESULT std::string* release_company();
  void set_allocated_company(std::string* company);
  private:
  const std::string& _internal_company() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_company(const std::string& value);
  std::string* _internal_mutable_company();
  public:

  // string vehicleName = 3;
  void clear_vehiclename();
  const std::string& vehiclename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehiclename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehiclename();
  PROTOBUF_MUST_USE_RESULT std::string* release_vehiclename();
  void set_allocated_vehiclename(std::string* vehiclename);
  private:
  const std::string& _internal_vehiclename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehiclename(const std::string& value);
  std::string* _internal_mutable_vehiclename();
  public:

  // @@protoc_insertion_point(class_scope:ExternalProtocol.Connect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> devicenames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr company_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehiclename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class ConnectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.ConnectResponse) */ {
 public:
  inline ConnectResponse() : ConnectResponse(nullptr) {}
  ~ConnectResponse() override;
  explicit constexpr ConnectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectResponse(const ConnectResponse& from);
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponse* New() const final {
    return new ConnectResponse();
  }

  ConnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.ConnectResponse";
  }
  protected:
  explicit ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectResponse_Type Type;
  static constexpr Type OK =
    ConnectResponse_Type_OK;
  static constexpr Type ALREADY_LOGGED =
    ConnectResponse_Type_ALREADY_LOGGED;
  static inline bool Type_IsValid(int value) {
    return ConnectResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ConnectResponse_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ConnectResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ConnectResponse_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ConnectResponse_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ConnectResponse_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ConnectResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .ExternalProtocol.ConnectResponse.Type type = 2;
  void clear_type();
  ::ExternalProtocol::ConnectResponse_Type type() const;
  void set_type(::ExternalProtocol::ConnectResponse_Type value);
  private:
  ::ExternalProtocol::ConnectResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::ConnectResponse_Type value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalProtocol.ConnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  enum StatusTypeCase {
    kMissionStatus = 6,
    kCarAccessoryStatus = 8,
    STATUSTYPE_NOT_SET = 0,
  };

  enum ErrorTypeCase {
    kMissionError = 7,
    kCarAccessoryError = 9,
    ERRORTYPE_NOT_SET = 0,
  };

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return new Status();
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Status_DeviceState DeviceState;
  static constexpr DeviceState CONNECTING =
    Status_DeviceState_CONNECTING;
  static constexpr DeviceState RUNNING =
    Status_DeviceState_RUNNING;
  static constexpr DeviceState ERROR =
    Status_DeviceState_ERROR;
  static constexpr DeviceState DISCONNECT =
    Status_DeviceState_DISCONNECT;
  static inline bool DeviceState_IsValid(int value) {
    return Status_DeviceState_IsValid(value);
  }
  static constexpr DeviceState DeviceState_MIN =
    Status_DeviceState_DeviceState_MIN;
  static constexpr DeviceState DeviceState_MAX =
    Status_DeviceState_DeviceState_MAX;
  static constexpr int DeviceState_ARRAYSIZE =
    Status_DeviceState_DeviceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceState_descriptor() {
    return Status_DeviceState_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceState_Name.");
    return Status_DeviceState_Name(enum_t_value);
  }
  static inline bool DeviceState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceState* value) {
    return Status_DeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kDeviceStateFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
    kMissionStatusFieldNumber = 6,
    kCarAccessoryStatusFieldNumber = 8,
    kMissionErrorFieldNumber = 7,
    kCarAccessoryErrorFieldNumber = 9,
  };
  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .ExternalProtocol.Status.DeviceState deviceState = 2;
  void clear_devicestate();
  ::ExternalProtocol::Status_DeviceState devicestate() const;
  void set_devicestate(::ExternalProtocol::Status_DeviceState value);
  private:
  ::ExternalProtocol::Status_DeviceState _internal_devicestate() const;
  void _internal_set_devicestate(::ExternalProtocol::Status_DeviceState value);
  public:

  // uint32 messageCounter = 3;
  void clear_messagecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter() const;
  void set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagecounter() const;
  void _internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .MissionModule.MissionStatus missionStatus = 6;
  bool has_missionstatus() const;
  private:
  bool _internal_has_missionstatus() const;
  public:
  void clear_missionstatus();
  const ::MissionModule::MissionStatus& missionstatus() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::MissionStatus* release_missionstatus();
  ::MissionModule::MissionStatus* mutable_missionstatus();
  void set_allocated_missionstatus(::MissionModule::MissionStatus* missionstatus);
  private:
  const ::MissionModule::MissionStatus& _internal_missionstatus() const;
  ::MissionModule::MissionStatus* _internal_mutable_missionstatus();
  public:
  void unsafe_arena_set_allocated_missionstatus(
      ::MissionModule::MissionStatus* missionstatus);
  ::MissionModule::MissionStatus* unsafe_arena_release_missionstatus();

  // .CarAccessoryModule.CarAccessoryStatus carAccessoryStatus = 8;
  bool has_caraccessorystatus() const;
  private:
  bool _internal_has_caraccessorystatus() const;
  public:
  void clear_caraccessorystatus();
  const ::CarAccessoryModule::CarAccessoryStatus& caraccessorystatus() const;
  PROTOBUF_MUST_USE_RESULT ::CarAccessoryModule::CarAccessoryStatus* release_caraccessorystatus();
  ::CarAccessoryModule::CarAccessoryStatus* mutable_caraccessorystatus();
  void set_allocated_caraccessorystatus(::CarAccessoryModule::CarAccessoryStatus* caraccessorystatus);
  private:
  const ::CarAccessoryModule::CarAccessoryStatus& _internal_caraccessorystatus() const;
  ::CarAccessoryModule::CarAccessoryStatus* _internal_mutable_caraccessorystatus();
  public:
  void unsafe_arena_set_allocated_caraccessorystatus(
      ::CarAccessoryModule::CarAccessoryStatus* caraccessorystatus);
  ::CarAccessoryModule::CarAccessoryStatus* unsafe_arena_release_caraccessorystatus();

  // .MissionModule.MissionError missionError = 7;
  bool has_missionerror() const;
  private:
  bool _internal_has_missionerror() const;
  public:
  void clear_missionerror();
  const ::MissionModule::MissionError& missionerror() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::MissionError* release_missionerror();
  ::MissionModule::MissionError* mutable_missionerror();
  void set_allocated_missionerror(::MissionModule::MissionError* missionerror);
  private:
  const ::MissionModule::MissionError& _internal_missionerror() const;
  ::MissionModule::MissionError* _internal_mutable_missionerror();
  public:
  void unsafe_arena_set_allocated_missionerror(
      ::MissionModule::MissionError* missionerror);
  ::MissionModule::MissionError* unsafe_arena_release_missionerror();

  // .CarAccessoryModule.CarAccessoryError carAccessoryError = 9;
  bool has_caraccessoryerror() const;
  private:
  bool _internal_has_caraccessoryerror() const;
  public:
  void clear_caraccessoryerror();
  const ::CarAccessoryModule::CarAccessoryError& caraccessoryerror() const;
  PROTOBUF_MUST_USE_RESULT ::CarAccessoryModule::CarAccessoryError* release_caraccessoryerror();
  ::CarAccessoryModule::CarAccessoryError* mutable_caraccessoryerror();
  void set_allocated_caraccessoryerror(::CarAccessoryModule::CarAccessoryError* caraccessoryerror);
  private:
  const ::CarAccessoryModule::CarAccessoryError& _internal_caraccessoryerror() const;
  ::CarAccessoryModule::CarAccessoryError* _internal_mutable_caraccessoryerror();
  public:
  void unsafe_arena_set_allocated_caraccessoryerror(
      ::CarAccessoryModule::CarAccessoryError* caraccessoryerror);
  ::CarAccessoryModule::CarAccessoryError* unsafe_arena_release_caraccessoryerror();

  void clear_StatusType();
  StatusTypeCase StatusType_case() const;
  void clear_ErrorType();
  ErrorTypeCase ErrorType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.Status)
 private:
  class _Internal;
  void set_has_missionstatus();
  void set_has_caraccessorystatus();
  void set_has_missionerror();
  void set_has_caraccessoryerror();

  inline bool has_StatusType() const;
  inline void clear_has_StatusType();

  inline bool has_ErrorType() const;
  inline void clear_has_ErrorType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  int devicestate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter_;
  union StatusTypeUnion {
    constexpr StatusTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::MissionStatus* missionstatus_;
    ::CarAccessoryModule::CarAccessoryStatus* caraccessorystatus_;
  } StatusType_;
  union ErrorTypeUnion {
    constexpr ErrorTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::MissionError* missionerror_;
    ::CarAccessoryModule::CarAccessoryError* caraccessoryerror_;
  } ErrorType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit constexpr StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return new StatusResponse();
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatusResponse_Type Type;
  static constexpr Type OK =
    StatusResponse_Type_OK;
  static inline bool Type_IsValid(int value) {
    return StatusResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StatusResponse_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StatusResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StatusResponse_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StatusResponse_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StatusResponse_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StatusResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
  };
  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .ExternalProtocol.StatusResponse.Type type = 2;
  void clear_type();
  ::ExternalProtocol::StatusResponse_Type type() const;
  void set_type(::ExternalProtocol::StatusResponse_Type value);
  private:
  ::ExternalProtocol::StatusResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::StatusResponse_Type value);
  public:

  // uint32 messageCounter = 3;
  void clear_messagecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter() const;
  void set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagecounter() const;
  void _internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalProtocol.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  enum CommandTypeCase {
    kMissionCommand = 4,
    kCarAccessoryCommand = 5,
    COMMANDTYPE_NOT_SET = 0,
  };

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return new Command();
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kMessageCounterFieldNumber = 2,
    kMissionCommandFieldNumber = 4,
    kCarAccessoryCommandFieldNumber = 5,
  };
  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // uint32 messageCounter = 2;
  void clear_messagecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter() const;
  void set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagecounter() const;
  void _internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .MissionModule.MissionCommand missionCommand = 4;
  bool has_missioncommand() const;
  private:
  bool _internal_has_missioncommand() const;
  public:
  void clear_missioncommand();
  const ::MissionModule::MissionCommand& missioncommand() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::MissionCommand* release_missioncommand();
  ::MissionModule::MissionCommand* mutable_missioncommand();
  void set_allocated_missioncommand(::MissionModule::MissionCommand* missioncommand);
  private:
  const ::MissionModule::MissionCommand& _internal_missioncommand() const;
  ::MissionModule::MissionCommand* _internal_mutable_missioncommand();
  public:
  void unsafe_arena_set_allocated_missioncommand(
      ::MissionModule::MissionCommand* missioncommand);
  ::MissionModule::MissionCommand* unsafe_arena_release_missioncommand();

  // .CarAccessoryModule.CarAccessoryCommand CarAccessoryCommand = 5;
  bool has_caraccessorycommand() const;
  private:
  bool _internal_has_caraccessorycommand() const;
  public:
  void clear_caraccessorycommand();
  const ::CarAccessoryModule::CarAccessoryCommand& caraccessorycommand() const;
  PROTOBUF_MUST_USE_RESULT ::CarAccessoryModule::CarAccessoryCommand* release_caraccessorycommand();
  ::CarAccessoryModule::CarAccessoryCommand* mutable_caraccessorycommand();
  void set_allocated_caraccessorycommand(::CarAccessoryModule::CarAccessoryCommand* caraccessorycommand);
  private:
  const ::CarAccessoryModule::CarAccessoryCommand& _internal_caraccessorycommand() const;
  ::CarAccessoryModule::CarAccessoryCommand* _internal_mutable_caraccessorycommand();
  public:
  void unsafe_arena_set_allocated_caraccessorycommand(
      ::CarAccessoryModule::CarAccessoryCommand* caraccessorycommand);
  ::CarAccessoryModule::CarAccessoryCommand* unsafe_arena_release_caraccessorycommand();

  void clear_CommandType();
  CommandTypeCase CommandType_case() const;
  // @@protoc_insertion_point(class_scope:ExternalProtocol.Command)
 private:
  class _Internal;
  void set_has_missioncommand();
  void set_has_caraccessorycommand();

  inline bool has_CommandType() const;
  inline void clear_has_CommandType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter_;
  union CommandTypeUnion {
    constexpr CommandTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::MissionCommand* missioncommand_;
    ::CarAccessoryModule::CarAccessoryCommand* caraccessorycommand_;
  } CommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalProtocol.CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() override;
  explicit constexpr CommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return new CommandResponse();
  }

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalProtocol.CommandResponse";
  }
  protected:
  explicit CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandResponse_Type Type;
  static constexpr Type OK =
    CommandResponse_Type_OK;
  static constexpr Type DEVICE_NOT_CONNECTED =
    CommandResponse_Type_DEVICE_NOT_CONNECTED;
  static inline bool Type_IsValid(int value) {
    return CommandResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CommandResponse_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CommandResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CommandResponse_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CommandResponse_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CommandResponse_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CommandResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMessageCounterFieldNumber = 3,
  };
  // string sessionId = 1;
  void clear_sessionid();
  const std::string& sessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sessionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_sessionid();
  void set_allocated_sessionid(std::string* sessionid);
  private:
  const std::string& _internal_sessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionid(const std::string& value);
  std::string* _internal_mutable_sessionid();
  public:

  // .ExternalProtocol.CommandResponse.Type type = 2;
  void clear_type();
  ::ExternalProtocol::CommandResponse_Type type() const;
  void set_type(::ExternalProtocol::CommandResponse_Type value);
  private:
  ::ExternalProtocol::CommandResponse_Type _internal_type() const;
  void _internal_set_type(::ExternalProtocol::CommandResponse_Type value);
  public:

  // uint32 messageCounter = 3;
  void clear_messagecounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter() const;
  void set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagecounter() const;
  void _internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalProtocol.CommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionid_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecounter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ExternalProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExternalServer

// .ExternalProtocol.ConnectResponse connectReponse = 1;
inline bool ExternalServer::_internal_has_connectreponse() const {
  return MessageType_case() == kConnectReponse;
}
inline bool ExternalServer::has_connectreponse() const {
  return _internal_has_connectreponse();
}
inline void ExternalServer::set_has_connectreponse() {
  _oneof_case_[0] = kConnectReponse;
}
inline void ExternalServer::clear_connectreponse() {
  if (_internal_has_connectreponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.connectreponse_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::release_connectreponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.connectReponse)
  if (_internal_has_connectreponse()) {
    clear_has_MessageType();
      ::ExternalProtocol::ConnectResponse* temp = MessageType_.connectreponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.connectreponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::ConnectResponse& ExternalServer::_internal_connectreponse() const {
  return _internal_has_connectreponse()
      ? *MessageType_.connectreponse_
      : reinterpret_cast< ::ExternalProtocol::ConnectResponse&>(::ExternalProtocol::_ConnectResponse_default_instance_);
}
inline const ::ExternalProtocol::ConnectResponse& ExternalServer::connectreponse() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.connectReponse)
  return _internal_connectreponse();
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::unsafe_arena_release_connectreponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.connectReponse)
  if (_internal_has_connectreponse()) {
    clear_has_MessageType();
    ::ExternalProtocol::ConnectResponse* temp = MessageType_.connectreponse_;
    MessageType_.connectreponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_connectreponse(::ExternalProtocol::ConnectResponse* connectreponse) {
  clear_MessageType();
  if (connectreponse) {
    set_has_connectreponse();
    MessageType_.connectreponse_ = connectreponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.connectReponse)
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::_internal_mutable_connectreponse() {
  if (!_internal_has_connectreponse()) {
    clear_MessageType();
    set_has_connectreponse();
    MessageType_.connectreponse_ = CreateMaybeMessage< ::ExternalProtocol::ConnectResponse >(GetArenaForAllocation());
  }
  return MessageType_.connectreponse_;
}
inline ::ExternalProtocol::ConnectResponse* ExternalServer::mutable_connectreponse() {
  ::ExternalProtocol::ConnectResponse* _msg = _internal_mutable_connectreponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.connectReponse)
  return _msg;
}

// .ExternalProtocol.StatusResponse statusResponse = 2;
inline bool ExternalServer::_internal_has_statusresponse() const {
  return MessageType_case() == kStatusResponse;
}
inline bool ExternalServer::has_statusresponse() const {
  return _internal_has_statusresponse();
}
inline void ExternalServer::set_has_statusresponse() {
  _oneof_case_[0] = kStatusResponse;
}
inline void ExternalServer::clear_statusresponse() {
  if (_internal_has_statusresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.statusresponse_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::release_statusresponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.statusResponse)
  if (_internal_has_statusresponse()) {
    clear_has_MessageType();
      ::ExternalProtocol::StatusResponse* temp = MessageType_.statusresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.statusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::StatusResponse& ExternalServer::_internal_statusresponse() const {
  return _internal_has_statusresponse()
      ? *MessageType_.statusresponse_
      : reinterpret_cast< ::ExternalProtocol::StatusResponse&>(::ExternalProtocol::_StatusResponse_default_instance_);
}
inline const ::ExternalProtocol::StatusResponse& ExternalServer::statusresponse() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.statusResponse)
  return _internal_statusresponse();
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::unsafe_arena_release_statusresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.statusResponse)
  if (_internal_has_statusresponse()) {
    clear_has_MessageType();
    ::ExternalProtocol::StatusResponse* temp = MessageType_.statusresponse_;
    MessageType_.statusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_statusresponse(::ExternalProtocol::StatusResponse* statusresponse) {
  clear_MessageType();
  if (statusresponse) {
    set_has_statusresponse();
    MessageType_.statusresponse_ = statusresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.statusResponse)
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::_internal_mutable_statusresponse() {
  if (!_internal_has_statusresponse()) {
    clear_MessageType();
    set_has_statusresponse();
    MessageType_.statusresponse_ = CreateMaybeMessage< ::ExternalProtocol::StatusResponse >(GetArenaForAllocation());
  }
  return MessageType_.statusresponse_;
}
inline ::ExternalProtocol::StatusResponse* ExternalServer::mutable_statusresponse() {
  ::ExternalProtocol::StatusResponse* _msg = _internal_mutable_statusresponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.statusResponse)
  return _msg;
}

// .ExternalProtocol.Command command = 3;
inline bool ExternalServer::_internal_has_command() const {
  return MessageType_case() == kCommand;
}
inline bool ExternalServer::has_command() const {
  return _internal_has_command();
}
inline void ExternalServer::set_has_command() {
  _oneof_case_[0] = kCommand;
}
inline void ExternalServer::clear_command() {
  if (_internal_has_command()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.command_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Command* ExternalServer::release_command() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalServer.command)
  if (_internal_has_command()) {
    clear_has_MessageType();
      ::ExternalProtocol::Command* temp = MessageType_.command_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Command& ExternalServer::_internal_command() const {
  return _internal_has_command()
      ? *MessageType_.command_
      : reinterpret_cast< ::ExternalProtocol::Command&>(::ExternalProtocol::_Command_default_instance_);
}
inline const ::ExternalProtocol::Command& ExternalServer::command() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalServer.command)
  return _internal_command();
}
inline ::ExternalProtocol::Command* ExternalServer::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalServer.command)
  if (_internal_has_command()) {
    clear_has_MessageType();
    ::ExternalProtocol::Command* temp = MessageType_.command_;
    MessageType_.command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalServer::unsafe_arena_set_allocated_command(::ExternalProtocol::Command* command) {
  clear_MessageType();
  if (command) {
    set_has_command();
    MessageType_.command_ = command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalServer.command)
}
inline ::ExternalProtocol::Command* ExternalServer::_internal_mutable_command() {
  if (!_internal_has_command()) {
    clear_MessageType();
    set_has_command();
    MessageType_.command_ = CreateMaybeMessage< ::ExternalProtocol::Command >(GetArenaForAllocation());
  }
  return MessageType_.command_;
}
inline ::ExternalProtocol::Command* ExternalServer::mutable_command() {
  ::ExternalProtocol::Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalServer.command)
  return _msg;
}

inline bool ExternalServer::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void ExternalServer::clear_has_MessageType() {
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline ExternalServer::MessageTypeCase ExternalServer::MessageType_case() const {
  return ExternalServer::MessageTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExternalClient

// .ExternalProtocol.Connect connect = 1;
inline bool ExternalClient::_internal_has_connect() const {
  return MessageType_case() == kConnect;
}
inline bool ExternalClient::has_connect() const {
  return _internal_has_connect();
}
inline void ExternalClient::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void ExternalClient::clear_connect() {
  if (_internal_has_connect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.connect_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Connect* ExternalClient::release_connect() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.connect)
  if (_internal_has_connect()) {
    clear_has_MessageType();
      ::ExternalProtocol::Connect* temp = MessageType_.connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Connect& ExternalClient::_internal_connect() const {
  return _internal_has_connect()
      ? *MessageType_.connect_
      : reinterpret_cast< ::ExternalProtocol::Connect&>(::ExternalProtocol::_Connect_default_instance_);
}
inline const ::ExternalProtocol::Connect& ExternalClient::connect() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.connect)
  return _internal_connect();
}
inline ::ExternalProtocol::Connect* ExternalClient::unsafe_arena_release_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.connect)
  if (_internal_has_connect()) {
    clear_has_MessageType();
    ::ExternalProtocol::Connect* temp = MessageType_.connect_;
    MessageType_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_connect(::ExternalProtocol::Connect* connect) {
  clear_MessageType();
  if (connect) {
    set_has_connect();
    MessageType_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.connect)
}
inline ::ExternalProtocol::Connect* ExternalClient::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_MessageType();
    set_has_connect();
    MessageType_.connect_ = CreateMaybeMessage< ::ExternalProtocol::Connect >(GetArenaForAllocation());
  }
  return MessageType_.connect_;
}
inline ::ExternalProtocol::Connect* ExternalClient::mutable_connect() {
  ::ExternalProtocol::Connect* _msg = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.connect)
  return _msg;
}

// .ExternalProtocol.Status status = 2;
inline bool ExternalClient::_internal_has_status() const {
  return MessageType_case() == kStatus;
}
inline bool ExternalClient::has_status() const {
  return _internal_has_status();
}
inline void ExternalClient::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline void ExternalClient::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.status_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::Status* ExternalClient::release_status() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.status)
  if (_internal_has_status()) {
    clear_has_MessageType();
      ::ExternalProtocol::Status* temp = MessageType_.status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::Status& ExternalClient::_internal_status() const {
  return _internal_has_status()
      ? *MessageType_.status_
      : reinterpret_cast< ::ExternalProtocol::Status&>(::ExternalProtocol::_Status_default_instance_);
}
inline const ::ExternalProtocol::Status& ExternalClient::status() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.status)
  return _internal_status();
}
inline ::ExternalProtocol::Status* ExternalClient::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.status)
  if (_internal_has_status()) {
    clear_has_MessageType();
    ::ExternalProtocol::Status* temp = MessageType_.status_;
    MessageType_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_status(::ExternalProtocol::Status* status) {
  clear_MessageType();
  if (status) {
    set_has_status();
    MessageType_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.status)
}
inline ::ExternalProtocol::Status* ExternalClient::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_MessageType();
    set_has_status();
    MessageType_.status_ = CreateMaybeMessage< ::ExternalProtocol::Status >(GetArenaForAllocation());
  }
  return MessageType_.status_;
}
inline ::ExternalProtocol::Status* ExternalClient::mutable_status() {
  ::ExternalProtocol::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.status)
  return _msg;
}

// .ExternalProtocol.CommandResponse commandResponse = 3;
inline bool ExternalClient::_internal_has_commandresponse() const {
  return MessageType_case() == kCommandResponse;
}
inline bool ExternalClient::has_commandresponse() const {
  return _internal_has_commandresponse();
}
inline void ExternalClient::set_has_commandresponse() {
  _oneof_case_[0] = kCommandResponse;
}
inline void ExternalClient::clear_commandresponse() {
  if (_internal_has_commandresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete MessageType_.commandresponse_;
    }
    clear_has_MessageType();
  }
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::release_commandresponse() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ExternalClient.commandResponse)
  if (_internal_has_commandresponse()) {
    clear_has_MessageType();
      ::ExternalProtocol::CommandResponse* temp = MessageType_.commandresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    MessageType_.commandresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExternalProtocol::CommandResponse& ExternalClient::_internal_commandresponse() const {
  return _internal_has_commandresponse()
      ? *MessageType_.commandresponse_
      : reinterpret_cast< ::ExternalProtocol::CommandResponse&>(::ExternalProtocol::_CommandResponse_default_instance_);
}
inline const ::ExternalProtocol::CommandResponse& ExternalClient::commandresponse() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ExternalClient.commandResponse)
  return _internal_commandresponse();
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::unsafe_arena_release_commandresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.ExternalClient.commandResponse)
  if (_internal_has_commandresponse()) {
    clear_has_MessageType();
    ::ExternalProtocol::CommandResponse* temp = MessageType_.commandresponse_;
    MessageType_.commandresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExternalClient::unsafe_arena_set_allocated_commandresponse(::ExternalProtocol::CommandResponse* commandresponse) {
  clear_MessageType();
  if (commandresponse) {
    set_has_commandresponse();
    MessageType_.commandresponse_ = commandresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.ExternalClient.commandResponse)
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::_internal_mutable_commandresponse() {
  if (!_internal_has_commandresponse()) {
    clear_MessageType();
    set_has_commandresponse();
    MessageType_.commandresponse_ = CreateMaybeMessage< ::ExternalProtocol::CommandResponse >(GetArenaForAllocation());
  }
  return MessageType_.commandresponse_;
}
inline ::ExternalProtocol::CommandResponse* ExternalClient::mutable_commandresponse() {
  ::ExternalProtocol::CommandResponse* _msg = _internal_mutable_commandresponse();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ExternalClient.commandResponse)
  return _msg;
}

inline bool ExternalClient::has_MessageType() const {
  return MessageType_case() != MESSAGETYPE_NOT_SET;
}
inline void ExternalClient::clear_has_MessageType() {
  _oneof_case_[0] = MESSAGETYPE_NOT_SET;
}
inline ExternalClient::MessageTypeCase ExternalClient::MessageType_case() const {
  return ExternalClient::MessageTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Connect

// string sessionId = 1;
inline void Connect::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& Connect::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connect::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.sessionId)
}
inline std::string* Connect::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.sessionId)
  return _s;
}
inline const std::string& Connect::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void Connect::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connect::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connect::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connect::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.sessionId)
}

// string company = 2;
inline void Connect::clear_company() {
  company_.ClearToEmpty();
}
inline const std::string& Connect::company() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.company)
  return _internal_company();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connect::set_company(ArgT0&& arg0, ArgT... args) {
 
 company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.company)
}
inline std::string* Connect::mutable_company() {
  std::string* _s = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.company)
  return _s;
}
inline const std::string& Connect::_internal_company() const {
  return company_.Get();
}
inline void Connect::_internal_set_company(const std::string& value) {
  
  company_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connect::_internal_mutable_company() {
  
  return company_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connect::release_company() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.company)
  return company_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connect::set_allocated_company(std::string* company) {
  if (company != nullptr) {
    
  } else {
    
  }
  company_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), company,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.company)
}

// string vehicleName = 3;
inline void Connect::clear_vehiclename() {
  vehiclename_.ClearToEmpty();
}
inline const std::string& Connect::vehiclename() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.vehicleName)
  return _internal_vehiclename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Connect::set_vehiclename(ArgT0&& arg0, ArgT... args) {
 
 vehiclename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.vehicleName)
}
inline std::string* Connect::mutable_vehiclename() {
  std::string* _s = _internal_mutable_vehiclename();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.vehicleName)
  return _s;
}
inline const std::string& Connect::_internal_vehiclename() const {
  return vehiclename_.Get();
}
inline void Connect::_internal_set_vehiclename(const std::string& value) {
  
  vehiclename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Connect::_internal_mutable_vehiclename() {
  
  return vehiclename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Connect::release_vehiclename() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Connect.vehicleName)
  return vehiclename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Connect::set_allocated_vehiclename(std::string* vehiclename) {
  if (vehiclename != nullptr) {
    
  } else {
    
  }
  vehiclename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehiclename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Connect.vehicleName)
}

// repeated string deviceNames = 4;
inline int Connect::_internal_devicenames_size() const {
  return devicenames_.size();
}
inline int Connect::devicenames_size() const {
  return _internal_devicenames_size();
}
inline void Connect::clear_devicenames() {
  devicenames_.Clear();
}
inline std::string* Connect::add_devicenames() {
  std::string* _s = _internal_add_devicenames();
  // @@protoc_insertion_point(field_add_mutable:ExternalProtocol.Connect.deviceNames)
  return _s;
}
inline const std::string& Connect::_internal_devicenames(int index) const {
  return devicenames_.Get(index);
}
inline const std::string& Connect::devicenames(int index) const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Connect.deviceNames)
  return _internal_devicenames(index);
}
inline std::string* Connect::mutable_devicenames(int index) {
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Connect.deviceNames)
  return devicenames_.Mutable(index);
}
inline void Connect::set_devicenames(int index, const std::string& value) {
  devicenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::set_devicenames(int index, std::string&& value) {
  devicenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::set_devicenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  devicenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::set_devicenames(int index, const char* value, size_t size) {
  devicenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExternalProtocol.Connect.deviceNames)
}
inline std::string* Connect::_internal_add_devicenames() {
  return devicenames_.Add();
}
inline void Connect::add_devicenames(const std::string& value) {
  devicenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::add_devicenames(std::string&& value) {
  devicenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::add_devicenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  devicenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExternalProtocol.Connect.deviceNames)
}
inline void Connect::add_devicenames(const char* value, size_t size) {
  devicenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExternalProtocol.Connect.deviceNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Connect::devicenames() const {
  // @@protoc_insertion_point(field_list:ExternalProtocol.Connect.deviceNames)
  return devicenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Connect::mutable_devicenames() {
  // @@protoc_insertion_point(field_mutable_list:ExternalProtocol.Connect.deviceNames)
  return &devicenames_;
}

// -------------------------------------------------------------------

// ConnectResponse

// string sessionId = 1;
inline void ConnectResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& ConnectResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ConnectResponse.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectResponse::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.ConnectResponse.sessionId)
}
inline std::string* ConnectResponse::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.ConnectResponse.sessionId)
  return _s;
}
inline const std::string& ConnectResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void ConnectResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.ConnectResponse.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.ConnectResponse.sessionId)
}

// .ExternalProtocol.ConnectResponse.Type type = 2;
inline void ConnectResponse::clear_type() {
  type_ = 0;
}
inline ::ExternalProtocol::ConnectResponse_Type ConnectResponse::_internal_type() const {
  return static_cast< ::ExternalProtocol::ConnectResponse_Type >(type_);
}
inline ::ExternalProtocol::ConnectResponse_Type ConnectResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.ConnectResponse.type)
  return _internal_type();
}
inline void ConnectResponse::_internal_set_type(::ExternalProtocol::ConnectResponse_Type value) {
  
  type_ = value;
}
inline void ConnectResponse::set_type(::ExternalProtocol::ConnectResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.ConnectResponse.type)
}

// -------------------------------------------------------------------

// Status

// string sessionId = 1;
inline void Status::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& Status::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.sessionId)
}
inline std::string* Status::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.sessionId)
  return _s;
}
inline const std::string& Status::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void Status::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Status.sessionId)
}

// .ExternalProtocol.Status.DeviceState deviceState = 2;
inline void Status::clear_devicestate() {
  devicestate_ = 0;
}
inline ::ExternalProtocol::Status_DeviceState Status::_internal_devicestate() const {
  return static_cast< ::ExternalProtocol::Status_DeviceState >(devicestate_);
}
inline ::ExternalProtocol::Status_DeviceState Status::devicestate() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.deviceState)
  return _internal_devicestate();
}
inline void Status::_internal_set_devicestate(::ExternalProtocol::Status_DeviceState value) {
  
  devicestate_ = value;
}
inline void Status::set_devicestate(::ExternalProtocol::Status_DeviceState value) {
  _internal_set_devicestate(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.deviceState)
}

// uint32 messageCounter = 3;
inline void Status::clear_messagecounter() {
  messagecounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_messagecounter() const {
  return messagecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.messageCounter)
  return _internal_messagecounter();
}
inline void Status::_internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  messagecounter_ = value;
}
inline void Status::set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Status.messageCounter)
}

// .MissionModule.MissionStatus missionStatus = 6;
inline bool Status::_internal_has_missionstatus() const {
  return StatusType_case() == kMissionStatus;
}
inline bool Status::has_missionstatus() const {
  return _internal_has_missionstatus();
}
inline void Status::set_has_missionstatus() {
  _oneof_case_[0] = kMissionStatus;
}
inline ::MissionModule::MissionStatus* Status::release_missionstatus() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.missionStatus)
  if (_internal_has_missionstatus()) {
    clear_has_StatusType();
      ::MissionModule::MissionStatus* temp = StatusType_.missionstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StatusType_.missionstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::MissionStatus& Status::_internal_missionstatus() const {
  return _internal_has_missionstatus()
      ? *StatusType_.missionstatus_
      : reinterpret_cast< ::MissionModule::MissionStatus&>(::MissionModule::_MissionStatus_default_instance_);
}
inline const ::MissionModule::MissionStatus& Status::missionstatus() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.missionStatus)
  return _internal_missionstatus();
}
inline ::MissionModule::MissionStatus* Status::unsafe_arena_release_missionstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Status.missionStatus)
  if (_internal_has_missionstatus()) {
    clear_has_StatusType();
    ::MissionModule::MissionStatus* temp = StatusType_.missionstatus_;
    StatusType_.missionstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_missionstatus(::MissionModule::MissionStatus* missionstatus) {
  clear_StatusType();
  if (missionstatus) {
    set_has_missionstatus();
    StatusType_.missionstatus_ = missionstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Status.missionStatus)
}
inline ::MissionModule::MissionStatus* Status::_internal_mutable_missionstatus() {
  if (!_internal_has_missionstatus()) {
    clear_StatusType();
    set_has_missionstatus();
    StatusType_.missionstatus_ = CreateMaybeMessage< ::MissionModule::MissionStatus >(GetArenaForAllocation());
  }
  return StatusType_.missionstatus_;
}
inline ::MissionModule::MissionStatus* Status::mutable_missionstatus() {
  ::MissionModule::MissionStatus* _msg = _internal_mutable_missionstatus();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.missionStatus)
  return _msg;
}

// .CarAccessoryModule.CarAccessoryStatus carAccessoryStatus = 8;
inline bool Status::_internal_has_caraccessorystatus() const {
  return StatusType_case() == kCarAccessoryStatus;
}
inline bool Status::has_caraccessorystatus() const {
  return _internal_has_caraccessorystatus();
}
inline void Status::set_has_caraccessorystatus() {
  _oneof_case_[0] = kCarAccessoryStatus;
}
inline ::CarAccessoryModule::CarAccessoryStatus* Status::release_caraccessorystatus() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.carAccessoryStatus)
  if (_internal_has_caraccessorystatus()) {
    clear_has_StatusType();
      ::CarAccessoryModule::CarAccessoryStatus* temp = StatusType_.caraccessorystatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    StatusType_.caraccessorystatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CarAccessoryModule::CarAccessoryStatus& Status::_internal_caraccessorystatus() const {
  return _internal_has_caraccessorystatus()
      ? *StatusType_.caraccessorystatus_
      : reinterpret_cast< ::CarAccessoryModule::CarAccessoryStatus&>(::CarAccessoryModule::_CarAccessoryStatus_default_instance_);
}
inline const ::CarAccessoryModule::CarAccessoryStatus& Status::caraccessorystatus() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.carAccessoryStatus)
  return _internal_caraccessorystatus();
}
inline ::CarAccessoryModule::CarAccessoryStatus* Status::unsafe_arena_release_caraccessorystatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Status.carAccessoryStatus)
  if (_internal_has_caraccessorystatus()) {
    clear_has_StatusType();
    ::CarAccessoryModule::CarAccessoryStatus* temp = StatusType_.caraccessorystatus_;
    StatusType_.caraccessorystatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_caraccessorystatus(::CarAccessoryModule::CarAccessoryStatus* caraccessorystatus) {
  clear_StatusType();
  if (caraccessorystatus) {
    set_has_caraccessorystatus();
    StatusType_.caraccessorystatus_ = caraccessorystatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Status.carAccessoryStatus)
}
inline ::CarAccessoryModule::CarAccessoryStatus* Status::_internal_mutable_caraccessorystatus() {
  if (!_internal_has_caraccessorystatus()) {
    clear_StatusType();
    set_has_caraccessorystatus();
    StatusType_.caraccessorystatus_ = CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryStatus >(GetArenaForAllocation());
  }
  return StatusType_.caraccessorystatus_;
}
inline ::CarAccessoryModule::CarAccessoryStatus* Status::mutable_caraccessorystatus() {
  ::CarAccessoryModule::CarAccessoryStatus* _msg = _internal_mutable_caraccessorystatus();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.carAccessoryStatus)
  return _msg;
}

// .MissionModule.MissionError missionError = 7;
inline bool Status::_internal_has_missionerror() const {
  return ErrorType_case() == kMissionError;
}
inline bool Status::has_missionerror() const {
  return _internal_has_missionerror();
}
inline void Status::set_has_missionerror() {
  _oneof_case_[1] = kMissionError;
}
inline ::MissionModule::MissionError* Status::release_missionerror() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.missionError)
  if (_internal_has_missionerror()) {
    clear_has_ErrorType();
      ::MissionModule::MissionError* temp = ErrorType_.missionerror_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ErrorType_.missionerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::MissionError& Status::_internal_missionerror() const {
  return _internal_has_missionerror()
      ? *ErrorType_.missionerror_
      : reinterpret_cast< ::MissionModule::MissionError&>(::MissionModule::_MissionError_default_instance_);
}
inline const ::MissionModule::MissionError& Status::missionerror() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.missionError)
  return _internal_missionerror();
}
inline ::MissionModule::MissionError* Status::unsafe_arena_release_missionerror() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Status.missionError)
  if (_internal_has_missionerror()) {
    clear_has_ErrorType();
    ::MissionModule::MissionError* temp = ErrorType_.missionerror_;
    ErrorType_.missionerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_missionerror(::MissionModule::MissionError* missionerror) {
  clear_ErrorType();
  if (missionerror) {
    set_has_missionerror();
    ErrorType_.missionerror_ = missionerror;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Status.missionError)
}
inline ::MissionModule::MissionError* Status::_internal_mutable_missionerror() {
  if (!_internal_has_missionerror()) {
    clear_ErrorType();
    set_has_missionerror();
    ErrorType_.missionerror_ = CreateMaybeMessage< ::MissionModule::MissionError >(GetArenaForAllocation());
  }
  return ErrorType_.missionerror_;
}
inline ::MissionModule::MissionError* Status::mutable_missionerror() {
  ::MissionModule::MissionError* _msg = _internal_mutable_missionerror();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.missionError)
  return _msg;
}

// .CarAccessoryModule.CarAccessoryError carAccessoryError = 9;
inline bool Status::_internal_has_caraccessoryerror() const {
  return ErrorType_case() == kCarAccessoryError;
}
inline bool Status::has_caraccessoryerror() const {
  return _internal_has_caraccessoryerror();
}
inline void Status::set_has_caraccessoryerror() {
  _oneof_case_[1] = kCarAccessoryError;
}
inline ::CarAccessoryModule::CarAccessoryError* Status::release_caraccessoryerror() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Status.carAccessoryError)
  if (_internal_has_caraccessoryerror()) {
    clear_has_ErrorType();
      ::CarAccessoryModule::CarAccessoryError* temp = ErrorType_.caraccessoryerror_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ErrorType_.caraccessoryerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CarAccessoryModule::CarAccessoryError& Status::_internal_caraccessoryerror() const {
  return _internal_has_caraccessoryerror()
      ? *ErrorType_.caraccessoryerror_
      : reinterpret_cast< ::CarAccessoryModule::CarAccessoryError&>(::CarAccessoryModule::_CarAccessoryError_default_instance_);
}
inline const ::CarAccessoryModule::CarAccessoryError& Status::caraccessoryerror() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Status.carAccessoryError)
  return _internal_caraccessoryerror();
}
inline ::CarAccessoryModule::CarAccessoryError* Status::unsafe_arena_release_caraccessoryerror() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Status.carAccessoryError)
  if (_internal_has_caraccessoryerror()) {
    clear_has_ErrorType();
    ::CarAccessoryModule::CarAccessoryError* temp = ErrorType_.caraccessoryerror_;
    ErrorType_.caraccessoryerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Status::unsafe_arena_set_allocated_caraccessoryerror(::CarAccessoryModule::CarAccessoryError* caraccessoryerror) {
  clear_ErrorType();
  if (caraccessoryerror) {
    set_has_caraccessoryerror();
    ErrorType_.caraccessoryerror_ = caraccessoryerror;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Status.carAccessoryError)
}
inline ::CarAccessoryModule::CarAccessoryError* Status::_internal_mutable_caraccessoryerror() {
  if (!_internal_has_caraccessoryerror()) {
    clear_ErrorType();
    set_has_caraccessoryerror();
    ErrorType_.caraccessoryerror_ = CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryError >(GetArenaForAllocation());
  }
  return ErrorType_.caraccessoryerror_;
}
inline ::CarAccessoryModule::CarAccessoryError* Status::mutable_caraccessoryerror() {
  ::CarAccessoryModule::CarAccessoryError* _msg = _internal_mutable_caraccessoryerror();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Status.carAccessoryError)
  return _msg;
}

inline bool Status::has_StatusType() const {
  return StatusType_case() != STATUSTYPE_NOT_SET;
}
inline void Status::clear_has_StatusType() {
  _oneof_case_[0] = STATUSTYPE_NOT_SET;
}
inline bool Status::has_ErrorType() const {
  return ErrorType_case() != ERRORTYPE_NOT_SET;
}
inline void Status::clear_has_ErrorType() {
  _oneof_case_[1] = ERRORTYPE_NOT_SET;
}
inline Status::StatusTypeCase Status::StatusType_case() const {
  return Status::StatusTypeCase(_oneof_case_[0]);
}
inline Status::ErrorTypeCase Status::ErrorType_case() const {
  return Status::ErrorTypeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// StatusResponse

// string sessionId = 1;
inline void StatusResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& StatusResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.sessionId)
}
inline std::string* StatusResponse::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.StatusResponse.sessionId)
  return _s;
}
inline const std::string& StatusResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void StatusResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.StatusResponse.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.StatusResponse.sessionId)
}

// .ExternalProtocol.StatusResponse.Type type = 2;
inline void StatusResponse::clear_type() {
  type_ = 0;
}
inline ::ExternalProtocol::StatusResponse_Type StatusResponse::_internal_type() const {
  return static_cast< ::ExternalProtocol::StatusResponse_Type >(type_);
}
inline ::ExternalProtocol::StatusResponse_Type StatusResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.type)
  return _internal_type();
}
inline void StatusResponse::_internal_set_type(::ExternalProtocol::StatusResponse_Type value) {
  
  type_ = value;
}
inline void StatusResponse::set_type(::ExternalProtocol::StatusResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.type)
}

// uint32 messageCounter = 3;
inline void StatusResponse::clear_messagecounter() {
  messagecounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusResponse::_internal_messagecounter() const {
  return messagecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatusResponse::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.StatusResponse.messageCounter)
  return _internal_messagecounter();
}
inline void StatusResponse::_internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  messagecounter_ = value;
}
inline void StatusResponse::set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.StatusResponse.messageCounter)
}

// -------------------------------------------------------------------

// Command

// string sessionId = 1;
inline void Command::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& Command::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.Command.sessionId)
}
inline std::string* Command::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Command.sessionId)
  return _s;
}
inline const std::string& Command::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void Command::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Command::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Command.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Command::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.Command.sessionId)
}

// uint32 messageCounter = 2;
inline void Command::clear_messagecounter() {
  messagecounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_messagecounter() const {
  return messagecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.messageCounter)
  return _internal_messagecounter();
}
inline void Command::_internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  messagecounter_ = value;
}
inline void Command::set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.Command.messageCounter)
}

// .MissionModule.MissionCommand missionCommand = 4;
inline bool Command::_internal_has_missioncommand() const {
  return CommandType_case() == kMissionCommand;
}
inline bool Command::has_missioncommand() const {
  return _internal_has_missioncommand();
}
inline void Command::set_has_missioncommand() {
  _oneof_case_[0] = kMissionCommand;
}
inline ::MissionModule::MissionCommand* Command::release_missioncommand() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Command.missionCommand)
  if (_internal_has_missioncommand()) {
    clear_has_CommandType();
      ::MissionModule::MissionCommand* temp = CommandType_.missioncommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandType_.missioncommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::MissionCommand& Command::_internal_missioncommand() const {
  return _internal_has_missioncommand()
      ? *CommandType_.missioncommand_
      : reinterpret_cast< ::MissionModule::MissionCommand&>(::MissionModule::_MissionCommand_default_instance_);
}
inline const ::MissionModule::MissionCommand& Command::missioncommand() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.missionCommand)
  return _internal_missioncommand();
}
inline ::MissionModule::MissionCommand* Command::unsafe_arena_release_missioncommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Command.missionCommand)
  if (_internal_has_missioncommand()) {
    clear_has_CommandType();
    ::MissionModule::MissionCommand* temp = CommandType_.missioncommand_;
    CommandType_.missioncommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_missioncommand(::MissionModule::MissionCommand* missioncommand) {
  clear_CommandType();
  if (missioncommand) {
    set_has_missioncommand();
    CommandType_.missioncommand_ = missioncommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Command.missionCommand)
}
inline ::MissionModule::MissionCommand* Command::_internal_mutable_missioncommand() {
  if (!_internal_has_missioncommand()) {
    clear_CommandType();
    set_has_missioncommand();
    CommandType_.missioncommand_ = CreateMaybeMessage< ::MissionModule::MissionCommand >(GetArenaForAllocation());
  }
  return CommandType_.missioncommand_;
}
inline ::MissionModule::MissionCommand* Command::mutable_missioncommand() {
  ::MissionModule::MissionCommand* _msg = _internal_mutable_missioncommand();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Command.missionCommand)
  return _msg;
}

// .CarAccessoryModule.CarAccessoryCommand CarAccessoryCommand = 5;
inline bool Command::_internal_has_caraccessorycommand() const {
  return CommandType_case() == kCarAccessoryCommand;
}
inline bool Command::has_caraccessorycommand() const {
  return _internal_has_caraccessorycommand();
}
inline void Command::set_has_caraccessorycommand() {
  _oneof_case_[0] = kCarAccessoryCommand;
}
inline ::CarAccessoryModule::CarAccessoryCommand* Command::release_caraccessorycommand() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.Command.CarAccessoryCommand)
  if (_internal_has_caraccessorycommand()) {
    clear_has_CommandType();
      ::CarAccessoryModule::CarAccessoryCommand* temp = CommandType_.caraccessorycommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    CommandType_.caraccessorycommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CarAccessoryModule::CarAccessoryCommand& Command::_internal_caraccessorycommand() const {
  return _internal_has_caraccessorycommand()
      ? *CommandType_.caraccessorycommand_
      : reinterpret_cast< ::CarAccessoryModule::CarAccessoryCommand&>(::CarAccessoryModule::_CarAccessoryCommand_default_instance_);
}
inline const ::CarAccessoryModule::CarAccessoryCommand& Command::caraccessorycommand() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.Command.CarAccessoryCommand)
  return _internal_caraccessorycommand();
}
inline ::CarAccessoryModule::CarAccessoryCommand* Command::unsafe_arena_release_caraccessorycommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExternalProtocol.Command.CarAccessoryCommand)
  if (_internal_has_caraccessorycommand()) {
    clear_has_CommandType();
    ::CarAccessoryModule::CarAccessoryCommand* temp = CommandType_.caraccessorycommand_;
    CommandType_.caraccessorycommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_caraccessorycommand(::CarAccessoryModule::CarAccessoryCommand* caraccessorycommand) {
  clear_CommandType();
  if (caraccessorycommand) {
    set_has_caraccessorycommand();
    CommandType_.caraccessorycommand_ = caraccessorycommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExternalProtocol.Command.CarAccessoryCommand)
}
inline ::CarAccessoryModule::CarAccessoryCommand* Command::_internal_mutable_caraccessorycommand() {
  if (!_internal_has_caraccessorycommand()) {
    clear_CommandType();
    set_has_caraccessorycommand();
    CommandType_.caraccessorycommand_ = CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryCommand >(GetArenaForAllocation());
  }
  return CommandType_.caraccessorycommand_;
}
inline ::CarAccessoryModule::CarAccessoryCommand* Command::mutable_caraccessorycommand() {
  ::CarAccessoryModule::CarAccessoryCommand* _msg = _internal_mutable_caraccessorycommand();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.Command.CarAccessoryCommand)
  return _msg;
}

inline bool Command::has_CommandType() const {
  return CommandType_case() != COMMANDTYPE_NOT_SET;
}
inline void Command::clear_has_CommandType() {
  _oneof_case_[0] = COMMANDTYPE_NOT_SET;
}
inline Command::CommandTypeCase Command::CommandType_case() const {
  return Command::CommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandResponse

// string sessionId = 1;
inline void CommandResponse::clear_sessionid() {
  sessionid_.ClearToEmpty();
}
inline const std::string& CommandResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.sessionId)
  return _internal_sessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponse::set_sessionid(ArgT0&& arg0, ArgT... args) {
 
 sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.sessionId)
}
inline std::string* CommandResponse::mutable_sessionid() {
  std::string* _s = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:ExternalProtocol.CommandResponse.sessionId)
  return _s;
}
inline const std::string& CommandResponse::_internal_sessionid() const {
  return sessionid_.Get();
}
inline void CommandResponse::_internal_set_sessionid(const std::string& value) {
  
  sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResponse::_internal_mutable_sessionid() {
  
  return sessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResponse::release_sessionid() {
  // @@protoc_insertion_point(field_release:ExternalProtocol.CommandResponse.sessionId)
  return sessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResponse::set_allocated_sessionid(std::string* sessionid) {
  if (sessionid != nullptr) {
    
  } else {
    
  }
  sessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExternalProtocol.CommandResponse.sessionId)
}

// .ExternalProtocol.CommandResponse.Type type = 2;
inline void CommandResponse::clear_type() {
  type_ = 0;
}
inline ::ExternalProtocol::CommandResponse_Type CommandResponse::_internal_type() const {
  return static_cast< ::ExternalProtocol::CommandResponse_Type >(type_);
}
inline ::ExternalProtocol::CommandResponse_Type CommandResponse::type() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.type)
  return _internal_type();
}
inline void CommandResponse::_internal_set_type(::ExternalProtocol::CommandResponse_Type value) {
  
  type_ = value;
}
inline void CommandResponse::set_type(::ExternalProtocol::CommandResponse_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.type)
}

// uint32 messageCounter = 3;
inline void CommandResponse::clear_messagecounter() {
  messagecounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandResponse::_internal_messagecounter() const {
  return messagecounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandResponse::messagecounter() const {
  // @@protoc_insertion_point(field_get:ExternalProtocol.CommandResponse.messageCounter)
  return _internal_messagecounter();
}
inline void CommandResponse::_internal_set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  messagecounter_ = value;
}
inline void CommandResponse::set_messagecounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagecounter(value);
  // @@protoc_insertion_point(field_set:ExternalProtocol.CommandResponse.messageCounter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExternalProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ExternalProtocol::ConnectResponse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExternalProtocol::ConnectResponse_Type>() {
  return ::ExternalProtocol::ConnectResponse_Type_descriptor();
}
template <> struct is_proto_enum< ::ExternalProtocol::Status_DeviceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExternalProtocol::Status_DeviceState>() {
  return ::ExternalProtocol::Status_DeviceState_descriptor();
}
template <> struct is_proto_enum< ::ExternalProtocol::StatusResponse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExternalProtocol::StatusResponse_Type>() {
  return ::ExternalProtocol::StatusResponse_Type_descriptor();
}
template <> struct is_proto_enum< ::ExternalProtocol::CommandResponse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExternalProtocol::CommandResponse_Type>() {
  return ::ExternalProtocol::CommandResponse_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ExternalProtocol_2eproto
