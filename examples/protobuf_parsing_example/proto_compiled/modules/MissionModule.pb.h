// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/MissionModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fMissionModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fMissionModule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fMissionModule_2eproto;
namespace MissionModule {
class AutonomyCommand;
struct AutonomyCommandDefaultTypeInternal;
extern AutonomyCommandDefaultTypeInternal _AutonomyCommand_default_instance_;
class AutonomyError;
struct AutonomyErrorDefaultTypeInternal;
extern AutonomyErrorDefaultTypeInternal _AutonomyError_default_instance_;
class AutonomyStatus;
struct AutonomyStatusDefaultTypeInternal;
extern AutonomyStatusDefaultTypeInternal _AutonomyStatus_default_instance_;
class AutonomyStatus_Telemetry;
struct AutonomyStatus_TelemetryDefaultTypeInternal;
extern AutonomyStatus_TelemetryDefaultTypeInternal _AutonomyStatus_Telemetry_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class MissionCommand;
struct MissionCommandDefaultTypeInternal;
extern MissionCommandDefaultTypeInternal _MissionCommand_default_instance_;
class MissionError;
struct MissionErrorDefaultTypeInternal;
extern MissionErrorDefaultTypeInternal _MissionError_default_instance_;
class MissionStatus;
struct MissionStatusDefaultTypeInternal;
extern MissionStatusDefaultTypeInternal _MissionStatus_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Station;
struct StationDefaultTypeInternal;
extern StationDefaultTypeInternal _Station_default_instance_;
}  // namespace MissionModule
PROTOBUF_NAMESPACE_OPEN
template<> ::MissionModule::AutonomyCommand* Arena::CreateMaybeMessage<::MissionModule::AutonomyCommand>(Arena*);
template<> ::MissionModule::AutonomyError* Arena::CreateMaybeMessage<::MissionModule::AutonomyError>(Arena*);
template<> ::MissionModule::AutonomyStatus* Arena::CreateMaybeMessage<::MissionModule::AutonomyStatus>(Arena*);
template<> ::MissionModule::AutonomyStatus_Telemetry* Arena::CreateMaybeMessage<::MissionModule::AutonomyStatus_Telemetry>(Arena*);
template<> ::MissionModule::Device* Arena::CreateMaybeMessage<::MissionModule::Device>(Arena*);
template<> ::MissionModule::MissionCommand* Arena::CreateMaybeMessage<::MissionModule::MissionCommand>(Arena*);
template<> ::MissionModule::MissionError* Arena::CreateMaybeMessage<::MissionModule::MissionError>(Arena*);
template<> ::MissionModule::MissionStatus* Arena::CreateMaybeMessage<::MissionModule::MissionStatus>(Arena*);
template<> ::MissionModule::Position* Arena::CreateMaybeMessage<::MissionModule::Position>(Arena*);
template<> ::MissionModule::Station* Arena::CreateMaybeMessage<::MissionModule::Station>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MissionModule {

enum Device_Module : int {
  Device_Module_RESERVED_MODULE = 0,
  Device_Module_MISSION_MODULE = 1,
  Device_Module_Device_Module_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Device_Module_Device_Module_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Device_Module_IsValid(int value);
constexpr Device_Module Device_Module_Module_MIN = Device_Module_RESERVED_MODULE;
constexpr Device_Module Device_Module_Module_MAX = Device_Module_MISSION_MODULE;
constexpr int Device_Module_Module_ARRAYSIZE = Device_Module_Module_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor();
template<typename T>
inline const std::string& Device_Module_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Module>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Module_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Module_descriptor(), enum_t_value);
}
inline bool Device_Module_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Module* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Module>(
    Device_Module_descriptor(), name, value);
}
enum Device_DeviceType : int {
  Device_DeviceType_AUTONOMY = 0,
  Device_DeviceType_Device_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Device_DeviceType_Device_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Device_DeviceType_IsValid(int value);
constexpr Device_DeviceType Device_DeviceType_DeviceType_MIN = Device_DeviceType_AUTONOMY;
constexpr Device_DeviceType Device_DeviceType_DeviceType_MAX = Device_DeviceType_AUTONOMY;
constexpr int Device_DeviceType_DeviceType_ARRAYSIZE = Device_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor();
template<typename T>
inline const std::string& Device_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_DeviceType_descriptor(), enum_t_value);
}
inline bool Device_DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_DeviceType>(
    Device_DeviceType_descriptor(), name, value);
}
enum AutonomyStatus_State : int {
  AutonomyStatus_State_IDLE = 0,
  AutonomyStatus_State_DRIVE = 1,
  AutonomyStatus_State_IN_STOP = 2,
  AutonomyStatus_State_OBSTACLE = 3,
  AutonomyStatus_State_ERROR = 4,
  AutonomyStatus_State_AutonomyStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AutonomyStatus_State_AutonomyStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AutonomyStatus_State_IsValid(int value);
constexpr AutonomyStatus_State AutonomyStatus_State_State_MIN = AutonomyStatus_State_IDLE;
constexpr AutonomyStatus_State AutonomyStatus_State_State_MAX = AutonomyStatus_State_ERROR;
constexpr int AutonomyStatus_State_State_ARRAYSIZE = AutonomyStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyStatus_State_descriptor();
template<typename T>
inline const std::string& AutonomyStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutonomyStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutonomyStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutonomyStatus_State_descriptor(), enum_t_value);
}
inline bool AutonomyStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutonomyStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutonomyStatus_State>(
    AutonomyStatus_State_descriptor(), name, value);
}
enum AutonomyCommand_Action : int {
  AutonomyCommand_Action_NO_ACTION = 0,
  AutonomyCommand_Action_STOP = 1,
  AutonomyCommand_Action_START = 2,
  AutonomyCommand_Action_AutonomyCommand_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AutonomyCommand_Action_AutonomyCommand_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AutonomyCommand_Action_IsValid(int value);
constexpr AutonomyCommand_Action AutonomyCommand_Action_Action_MIN = AutonomyCommand_Action_NO_ACTION;
constexpr AutonomyCommand_Action AutonomyCommand_Action_Action_MAX = AutonomyCommand_Action_START;
constexpr int AutonomyCommand_Action_Action_ARRAYSIZE = AutonomyCommand_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyCommand_Action_descriptor();
template<typename T>
inline const std::string& AutonomyCommand_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutonomyCommand_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutonomyCommand_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutonomyCommand_Action_descriptor(), enum_t_value);
}
inline bool AutonomyCommand_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AutonomyCommand_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutonomyCommand_Action>(
    AutonomyCommand_Action_descriptor(), name, value);
}
// ===================================================================

class MissionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.MissionStatus) */ {
 public:
  inline MissionStatus() : MissionStatus(nullptr) {}
  ~MissionStatus() override;
  explicit constexpr MissionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionStatus(const MissionStatus& from);
  MissionStatus(MissionStatus&& from) noexcept
    : MissionStatus() {
    *this = ::std::move(from);
  }

  inline MissionStatus& operator=(const MissionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionStatus& operator=(MissionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionStatus& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceStatusTypeCase {
    kAutonomyStatus = 2,
    DEVICESTATUSTYPE_NOT_SET = 0,
  };

  static inline const MissionStatus* internal_default_instance() {
    return reinterpret_cast<const MissionStatus*>(
               &_MissionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MissionStatus& a, MissionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionStatus* New() const final {
    return new MissionStatus();
  }

  MissionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.MissionStatus";
  }
  protected:
  explicit MissionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAutonomyStatusFieldNumber = 2,
  };
  // .MissionModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::MissionModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Device* release_device();
  ::MissionModule::Device* mutable_device();
  void set_allocated_device(::MissionModule::Device* device);
  private:
  const ::MissionModule::Device& _internal_device() const;
  ::MissionModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::MissionModule::Device* device);
  ::MissionModule::Device* unsafe_arena_release_device();

  // .MissionModule.AutonomyStatus autonomyStatus = 2;
  bool has_autonomystatus() const;
  private:
  bool _internal_has_autonomystatus() const;
  public:
  void clear_autonomystatus();
  const ::MissionModule::AutonomyStatus& autonomystatus() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::AutonomyStatus* release_autonomystatus();
  ::MissionModule::AutonomyStatus* mutable_autonomystatus();
  void set_allocated_autonomystatus(::MissionModule::AutonomyStatus* autonomystatus);
  private:
  const ::MissionModule::AutonomyStatus& _internal_autonomystatus() const;
  ::MissionModule::AutonomyStatus* _internal_mutable_autonomystatus();
  public:
  void unsafe_arena_set_allocated_autonomystatus(
      ::MissionModule::AutonomyStatus* autonomystatus);
  ::MissionModule::AutonomyStatus* unsafe_arena_release_autonomystatus();

  void clear_DeviceStatusType();
  DeviceStatusTypeCase DeviceStatusType_case() const;
  // @@protoc_insertion_point(class_scope:MissionModule.MissionStatus)
 private:
  class _Internal;
  void set_has_autonomystatus();

  inline bool has_DeviceStatusType() const;
  inline void clear_has_DeviceStatusType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MissionModule::Device* device_;
  union DeviceStatusTypeUnion {
    constexpr DeviceStatusTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::AutonomyStatus* autonomystatus_;
  } DeviceStatusType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class MissionCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.MissionCommand) */ {
 public:
  inline MissionCommand() : MissionCommand(nullptr) {}
  ~MissionCommand() override;
  explicit constexpr MissionCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionCommand(const MissionCommand& from);
  MissionCommand(MissionCommand&& from) noexcept
    : MissionCommand() {
    *this = ::std::move(from);
  }

  inline MissionCommand& operator=(const MissionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionCommand& operator=(MissionCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionCommand& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceCommandTypeCase {
    kAutonomyCommand = 2,
    DEVICECOMMANDTYPE_NOT_SET = 0,
  };

  static inline const MissionCommand* internal_default_instance() {
    return reinterpret_cast<const MissionCommand*>(
               &_MissionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MissionCommand& a, MissionCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionCommand* New() const final {
    return new MissionCommand();
  }

  MissionCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.MissionCommand";
  }
  protected:
  explicit MissionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAutonomyCommandFieldNumber = 2,
  };
  // .MissionModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::MissionModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Device* release_device();
  ::MissionModule::Device* mutable_device();
  void set_allocated_device(::MissionModule::Device* device);
  private:
  const ::MissionModule::Device& _internal_device() const;
  ::MissionModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::MissionModule::Device* device);
  ::MissionModule::Device* unsafe_arena_release_device();

  // .MissionModule.AutonomyCommand autonomyCommand = 2;
  bool has_autonomycommand() const;
  private:
  bool _internal_has_autonomycommand() const;
  public:
  void clear_autonomycommand();
  const ::MissionModule::AutonomyCommand& autonomycommand() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::AutonomyCommand* release_autonomycommand();
  ::MissionModule::AutonomyCommand* mutable_autonomycommand();
  void set_allocated_autonomycommand(::MissionModule::AutonomyCommand* autonomycommand);
  private:
  const ::MissionModule::AutonomyCommand& _internal_autonomycommand() const;
  ::MissionModule::AutonomyCommand* _internal_mutable_autonomycommand();
  public:
  void unsafe_arena_set_allocated_autonomycommand(
      ::MissionModule::AutonomyCommand* autonomycommand);
  ::MissionModule::AutonomyCommand* unsafe_arena_release_autonomycommand();

  void clear_DeviceCommandType();
  DeviceCommandTypeCase DeviceCommandType_case() const;
  // @@protoc_insertion_point(class_scope:MissionModule.MissionCommand)
 private:
  class _Internal;
  void set_has_autonomycommand();

  inline bool has_DeviceCommandType() const;
  inline void clear_has_DeviceCommandType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MissionModule::Device* device_;
  union DeviceCommandTypeUnion {
    constexpr DeviceCommandTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::AutonomyCommand* autonomycommand_;
  } DeviceCommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class MissionError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.MissionError) */ {
 public:
  inline MissionError() : MissionError(nullptr) {}
  ~MissionError() override;
  explicit constexpr MissionError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissionError(const MissionError& from);
  MissionError(MissionError&& from) noexcept
    : MissionError() {
    *this = ::std::move(from);
  }

  inline MissionError& operator=(const MissionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionError& operator=(MissionError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissionError& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceErrorTypeCase {
    kAutonomyError = 2,
    DEVICEERRORTYPE_NOT_SET = 0,
  };

  static inline const MissionError* internal_default_instance() {
    return reinterpret_cast<const MissionError*>(
               &_MissionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MissionError& a, MissionError& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionError* New() const final {
    return new MissionError();
  }

  MissionError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissionError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissionError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.MissionError";
  }
  protected:
  explicit MissionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAutonomyErrorFieldNumber = 2,
  };
  // .MissionModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::MissionModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Device* release_device();
  ::MissionModule::Device* mutable_device();
  void set_allocated_device(::MissionModule::Device* device);
  private:
  const ::MissionModule::Device& _internal_device() const;
  ::MissionModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::MissionModule::Device* device);
  ::MissionModule::Device* unsafe_arena_release_device();

  // .MissionModule.AutonomyError autonomyError = 2;
  bool has_autonomyerror() const;
  private:
  bool _internal_has_autonomyerror() const;
  public:
  void clear_autonomyerror();
  const ::MissionModule::AutonomyError& autonomyerror() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::AutonomyError* release_autonomyerror();
  ::MissionModule::AutonomyError* mutable_autonomyerror();
  void set_allocated_autonomyerror(::MissionModule::AutonomyError* autonomyerror);
  private:
  const ::MissionModule::AutonomyError& _internal_autonomyerror() const;
  ::MissionModule::AutonomyError* _internal_mutable_autonomyerror();
  public:
  void unsafe_arena_set_allocated_autonomyerror(
      ::MissionModule::AutonomyError* autonomyerror);
  ::MissionModule::AutonomyError* unsafe_arena_release_autonomyerror();

  void clear_DeviceErrorType();
  DeviceErrorTypeCase DeviceErrorType_case() const;
  // @@protoc_insertion_point(class_scope:MissionModule.MissionError)
 private:
  class _Internal;
  void set_has_autonomyerror();

  inline bool has_DeviceErrorType() const;
  inline void clear_has_DeviceErrorType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MissionModule::Device* device_;
  union DeviceErrorTypeUnion {
    constexpr DeviceErrorTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::MissionModule::AutonomyError* autonomyerror_;
  } DeviceErrorType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return new Device();
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Device_Module Module;
  static constexpr Module RESERVED_MODULE =
    Device_Module_RESERVED_MODULE;
  static constexpr Module MISSION_MODULE =
    Device_Module_MISSION_MODULE;
  static inline bool Module_IsValid(int value) {
    return Device_Module_IsValid(value);
  }
  static constexpr Module Module_MIN =
    Device_Module_Module_MIN;
  static constexpr Module Module_MAX =
    Device_Module_Module_MAX;
  static constexpr int Module_ARRAYSIZE =
    Device_Module_Module_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Module_descriptor() {
    return Device_Module_descriptor();
  }
  template<typename T>
  static inline const std::string& Module_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Module>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Module_Name.");
    return Device_Module_Name(enum_t_value);
  }
  static inline bool Module_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Module* value) {
    return Device_Module_Parse(name, value);
  }

  typedef Device_DeviceType DeviceType;
  static constexpr DeviceType AUTONOMY =
    Device_DeviceType_AUTONOMY;
  static inline bool DeviceType_IsValid(int value) {
    return Device_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    Device_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    Device_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return Device_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return Device_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceType* value) {
    return Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kModuleFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
  };
  // string deviceName = 3;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_MUST_USE_RESULT std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // .MissionModule.Device.Module module = 1;
  void clear_module();
  ::MissionModule::Device_Module module() const;
  void set_module(::MissionModule::Device_Module value);
  private:
  ::MissionModule::Device_Module _internal_module() const;
  void _internal_set_module(::MissionModule::Device_Module value);
  public:

  // .MissionModule.Device.DeviceType deviceType = 2;
  void clear_devicetype();
  ::MissionModule::Device_DeviceType devicetype() const;
  void set_devicetype(::MissionModule::Device_DeviceType value);
  private:
  ::MissionModule::Device_DeviceType _internal_devicetype() const;
  void _internal_set_devicetype(::MissionModule::Device_DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  int module_;
  int devicetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyStatus_Telemetry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyStatus.Telemetry) */ {
 public:
  inline AutonomyStatus_Telemetry() : AutonomyStatus_Telemetry(nullptr) {}
  ~AutonomyStatus_Telemetry() override;
  explicit constexpr AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyStatus_Telemetry(const AutonomyStatus_Telemetry& from);
  AutonomyStatus_Telemetry(AutonomyStatus_Telemetry&& from) noexcept
    : AutonomyStatus_Telemetry() {
    *this = ::std::move(from);
  }

  inline AutonomyStatus_Telemetry& operator=(const AutonomyStatus_Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyStatus_Telemetry& operator=(AutonomyStatus_Telemetry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyStatus_Telemetry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyStatus_Telemetry* internal_default_instance() {
    return reinterpret_cast<const AutonomyStatus_Telemetry*>(
               &_AutonomyStatus_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AutonomyStatus_Telemetry& a, AutonomyStatus_Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyStatus_Telemetry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyStatus_Telemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutonomyStatus_Telemetry* New() const final {
    return new AutonomyStatus_Telemetry();
  }

  AutonomyStatus_Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutonomyStatus_Telemetry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyStatus_Telemetry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutonomyStatus_Telemetry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyStatus_Telemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyStatus.Telemetry";
  }
  protected:
  explicit AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kSpeedFieldNumber = 1,
    kFuelFieldNumber = 2,
  };
  // .MissionModule.Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MissionModule::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Position* release_position();
  ::MissionModule::Position* mutable_position();
  void set_allocated_position(::MissionModule::Position* position);
  private:
  const ::MissionModule::Position& _internal_position() const;
  ::MissionModule::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::MissionModule::Position* position);
  ::MissionModule::Position* unsafe_arena_release_position();

  // double speed = 1;
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // double fuel = 2;
  void clear_fuel();
  double fuel() const;
  void set_fuel(double value);
  private:
  double _internal_fuel() const;
  void _internal_set_fuel(double value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyStatus.Telemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MissionModule::Position* position_;
  double speed_;
  double fuel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyStatus) */ {
 public:
  inline AutonomyStatus() : AutonomyStatus(nullptr) {}
  ~AutonomyStatus() override;
  explicit constexpr AutonomyStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyStatus(const AutonomyStatus& from);
  AutonomyStatus(AutonomyStatus&& from) noexcept
    : AutonomyStatus() {
    *this = ::std::move(from);
  }

  inline AutonomyStatus& operator=(const AutonomyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyStatus& operator=(AutonomyStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyStatus* internal_default_instance() {
    return reinterpret_cast<const AutonomyStatus*>(
               &_AutonomyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutonomyStatus& a, AutonomyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutonomyStatus* New() const final {
    return new AutonomyStatus();
  }

  AutonomyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutonomyStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutonomyStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyStatus";
  }
  protected:
  explicit AutonomyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AutonomyStatus_Telemetry Telemetry;

  typedef AutonomyStatus_State State;
  static constexpr State IDLE =
    AutonomyStatus_State_IDLE;
  static constexpr State DRIVE =
    AutonomyStatus_State_DRIVE;
  static constexpr State IN_STOP =
    AutonomyStatus_State_IN_STOP;
  static constexpr State OBSTACLE =
    AutonomyStatus_State_OBSTACLE;
  static constexpr State ERROR =
    AutonomyStatus_State_ERROR;
  static inline bool State_IsValid(int value) {
    return AutonomyStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    AutonomyStatus_State_State_MIN;
  static constexpr State State_MAX =
    AutonomyStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    AutonomyStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return AutonomyStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return AutonomyStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return AutonomyStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTelemetryFieldNumber = 1,
    kNextStopFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::MissionModule::AutonomyStatus_Telemetry& telemetry() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::AutonomyStatus_Telemetry* release_telemetry();
  ::MissionModule::AutonomyStatus_Telemetry* mutable_telemetry();
  void set_allocated_telemetry(::MissionModule::AutonomyStatus_Telemetry* telemetry);
  private:
  const ::MissionModule::AutonomyStatus_Telemetry& _internal_telemetry() const;
  ::MissionModule::AutonomyStatus_Telemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::MissionModule::AutonomyStatus_Telemetry* telemetry);
  ::MissionModule::AutonomyStatus_Telemetry* unsafe_arena_release_telemetry();

  // optional .MissionModule.Station nextStop = 3;
  bool has_nextstop() const;
  private:
  bool _internal_has_nextstop() const;
  public:
  void clear_nextstop();
  const ::MissionModule::Station& nextstop() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Station* release_nextstop();
  ::MissionModule::Station* mutable_nextstop();
  void set_allocated_nextstop(::MissionModule::Station* nextstop);
  private:
  const ::MissionModule::Station& _internal_nextstop() const;
  ::MissionModule::Station* _internal_mutable_nextstop();
  public:
  void unsafe_arena_set_allocated_nextstop(
      ::MissionModule::Station* nextstop);
  ::MissionModule::Station* unsafe_arena_release_nextstop();

  // .MissionModule.AutonomyStatus.State state = 2;
  void clear_state();
  ::MissionModule::AutonomyStatus_State state() const;
  void set_state(::MissionModule::AutonomyStatus_State value);
  private:
  ::MissionModule::AutonomyStatus_State _internal_state() const;
  void _internal_set_state(::MissionModule::AutonomyStatus_State value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::MissionModule::AutonomyStatus_Telemetry* telemetry_;
  ::MissionModule::Station* nextstop_;
  int state_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyCommand) */ {
 public:
  inline AutonomyCommand() : AutonomyCommand(nullptr) {}
  ~AutonomyCommand() override;
  explicit constexpr AutonomyCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyCommand(const AutonomyCommand& from);
  AutonomyCommand(AutonomyCommand&& from) noexcept
    : AutonomyCommand() {
    *this = ::std::move(from);
  }

  inline AutonomyCommand& operator=(const AutonomyCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyCommand& operator=(AutonomyCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyCommand* internal_default_instance() {
    return reinterpret_cast<const AutonomyCommand*>(
               &_AutonomyCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AutonomyCommand& a, AutonomyCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutonomyCommand* New() const final {
    return new AutonomyCommand();
  }

  AutonomyCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutonomyCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutonomyCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyCommand";
  }
  protected:
  explicit AutonomyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AutonomyCommand_Action Action;
  static constexpr Action NO_ACTION =
    AutonomyCommand_Action_NO_ACTION;
  static constexpr Action STOP =
    AutonomyCommand_Action_STOP;
  static constexpr Action START =
    AutonomyCommand_Action_START;
  static inline bool Action_IsValid(int value) {
    return AutonomyCommand_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    AutonomyCommand_Action_Action_MIN;
  static constexpr Action Action_MAX =
    AutonomyCommand_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    AutonomyCommand_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return AutonomyCommand_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return AutonomyCommand_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return AutonomyCommand_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kRouteFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // repeated .MissionModule.Station stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::MissionModule::Station* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
      mutable_stops();
  private:
  const ::MissionModule::Station& _internal_stops(int index) const;
  ::MissionModule::Station* _internal_add_stops();
  public:
  const ::MissionModule::Station& stops(int index) const;
  ::MissionModule::Station* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
      stops() const;

  // string route = 2;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_MUST_USE_RESULT std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // .MissionModule.AutonomyCommand.Action action = 3;
  void clear_action();
  ::MissionModule::AutonomyCommand_Action action() const;
  void set_action(::MissionModule::AutonomyCommand_Action value);
  private:
  ::MissionModule::AutonomyCommand_Action _internal_action() const;
  void _internal_set_action(::MissionModule::AutonomyCommand_Action value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station > stops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class AutonomyError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.AutonomyError) */ {
 public:
  inline AutonomyError() : AutonomyError(nullptr) {}
  ~AutonomyError() override;
  explicit constexpr AutonomyError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutonomyError(const AutonomyError& from);
  AutonomyError(AutonomyError&& from) noexcept
    : AutonomyError() {
    *this = ::std::move(from);
  }

  inline AutonomyError& operator=(const AutonomyError& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutonomyError& operator=(AutonomyError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutonomyError& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutonomyError* internal_default_instance() {
    return reinterpret_cast<const AutonomyError*>(
               &_AutonomyError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AutonomyError& a, AutonomyError& b) {
    a.Swap(&b);
  }
  inline void Swap(AutonomyError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutonomyError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutonomyError* New() const final {
    return new AutonomyError();
  }

  AutonomyError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutonomyError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutonomyError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutonomyError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutonomyError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.AutonomyError";
  }
  protected:
  explicit AutonomyError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinishedStopsFieldNumber = 1,
  };
  // repeated .MissionModule.Station finishedStops = 1;
  int finishedstops_size() const;
  private:
  int _internal_finishedstops_size() const;
  public:
  void clear_finishedstops();
  ::MissionModule::Station* mutable_finishedstops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
      mutable_finishedstops();
  private:
  const ::MissionModule::Station& _internal_finishedstops(int index) const;
  ::MissionModule::Station* _internal_add_finishedstops();
  public:
  const ::MissionModule::Station& finishedstops(int index) const;
  ::MissionModule::Station* add_finishedstops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
      finishedstops() const;

  // @@protoc_insertion_point(class_scope:MissionModule.AutonomyError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station > finishedstops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class Station final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.Station) */ {
 public:
  inline Station() : Station(nullptr) {}
  ~Station() override;
  explicit constexpr Station(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Station(const Station& from);
  Station(Station&& from) noexcept
    : Station() {
    *this = ::std::move(from);
  }

  inline Station& operator=(const Station& from) {
    CopyFrom(from);
    return *this;
  }
  inline Station& operator=(Station&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Station& default_instance() {
    return *internal_default_instance();
  }
  static inline const Station* internal_default_instance() {
    return reinterpret_cast<const Station*>(
               &_Station_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Station& a, Station& b) {
    a.Swap(&b);
  }
  inline void Swap(Station* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Station* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Station* New() const final {
    return new Station();
  }

  Station* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Station>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Station& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Station& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Station* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.Station";
  }
  protected:
  explicit Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .MissionModule.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::MissionModule::Position& position() const;
  PROTOBUF_MUST_USE_RESULT ::MissionModule::Position* release_position();
  ::MissionModule::Position* mutable_position();
  void set_allocated_position(::MissionModule::Position* position);
  private:
  const ::MissionModule::Position& _internal_position() const;
  ::MissionModule::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::MissionModule::Position* position);
  ::MissionModule::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:MissionModule.Station)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::MissionModule::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MissionModule.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MissionModule.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:MissionModule.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fMissionModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MissionStatus

// .MissionModule.Device device = 1;
inline bool MissionStatus::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool MissionStatus::has_device() const {
  return _internal_has_device();
}
inline void MissionStatus::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::MissionModule::Device& MissionStatus::_internal_device() const {
  const ::MissionModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Device&>(
      ::MissionModule::_Device_default_instance_);
}
inline const ::MissionModule::Device& MissionStatus::device() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionStatus.device)
  return _internal_device();
}
inline void MissionStatus::unsafe_arena_set_allocated_device(
    ::MissionModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionStatus.device)
}
inline ::MissionModule::Device* MissionStatus::release_device() {
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Device* MissionStatus::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionStatus.device)
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::MissionModule::Device* MissionStatus::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::MissionModule::Device* MissionStatus::mutable_device() {
  ::MissionModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionStatus.device)
  return _msg;
}
inline void MissionStatus::set_allocated_device(::MissionModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionStatus.device)
}

// .MissionModule.AutonomyStatus autonomyStatus = 2;
inline bool MissionStatus::_internal_has_autonomystatus() const {
  return DeviceStatusType_case() == kAutonomyStatus;
}
inline bool MissionStatus::has_autonomystatus() const {
  return _internal_has_autonomystatus();
}
inline void MissionStatus::set_has_autonomystatus() {
  _oneof_case_[0] = kAutonomyStatus;
}
inline void MissionStatus::clear_autonomystatus() {
  if (_internal_has_autonomystatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceStatusType_.autonomystatus_;
    }
    clear_has_DeviceStatusType();
  }
}
inline ::MissionModule::AutonomyStatus* MissionStatus::release_autonomystatus() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionStatus.autonomyStatus)
  if (_internal_has_autonomystatus()) {
    clear_has_DeviceStatusType();
      ::MissionModule::AutonomyStatus* temp = DeviceStatusType_.autonomystatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceStatusType_.autonomystatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::AutonomyStatus& MissionStatus::_internal_autonomystatus() const {
  return _internal_has_autonomystatus()
      ? *DeviceStatusType_.autonomystatus_
      : reinterpret_cast< ::MissionModule::AutonomyStatus&>(::MissionModule::_AutonomyStatus_default_instance_);
}
inline const ::MissionModule::AutonomyStatus& MissionStatus::autonomystatus() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionStatus.autonomyStatus)
  return _internal_autonomystatus();
}
inline ::MissionModule::AutonomyStatus* MissionStatus::unsafe_arena_release_autonomystatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MissionModule.MissionStatus.autonomyStatus)
  if (_internal_has_autonomystatus()) {
    clear_has_DeviceStatusType();
    ::MissionModule::AutonomyStatus* temp = DeviceStatusType_.autonomystatus_;
    DeviceStatusType_.autonomystatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MissionStatus::unsafe_arena_set_allocated_autonomystatus(::MissionModule::AutonomyStatus* autonomystatus) {
  clear_DeviceStatusType();
  if (autonomystatus) {
    set_has_autonomystatus();
    DeviceStatusType_.autonomystatus_ = autonomystatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionStatus.autonomyStatus)
}
inline ::MissionModule::AutonomyStatus* MissionStatus::_internal_mutable_autonomystatus() {
  if (!_internal_has_autonomystatus()) {
    clear_DeviceStatusType();
    set_has_autonomystatus();
    DeviceStatusType_.autonomystatus_ = CreateMaybeMessage< ::MissionModule::AutonomyStatus >(GetArenaForAllocation());
  }
  return DeviceStatusType_.autonomystatus_;
}
inline ::MissionModule::AutonomyStatus* MissionStatus::mutable_autonomystatus() {
  ::MissionModule::AutonomyStatus* _msg = _internal_mutable_autonomystatus();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionStatus.autonomyStatus)
  return _msg;
}

inline bool MissionStatus::has_DeviceStatusType() const {
  return DeviceStatusType_case() != DEVICESTATUSTYPE_NOT_SET;
}
inline void MissionStatus::clear_has_DeviceStatusType() {
  _oneof_case_[0] = DEVICESTATUSTYPE_NOT_SET;
}
inline MissionStatus::DeviceStatusTypeCase MissionStatus::DeviceStatusType_case() const {
  return MissionStatus::DeviceStatusTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MissionCommand

// .MissionModule.Device device = 1;
inline bool MissionCommand::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool MissionCommand::has_device() const {
  return _internal_has_device();
}
inline void MissionCommand::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::MissionModule::Device& MissionCommand::_internal_device() const {
  const ::MissionModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Device&>(
      ::MissionModule::_Device_default_instance_);
}
inline const ::MissionModule::Device& MissionCommand::device() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionCommand.device)
  return _internal_device();
}
inline void MissionCommand::unsafe_arena_set_allocated_device(
    ::MissionModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionCommand.device)
}
inline ::MissionModule::Device* MissionCommand::release_device() {
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Device* MissionCommand::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionCommand.device)
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::MissionModule::Device* MissionCommand::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::MissionModule::Device* MissionCommand::mutable_device() {
  ::MissionModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionCommand.device)
  return _msg;
}
inline void MissionCommand::set_allocated_device(::MissionModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionCommand.device)
}

// .MissionModule.AutonomyCommand autonomyCommand = 2;
inline bool MissionCommand::_internal_has_autonomycommand() const {
  return DeviceCommandType_case() == kAutonomyCommand;
}
inline bool MissionCommand::has_autonomycommand() const {
  return _internal_has_autonomycommand();
}
inline void MissionCommand::set_has_autonomycommand() {
  _oneof_case_[0] = kAutonomyCommand;
}
inline void MissionCommand::clear_autonomycommand() {
  if (_internal_has_autonomycommand()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceCommandType_.autonomycommand_;
    }
    clear_has_DeviceCommandType();
  }
}
inline ::MissionModule::AutonomyCommand* MissionCommand::release_autonomycommand() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionCommand.autonomyCommand)
  if (_internal_has_autonomycommand()) {
    clear_has_DeviceCommandType();
      ::MissionModule::AutonomyCommand* temp = DeviceCommandType_.autonomycommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceCommandType_.autonomycommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::AutonomyCommand& MissionCommand::_internal_autonomycommand() const {
  return _internal_has_autonomycommand()
      ? *DeviceCommandType_.autonomycommand_
      : reinterpret_cast< ::MissionModule::AutonomyCommand&>(::MissionModule::_AutonomyCommand_default_instance_);
}
inline const ::MissionModule::AutonomyCommand& MissionCommand::autonomycommand() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionCommand.autonomyCommand)
  return _internal_autonomycommand();
}
inline ::MissionModule::AutonomyCommand* MissionCommand::unsafe_arena_release_autonomycommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MissionModule.MissionCommand.autonomyCommand)
  if (_internal_has_autonomycommand()) {
    clear_has_DeviceCommandType();
    ::MissionModule::AutonomyCommand* temp = DeviceCommandType_.autonomycommand_;
    DeviceCommandType_.autonomycommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MissionCommand::unsafe_arena_set_allocated_autonomycommand(::MissionModule::AutonomyCommand* autonomycommand) {
  clear_DeviceCommandType();
  if (autonomycommand) {
    set_has_autonomycommand();
    DeviceCommandType_.autonomycommand_ = autonomycommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionCommand.autonomyCommand)
}
inline ::MissionModule::AutonomyCommand* MissionCommand::_internal_mutable_autonomycommand() {
  if (!_internal_has_autonomycommand()) {
    clear_DeviceCommandType();
    set_has_autonomycommand();
    DeviceCommandType_.autonomycommand_ = CreateMaybeMessage< ::MissionModule::AutonomyCommand >(GetArenaForAllocation());
  }
  return DeviceCommandType_.autonomycommand_;
}
inline ::MissionModule::AutonomyCommand* MissionCommand::mutable_autonomycommand() {
  ::MissionModule::AutonomyCommand* _msg = _internal_mutable_autonomycommand();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionCommand.autonomyCommand)
  return _msg;
}

inline bool MissionCommand::has_DeviceCommandType() const {
  return DeviceCommandType_case() != DEVICECOMMANDTYPE_NOT_SET;
}
inline void MissionCommand::clear_has_DeviceCommandType() {
  _oneof_case_[0] = DEVICECOMMANDTYPE_NOT_SET;
}
inline MissionCommand::DeviceCommandTypeCase MissionCommand::DeviceCommandType_case() const {
  return MissionCommand::DeviceCommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MissionError

// .MissionModule.Device device = 1;
inline bool MissionError::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool MissionError::has_device() const {
  return _internal_has_device();
}
inline void MissionError::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::MissionModule::Device& MissionError::_internal_device() const {
  const ::MissionModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Device&>(
      ::MissionModule::_Device_default_instance_);
}
inline const ::MissionModule::Device& MissionError::device() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionError.device)
  return _internal_device();
}
inline void MissionError::unsafe_arena_set_allocated_device(
    ::MissionModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionError.device)
}
inline ::MissionModule::Device* MissionError::release_device() {
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Device* MissionError::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionError.device)
  
  ::MissionModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::MissionModule::Device* MissionError::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::MissionModule::Device* MissionError::mutable_device() {
  ::MissionModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionError.device)
  return _msg;
}
inline void MissionError::set_allocated_device(::MissionModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionError.device)
}

// .MissionModule.AutonomyError autonomyError = 2;
inline bool MissionError::_internal_has_autonomyerror() const {
  return DeviceErrorType_case() == kAutonomyError;
}
inline bool MissionError::has_autonomyerror() const {
  return _internal_has_autonomyerror();
}
inline void MissionError::set_has_autonomyerror() {
  _oneof_case_[0] = kAutonomyError;
}
inline void MissionError::clear_autonomyerror() {
  if (_internal_has_autonomyerror()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceErrorType_.autonomyerror_;
    }
    clear_has_DeviceErrorType();
  }
}
inline ::MissionModule::AutonomyError* MissionError::release_autonomyerror() {
  // @@protoc_insertion_point(field_release:MissionModule.MissionError.autonomyError)
  if (_internal_has_autonomyerror()) {
    clear_has_DeviceErrorType();
      ::MissionModule::AutonomyError* temp = DeviceErrorType_.autonomyerror_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceErrorType_.autonomyerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MissionModule::AutonomyError& MissionError::_internal_autonomyerror() const {
  return _internal_has_autonomyerror()
      ? *DeviceErrorType_.autonomyerror_
      : reinterpret_cast< ::MissionModule::AutonomyError&>(::MissionModule::_AutonomyError_default_instance_);
}
inline const ::MissionModule::AutonomyError& MissionError::autonomyerror() const {
  // @@protoc_insertion_point(field_get:MissionModule.MissionError.autonomyError)
  return _internal_autonomyerror();
}
inline ::MissionModule::AutonomyError* MissionError::unsafe_arena_release_autonomyerror() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MissionModule.MissionError.autonomyError)
  if (_internal_has_autonomyerror()) {
    clear_has_DeviceErrorType();
    ::MissionModule::AutonomyError* temp = DeviceErrorType_.autonomyerror_;
    DeviceErrorType_.autonomyerror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MissionError::unsafe_arena_set_allocated_autonomyerror(::MissionModule::AutonomyError* autonomyerror) {
  clear_DeviceErrorType();
  if (autonomyerror) {
    set_has_autonomyerror();
    DeviceErrorType_.autonomyerror_ = autonomyerror;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.MissionError.autonomyError)
}
inline ::MissionModule::AutonomyError* MissionError::_internal_mutable_autonomyerror() {
  if (!_internal_has_autonomyerror()) {
    clear_DeviceErrorType();
    set_has_autonomyerror();
    DeviceErrorType_.autonomyerror_ = CreateMaybeMessage< ::MissionModule::AutonomyError >(GetArenaForAllocation());
  }
  return DeviceErrorType_.autonomyerror_;
}
inline ::MissionModule::AutonomyError* MissionError::mutable_autonomyerror() {
  ::MissionModule::AutonomyError* _msg = _internal_mutable_autonomyerror();
  // @@protoc_insertion_point(field_mutable:MissionModule.MissionError.autonomyError)
  return _msg;
}

inline bool MissionError::has_DeviceErrorType() const {
  return DeviceErrorType_case() != DEVICEERRORTYPE_NOT_SET;
}
inline void MissionError::clear_has_DeviceErrorType() {
  _oneof_case_[0] = DEVICEERRORTYPE_NOT_SET;
}
inline MissionError::DeviceErrorTypeCase MissionError::DeviceErrorType_case() const {
  return MissionError::DeviceErrorTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Device

// .MissionModule.Device.Module module = 1;
inline void Device::clear_module() {
  module_ = 0;
}
inline ::MissionModule::Device_Module Device::_internal_module() const {
  return static_cast< ::MissionModule::Device_Module >(module_);
}
inline ::MissionModule::Device_Module Device::module() const {
  // @@protoc_insertion_point(field_get:MissionModule.Device.module)
  return _internal_module();
}
inline void Device::_internal_set_module(::MissionModule::Device_Module value) {
  
  module_ = value;
}
inline void Device::set_module(::MissionModule::Device_Module value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:MissionModule.Device.module)
}

// .MissionModule.Device.DeviceType deviceType = 2;
inline void Device::clear_devicetype() {
  devicetype_ = 0;
}
inline ::MissionModule::Device_DeviceType Device::_internal_devicetype() const {
  return static_cast< ::MissionModule::Device_DeviceType >(devicetype_);
}
inline ::MissionModule::Device_DeviceType Device::devicetype() const {
  // @@protoc_insertion_point(field_get:MissionModule.Device.deviceType)
  return _internal_devicetype();
}
inline void Device::_internal_set_devicetype(::MissionModule::Device_DeviceType value) {
  
  devicetype_ = value;
}
inline void Device::set_devicetype(::MissionModule::Device_DeviceType value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:MissionModule.Device.deviceType)
}

// string deviceName = 3;
inline void Device::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& Device::devicename() const {
  // @@protoc_insertion_point(field_get:MissionModule.Device.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MissionModule.Device.deviceName)
}
inline std::string* Device::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:MissionModule.Device.deviceName)
  return _s;
}
inline const std::string& Device::_internal_devicename() const {
  return devicename_.Get();
}
inline void Device::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_devicename() {
  // @@protoc_insertion_point(field_release:MissionModule.Device.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:MissionModule.Device.deviceName)
}

// -------------------------------------------------------------------

// AutonomyStatus_Telemetry

// double speed = 1;
inline void AutonomyStatus_Telemetry::clear_speed() {
  speed_ = 0;
}
inline double AutonomyStatus_Telemetry::_internal_speed() const {
  return speed_;
}
inline double AutonomyStatus_Telemetry::speed() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.speed)
  return _internal_speed();
}
inline void AutonomyStatus_Telemetry::_internal_set_speed(double value) {
  
  speed_ = value;
}
inline void AutonomyStatus_Telemetry::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.Telemetry.speed)
}

// double fuel = 2;
inline void AutonomyStatus_Telemetry::clear_fuel() {
  fuel_ = 0;
}
inline double AutonomyStatus_Telemetry::_internal_fuel() const {
  return fuel_;
}
inline double AutonomyStatus_Telemetry::fuel() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.fuel)
  return _internal_fuel();
}
inline void AutonomyStatus_Telemetry::_internal_set_fuel(double value) {
  
  fuel_ = value;
}
inline void AutonomyStatus_Telemetry::set_fuel(double value) {
  _internal_set_fuel(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.Telemetry.fuel)
}

// .MissionModule.Position position = 3;
inline bool AutonomyStatus_Telemetry::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool AutonomyStatus_Telemetry::has_position() const {
  return _internal_has_position();
}
inline void AutonomyStatus_Telemetry::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::MissionModule::Position& AutonomyStatus_Telemetry::_internal_position() const {
  const ::MissionModule::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Position&>(
      ::MissionModule::_Position_default_instance_);
}
inline const ::MissionModule::Position& AutonomyStatus_Telemetry::position() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.Telemetry.position)
  return _internal_position();
}
inline void AutonomyStatus_Telemetry::unsafe_arena_set_allocated_position(
    ::MissionModule::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.Telemetry.position)
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::release_position() {
  
  ::MissionModule::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.Telemetry.position)
  
  ::MissionModule::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::MissionModule::Position* AutonomyStatus_Telemetry::mutable_position() {
  ::MissionModule::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.Telemetry.position)
  return _msg;
}
inline void AutonomyStatus_Telemetry::set_allocated_position(::MissionModule::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.Telemetry.position)
}

// -------------------------------------------------------------------

// AutonomyStatus

// .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
inline bool AutonomyStatus::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool AutonomyStatus::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void AutonomyStatus::clear_telemetry() {
  if (GetArenaForAllocation() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::MissionModule::AutonomyStatus_Telemetry& AutonomyStatus::_internal_telemetry() const {
  const ::MissionModule::AutonomyStatus_Telemetry* p = telemetry_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::AutonomyStatus_Telemetry&>(
      ::MissionModule::_AutonomyStatus_Telemetry_default_instance_);
}
inline const ::MissionModule::AutonomyStatus_Telemetry& AutonomyStatus::telemetry() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.telemetry)
  return _internal_telemetry();
}
inline void AutonomyStatus::unsafe_arena_set_allocated_telemetry(
    ::MissionModule::AutonomyStatus_Telemetry* telemetry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.telemetry)
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::release_telemetry() {
  
  ::MissionModule::AutonomyStatus_Telemetry* temp = telemetry_;
  telemetry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.telemetry)
  
  ::MissionModule::AutonomyStatus_Telemetry* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::AutonomyStatus_Telemetry>(GetArenaForAllocation());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::MissionModule::AutonomyStatus_Telemetry* AutonomyStatus::mutable_telemetry() {
  ::MissionModule::AutonomyStatus_Telemetry* _msg = _internal_mutable_telemetry();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.telemetry)
  return _msg;
}
inline void AutonomyStatus::set_allocated_telemetry(::MissionModule::AutonomyStatus_Telemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::AutonomyStatus_Telemetry>::GetOwningArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.telemetry)
}

// .MissionModule.AutonomyStatus.State state = 2;
inline void AutonomyStatus::clear_state() {
  state_ = 0;
}
inline ::MissionModule::AutonomyStatus_State AutonomyStatus::_internal_state() const {
  return static_cast< ::MissionModule::AutonomyStatus_State >(state_);
}
inline ::MissionModule::AutonomyStatus_State AutonomyStatus::state() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.state)
  return _internal_state();
}
inline void AutonomyStatus::_internal_set_state(::MissionModule::AutonomyStatus_State value) {
  
  state_ = value;
}
inline void AutonomyStatus::set_state(::MissionModule::AutonomyStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyStatus.state)
}

// optional .MissionModule.Station nextStop = 3;
inline bool AutonomyStatus::_internal_has_nextstop() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || nextstop_ != nullptr);
  return value;
}
inline bool AutonomyStatus::has_nextstop() const {
  return _internal_has_nextstop();
}
inline void AutonomyStatus::clear_nextstop() {
  if (nextstop_ != nullptr) nextstop_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::MissionModule::Station& AutonomyStatus::_internal_nextstop() const {
  const ::MissionModule::Station* p = nextstop_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Station&>(
      ::MissionModule::_Station_default_instance_);
}
inline const ::MissionModule::Station& AutonomyStatus::nextstop() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyStatus.nextStop)
  return _internal_nextstop();
}
inline void AutonomyStatus::unsafe_arena_set_allocated_nextstop(
    ::MissionModule::Station* nextstop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nextstop_);
  }
  nextstop_ = nextstop;
  if (nextstop) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.AutonomyStatus.nextStop)
}
inline ::MissionModule::Station* AutonomyStatus::release_nextstop() {
  _has_bits_[0] &= ~0x00000001u;
  ::MissionModule::Station* temp = nextstop_;
  nextstop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Station* AutonomyStatus::unsafe_arena_release_nextstop() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyStatus.nextStop)
  _has_bits_[0] &= ~0x00000001u;
  ::MissionModule::Station* temp = nextstop_;
  nextstop_ = nullptr;
  return temp;
}
inline ::MissionModule::Station* AutonomyStatus::_internal_mutable_nextstop() {
  _has_bits_[0] |= 0x00000001u;
  if (nextstop_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Station>(GetArenaForAllocation());
    nextstop_ = p;
  }
  return nextstop_;
}
inline ::MissionModule::Station* AutonomyStatus::mutable_nextstop() {
  ::MissionModule::Station* _msg = _internal_mutable_nextstop();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyStatus.nextStop)
  return _msg;
}
inline void AutonomyStatus::set_allocated_nextstop(::MissionModule::Station* nextstop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nextstop_;
  }
  if (nextstop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Station>::GetOwningArena(nextstop);
    if (message_arena != submessage_arena) {
      nextstop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nextstop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nextstop_ = nextstop;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyStatus.nextStop)
}

// -------------------------------------------------------------------

// AutonomyCommand

// repeated .MissionModule.Station stops = 1;
inline int AutonomyCommand::_internal_stops_size() const {
  return stops_.size();
}
inline int AutonomyCommand::stops_size() const {
  return _internal_stops_size();
}
inline void AutonomyCommand::clear_stops() {
  stops_.Clear();
}
inline ::MissionModule::Station* AutonomyCommand::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyCommand.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
AutonomyCommand::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:MissionModule.AutonomyCommand.stops)
  return &stops_;
}
inline const ::MissionModule::Station& AutonomyCommand::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::MissionModule::Station& AutonomyCommand::stops(int index) const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.stops)
  return _internal_stops(index);
}
inline ::MissionModule::Station* AutonomyCommand::_internal_add_stops() {
  return stops_.Add();
}
inline ::MissionModule::Station* AutonomyCommand::add_stops() {
  ::MissionModule::Station* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:MissionModule.AutonomyCommand.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
AutonomyCommand::stops() const {
  // @@protoc_insertion_point(field_list:MissionModule.AutonomyCommand.stops)
  return stops_;
}

// string route = 2;
inline void AutonomyCommand::clear_route() {
  route_.ClearToEmpty();
}
inline const std::string& AutonomyCommand::route() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutonomyCommand::set_route(ArgT0&& arg0, ArgT... args) {
 
 route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyCommand.route)
}
inline std::string* AutonomyCommand::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyCommand.route)
  return _s;
}
inline const std::string& AutonomyCommand::_internal_route() const {
  return route_.Get();
}
inline void AutonomyCommand::_internal_set_route(const std::string& value) {
  
  route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AutonomyCommand::_internal_mutable_route() {
  
  return route_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AutonomyCommand::release_route() {
  // @@protoc_insertion_point(field_release:MissionModule.AutonomyCommand.route)
  return route_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AutonomyCommand::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  route_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:MissionModule.AutonomyCommand.route)
}

// .MissionModule.AutonomyCommand.Action action = 3;
inline void AutonomyCommand::clear_action() {
  action_ = 0;
}
inline ::MissionModule::AutonomyCommand_Action AutonomyCommand::_internal_action() const {
  return static_cast< ::MissionModule::AutonomyCommand_Action >(action_);
}
inline ::MissionModule::AutonomyCommand_Action AutonomyCommand::action() const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyCommand.action)
  return _internal_action();
}
inline void AutonomyCommand::_internal_set_action(::MissionModule::AutonomyCommand_Action value) {
  
  action_ = value;
}
inline void AutonomyCommand::set_action(::MissionModule::AutonomyCommand_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:MissionModule.AutonomyCommand.action)
}

// -------------------------------------------------------------------

// AutonomyError

// repeated .MissionModule.Station finishedStops = 1;
inline int AutonomyError::_internal_finishedstops_size() const {
  return finishedstops_.size();
}
inline int AutonomyError::finishedstops_size() const {
  return _internal_finishedstops_size();
}
inline void AutonomyError::clear_finishedstops() {
  finishedstops_.Clear();
}
inline ::MissionModule::Station* AutonomyError::mutable_finishedstops(int index) {
  // @@protoc_insertion_point(field_mutable:MissionModule.AutonomyError.finishedStops)
  return finishedstops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >*
AutonomyError::mutable_finishedstops() {
  // @@protoc_insertion_point(field_mutable_list:MissionModule.AutonomyError.finishedStops)
  return &finishedstops_;
}
inline const ::MissionModule::Station& AutonomyError::_internal_finishedstops(int index) const {
  return finishedstops_.Get(index);
}
inline const ::MissionModule::Station& AutonomyError::finishedstops(int index) const {
  // @@protoc_insertion_point(field_get:MissionModule.AutonomyError.finishedStops)
  return _internal_finishedstops(index);
}
inline ::MissionModule::Station* AutonomyError::_internal_add_finishedstops() {
  return finishedstops_.Add();
}
inline ::MissionModule::Station* AutonomyError::add_finishedstops() {
  ::MissionModule::Station* _add = _internal_add_finishedstops();
  // @@protoc_insertion_point(field_add:MissionModule.AutonomyError.finishedStops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MissionModule::Station >&
AutonomyError::finishedstops() const {
  // @@protoc_insertion_point(field_list:MissionModule.AutonomyError.finishedStops)
  return finishedstops_;
}

// -------------------------------------------------------------------

// Station

// string name = 1;
inline void Station::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Station::name() const {
  // @@protoc_insertion_point(field_get:MissionModule.Station.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Station::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MissionModule.Station.name)
}
inline std::string* Station::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MissionModule.Station.name)
  return _s;
}
inline const std::string& Station::_internal_name() const {
  return name_.Get();
}
inline void Station::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Station::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Station::release_name() {
  // @@protoc_insertion_point(field_release:MissionModule.Station.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Station::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:MissionModule.Station.name)
}

// .MissionModule.Position position = 2;
inline bool Station::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Station::has_position() const {
  return _internal_has_position();
}
inline void Station::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::MissionModule::Position& Station::_internal_position() const {
  const ::MissionModule::Position* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::MissionModule::Position&>(
      ::MissionModule::_Position_default_instance_);
}
inline const ::MissionModule::Position& Station::position() const {
  // @@protoc_insertion_point(field_get:MissionModule.Station.position)
  return _internal_position();
}
inline void Station::unsafe_arena_set_allocated_position(
    ::MissionModule::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MissionModule.Station.position)
}
inline ::MissionModule::Position* Station::release_position() {
  
  ::MissionModule::Position* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MissionModule::Position* Station::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:MissionModule.Station.position)
  
  ::MissionModule::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::MissionModule::Position* Station::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::MissionModule::Position>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::MissionModule::Position* Station::mutable_position() {
  ::MissionModule::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:MissionModule.Station.position)
  return _msg;
}
inline void Station::set_allocated_position(::MissionModule::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::Position>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:MissionModule.Station.position)
}

// -------------------------------------------------------------------

// Position

// double latitude = 1;
inline void Position::clear_latitude() {
  latitude_ = 0;
}
inline double Position::_internal_latitude() const {
  return latitude_;
}
inline double Position::latitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.latitude)
  return _internal_latitude();
}
inline void Position::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Position::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.latitude)
}

// double longitude = 2;
inline void Position::clear_longitude() {
  longitude_ = 0;
}
inline double Position::_internal_longitude() const {
  return longitude_;
}
inline double Position::longitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.longitude)
  return _internal_longitude();
}
inline void Position::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Position::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.longitude)
}

// double altitude = 3;
inline void Position::clear_altitude() {
  altitude_ = 0;
}
inline double Position::_internal_altitude() const {
  return altitude_;
}
inline double Position::altitude() const {
  // @@protoc_insertion_point(field_get:MissionModule.Position.altitude)
  return _internal_altitude();
}
inline void Position::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void Position::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:MissionModule.Position.altitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MissionModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MissionModule::Device_Module> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::Device_Module>() {
  return ::MissionModule::Device_Module_descriptor();
}
template <> struct is_proto_enum< ::MissionModule::Device_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::Device_DeviceType>() {
  return ::MissionModule::Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::MissionModule::AutonomyStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::AutonomyStatus_State>() {
  return ::MissionModule::AutonomyStatus_State_descriptor();
}
template <> struct is_proto_enum< ::MissionModule::AutonomyCommand_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MissionModule::AutonomyCommand_Action>() {
  return ::MissionModule::AutonomyCommand_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fMissionModule_2eproto
