// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/MissionModule.proto

#include "modules/MissionModule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace MissionModule {
constexpr MissionStatus::MissionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct MissionStatusDefaultTypeInternal {
  constexpr MissionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionStatusDefaultTypeInternal() {}
  union {
    MissionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionStatusDefaultTypeInternal _MissionStatus_default_instance_;
constexpr MissionCommand::MissionCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct MissionCommandDefaultTypeInternal {
  constexpr MissionCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionCommandDefaultTypeInternal() {}
  union {
    MissionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionCommandDefaultTypeInternal _MissionCommand_default_instance_;
constexpr MissionError::MissionError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct MissionErrorDefaultTypeInternal {
  constexpr MissionErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissionErrorDefaultTypeInternal() {}
  union {
    MissionError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissionErrorDefaultTypeInternal _MissionError_default_instance_;
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(0)

  , devicetype_(0)
{}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , speed_(0)
  , fuel_(0){}
struct AutonomyStatus_TelemetryDefaultTypeInternal {
  constexpr AutonomyStatus_TelemetryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutonomyStatus_TelemetryDefaultTypeInternal() {}
  union {
    AutonomyStatus_Telemetry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutonomyStatus_TelemetryDefaultTypeInternal _AutonomyStatus_Telemetry_default_instance_;
constexpr AutonomyStatus::AutonomyStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_(nullptr)
  , nextstop_(nullptr)
  , state_(0)
{}
struct AutonomyStatusDefaultTypeInternal {
  constexpr AutonomyStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutonomyStatusDefaultTypeInternal() {}
  union {
    AutonomyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutonomyStatusDefaultTypeInternal _AutonomyStatus_default_instance_;
constexpr AutonomyCommand::AutonomyCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , route_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(0)
{}
struct AutonomyCommandDefaultTypeInternal {
  constexpr AutonomyCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutonomyCommandDefaultTypeInternal() {}
  union {
    AutonomyCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutonomyCommandDefaultTypeInternal _AutonomyCommand_default_instance_;
constexpr AutonomyError::AutonomyError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : finishedstops_(){}
struct AutonomyErrorDefaultTypeInternal {
  constexpr AutonomyErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutonomyErrorDefaultTypeInternal() {}
  union {
    AutonomyError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutonomyErrorDefaultTypeInternal _AutonomyError_default_instance_;
constexpr Station::Station(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr){}
struct StationDefaultTypeInternal {
  constexpr StationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StationDefaultTypeInternal() {}
  union {
    Station _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StationDefaultTypeInternal _Station_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , altitude_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace MissionModule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fMissionModule_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fMissionModule_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fMissionModule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fMissionModule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionStatus, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionStatus, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionStatus, DeviceStatusType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionCommand, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionCommand, DeviceCommandType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionError, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionError, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionError, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::MissionModule::MissionError, DeviceErrorType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Device, module_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Device, devicetype_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Device, devicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, speed_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, fuel_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus_Telemetry, position_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, telemetry_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, state_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyStatus, nextstop_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, stops_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, route_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyCommand, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::AutonomyError, finishedstops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, name_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Station, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::MissionModule::Position, altitude_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MissionModule::MissionStatus)},
  { 8, -1, sizeof(::MissionModule::MissionCommand)},
  { 16, -1, sizeof(::MissionModule::MissionError)},
  { 24, -1, sizeof(::MissionModule::Device)},
  { 32, -1, sizeof(::MissionModule::AutonomyStatus_Telemetry)},
  { 40, 48, sizeof(::MissionModule::AutonomyStatus)},
  { 51, -1, sizeof(::MissionModule::AutonomyCommand)},
  { 59, -1, sizeof(::MissionModule::AutonomyError)},
  { 65, -1, sizeof(::MissionModule::Station)},
  { 72, -1, sizeof(::MissionModule::Position)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_MissionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_MissionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_MissionError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_AutonomyStatus_Telemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_AutonomyStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_AutonomyCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_AutonomyError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_Station_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MissionModule::_Position_default_instance_),
};

const char descriptor_table_protodef_modules_2fMissionModule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033modules/MissionModule.proto\022\rMissionMo"
  "dule\"\203\001\n\rMissionStatus\022%\n\006device\030\001 \001(\0132\025"
  ".MissionModule.Device\0227\n\016autonomyStatus\030"
  "\002 \001(\0132\035.MissionModule.AutonomyStatusH\000B\022"
  "\n\020DeviceStatusType\"\207\001\n\016MissionCommand\022%\n"
  "\006device\030\001 \001(\0132\025.MissionModule.Device\0229\n\017"
  "autonomyCommand\030\002 \001(\0132\036.MissionModule.Au"
  "tonomyCommandH\000B\023\n\021DeviceCommandType\"\177\n\014"
  "MissionError\022%\n\006device\030\001 \001(\0132\025.MissionMo"
  "dule.Device\0225\n\rautonomyError\030\002 \001(\0132\034.Mis"
  "sionModule.AutonomyErrorH\000B\021\n\017DeviceErro"
  "rType\"\317\001\n\006Device\022,\n\006module\030\001 \001(\0162\034.Missi"
  "onModule.Device.Module\0224\n\ndeviceType\030\002 \001"
  "(\0162 .MissionModule.Device.DeviceType\022\022\n\n"
  "deviceName\030\003 \001(\t\"1\n\006Module\022\023\n\017RESERVED_M"
  "ODULE\020\000\022\022\n\016MISSION_MODULE\020\001\"\032\n\nDeviceTyp"
  "e\022\014\n\010AUTONOMY\020\000\"\325\002\n\016AutonomyStatus\022:\n\tte"
  "lemetry\030\001 \001(\0132\'.MissionModule.AutonomySt"
  "atus.Telemetry\0222\n\005state\030\002 \001(\0162#.MissionM"
  "odule.AutonomyStatus.State\022-\n\010nextStop\030\003"
  " \001(\0132\026.MissionModule.StationH\000\210\001\001\032S\n\tTel"
  "emetry\022\r\n\005speed\030\001 \001(\001\022\014\n\004fuel\030\002 \001(\001\022)\n\010p"
  "osition\030\003 \001(\0132\027.MissionModule.Position\"B"
  "\n\005State\022\010\n\004IDLE\020\000\022\t\n\005DRIVE\020\001\022\013\n\007IN_STOP\020"
  "\002\022\014\n\010OBSTACLE\020\003\022\t\n\005ERROR\020\004B\013\n\t_nextStop\""
  "\254\001\n\017AutonomyCommand\022%\n\005stops\030\001 \003(\0132\026.Mis"
  "sionModule.Station\022\r\n\005route\030\002 \001(\t\0225\n\006act"
  "ion\030\003 \001(\0162%.MissionModule.AutonomyComman"
  "d.Action\",\n\006Action\022\r\n\tNO_ACTION\020\000\022\010\n\004STO"
  "P\020\001\022\t\n\005START\020\002\">\n\rAutonomyError\022-\n\rfinis"
  "hedStops\030\001 \003(\0132\026.MissionModule.Station\"B"
  "\n\007Station\022\014\n\004name\030\001 \001(\t\022)\n\010position\030\002 \001("
  "\0132\027.MissionModule.Position\"A\n\010Position\022\020"
  "\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010a"
  "ltitude\030\003 \001(\001B>Z!../internal/pkg/ba_prot"
  "o;ba_proto\252\002\030Google.Protobuf.ba_protob\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fMissionModule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fMissionModule_2eproto = {
  false, false, 1445, descriptor_table_protodef_modules_2fMissionModule_2eproto, "modules/MissionModule.proto", 
  &descriptor_table_modules_2fMissionModule_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_modules_2fMissionModule_2eproto::offsets,
  file_level_metadata_modules_2fMissionModule_2eproto, file_level_enum_descriptors_modules_2fMissionModule_2eproto, file_level_service_descriptors_modules_2fMissionModule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fMissionModule_2eproto_getter() {
  return &descriptor_table_modules_2fMissionModule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fMissionModule_2eproto(&descriptor_table_modules_2fMissionModule_2eproto);
namespace MissionModule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[0];
}
bool Device_Module_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_Module Device::RESERVED_MODULE;
constexpr Device_Module Device::MISSION_MODULE;
constexpr Device_Module Device::Module_MIN;
constexpr Device_Module Device::Module_MAX;
constexpr int Device::Module_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[1];
}
bool Device_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_DeviceType Device::AUTONOMY;
constexpr Device_DeviceType Device::DeviceType_MIN;
constexpr Device_DeviceType Device::DeviceType_MAX;
constexpr int Device::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[2];
}
bool AutonomyStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutonomyStatus_State AutonomyStatus::IDLE;
constexpr AutonomyStatus_State AutonomyStatus::DRIVE;
constexpr AutonomyStatus_State AutonomyStatus::IN_STOP;
constexpr AutonomyStatus_State AutonomyStatus::OBSTACLE;
constexpr AutonomyStatus_State AutonomyStatus::ERROR;
constexpr AutonomyStatus_State AutonomyStatus::State_MIN;
constexpr AutonomyStatus_State AutonomyStatus::State_MAX;
constexpr int AutonomyStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutonomyCommand_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fMissionModule_2eproto);
  return file_level_enum_descriptors_modules_2fMissionModule_2eproto[3];
}
bool AutonomyCommand_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutonomyCommand_Action AutonomyCommand::NO_ACTION;
constexpr AutonomyCommand_Action AutonomyCommand::STOP;
constexpr AutonomyCommand_Action AutonomyCommand::START;
constexpr AutonomyCommand_Action AutonomyCommand::Action_MIN;
constexpr AutonomyCommand_Action AutonomyCommand::Action_MAX;
constexpr int AutonomyCommand::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MissionStatus::_Internal {
 public:
  static const ::MissionModule::Device& device(const MissionStatus* msg);
  static const ::MissionModule::AutonomyStatus& autonomystatus(const MissionStatus* msg);
};

const ::MissionModule::Device&
MissionStatus::_Internal::device(const MissionStatus* msg) {
  return *msg->device_;
}
const ::MissionModule::AutonomyStatus&
MissionStatus::_Internal::autonomystatus(const MissionStatus* msg) {
  return *msg->DeviceStatusType_.autonomystatus_;
}
void MissionStatus::set_allocated_autonomystatus(::MissionModule::AutonomyStatus* autonomystatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (autonomystatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::AutonomyStatus>::GetOwningArena(autonomystatus);
    if (message_arena != submessage_arena) {
      autonomystatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autonomystatus, submessage_arena);
    }
    set_has_autonomystatus();
    DeviceStatusType_.autonomystatus_ = autonomystatus;
  }
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionStatus.autonomyStatus)
}
MissionStatus::MissionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.MissionStatus)
}
MissionStatus::MissionStatus(const MissionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::MissionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceStatusType();
  switch (from.DeviceStatusType_case()) {
    case kAutonomyStatus: {
      _internal_mutable_autonomystatus()->::MissionModule::AutonomyStatus::MergeFrom(from._internal_autonomystatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MissionModule.MissionStatus)
}

inline void MissionStatus::SharedCtor() {
device_ = nullptr;
clear_has_DeviceStatusType();
}

MissionStatus::~MissionStatus() {
  // @@protoc_insertion_point(destructor:MissionModule.MissionStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MissionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceStatusType()) {
    clear_DeviceStatusType();
  }
}

void MissionStatus::ArenaDtor(void* object) {
  MissionStatus* _this = reinterpret_cast< MissionStatus* >(object);
  (void)_this;
}
void MissionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionStatus::clear_DeviceStatusType() {
// @@protoc_insertion_point(one_of_clear_start:MissionModule.MissionStatus)
  switch (DeviceStatusType_case()) {
    case kAutonomyStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.autonomystatus_;
      }
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICESTATUSTYPE_NOT_SET;
}


void MissionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.MissionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceStatusType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.AutonomyStatus autonomyStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_autonomystatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.MissionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .MissionModule.AutonomyStatus autonomyStatus = 2;
  if (_internal_has_autonomystatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::autonomystatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.MissionStatus)
  return target;
}

size_t MissionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.MissionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceStatusType_case()) {
    // .MissionModule.AutonomyStatus autonomyStatus = 2;
    case kAutonomyStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.autonomystatus_);
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MissionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissionStatus::GetClassData() const { return &_class_data_; }

void MissionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MissionStatus *>(to)->MergeFrom(
      static_cast<const MissionStatus &>(from));
}


void MissionStatus::MergeFrom(const MissionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.MissionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::MissionModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceStatusType_case()) {
    case kAutonomyStatus: {
      _internal_mutable_autonomystatus()->::MissionModule::AutonomyStatus::MergeFrom(from._internal_autonomystatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissionStatus::CopyFrom(const MissionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.MissionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionStatus::IsInitialized() const {
  return true;
}

void MissionStatus::InternalSwap(MissionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceStatusType_, other->DeviceStatusType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[0]);
}

// ===================================================================

class MissionCommand::_Internal {
 public:
  static const ::MissionModule::Device& device(const MissionCommand* msg);
  static const ::MissionModule::AutonomyCommand& autonomycommand(const MissionCommand* msg);
};

const ::MissionModule::Device&
MissionCommand::_Internal::device(const MissionCommand* msg) {
  return *msg->device_;
}
const ::MissionModule::AutonomyCommand&
MissionCommand::_Internal::autonomycommand(const MissionCommand* msg) {
  return *msg->DeviceCommandType_.autonomycommand_;
}
void MissionCommand::set_allocated_autonomycommand(::MissionModule::AutonomyCommand* autonomycommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (autonomycommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::AutonomyCommand>::GetOwningArena(autonomycommand);
    if (message_arena != submessage_arena) {
      autonomycommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autonomycommand, submessage_arena);
    }
    set_has_autonomycommand();
    DeviceCommandType_.autonomycommand_ = autonomycommand;
  }
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionCommand.autonomyCommand)
}
MissionCommand::MissionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.MissionCommand)
}
MissionCommand::MissionCommand(const MissionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::MissionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceCommandType();
  switch (from.DeviceCommandType_case()) {
    case kAutonomyCommand: {
      _internal_mutable_autonomycommand()->::MissionModule::AutonomyCommand::MergeFrom(from._internal_autonomycommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MissionModule.MissionCommand)
}

inline void MissionCommand::SharedCtor() {
device_ = nullptr;
clear_has_DeviceCommandType();
}

MissionCommand::~MissionCommand() {
  // @@protoc_insertion_point(destructor:MissionModule.MissionCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MissionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceCommandType()) {
    clear_DeviceCommandType();
  }
}

void MissionCommand::ArenaDtor(void* object) {
  MissionCommand* _this = reinterpret_cast< MissionCommand* >(object);
  (void)_this;
}
void MissionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionCommand::clear_DeviceCommandType() {
// @@protoc_insertion_point(one_of_clear_start:MissionModule.MissionCommand)
  switch (DeviceCommandType_case()) {
    case kAutonomyCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.autonomycommand_;
      }
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICECOMMANDTYPE_NOT_SET;
}


void MissionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.MissionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceCommandType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.AutonomyCommand autonomyCommand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_autonomycommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.MissionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .MissionModule.AutonomyCommand autonomyCommand = 2;
  if (_internal_has_autonomycommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::autonomycommand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.MissionCommand)
  return target;
}

size_t MissionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.MissionCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceCommandType_case()) {
    // .MissionModule.AutonomyCommand autonomyCommand = 2;
    case kAutonomyCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.autonomycommand_);
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MissionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissionCommand::GetClassData() const { return &_class_data_; }

void MissionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MissionCommand *>(to)->MergeFrom(
      static_cast<const MissionCommand &>(from));
}


void MissionCommand::MergeFrom(const MissionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.MissionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::MissionModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceCommandType_case()) {
    case kAutonomyCommand: {
      _internal_mutable_autonomycommand()->::MissionModule::AutonomyCommand::MergeFrom(from._internal_autonomycommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissionCommand::CopyFrom(const MissionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.MissionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCommand::IsInitialized() const {
  return true;
}

void MissionCommand::InternalSwap(MissionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceCommandType_, other->DeviceCommandType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[1]);
}

// ===================================================================

class MissionError::_Internal {
 public:
  static const ::MissionModule::Device& device(const MissionError* msg);
  static const ::MissionModule::AutonomyError& autonomyerror(const MissionError* msg);
};

const ::MissionModule::Device&
MissionError::_Internal::device(const MissionError* msg) {
  return *msg->device_;
}
const ::MissionModule::AutonomyError&
MissionError::_Internal::autonomyerror(const MissionError* msg) {
  return *msg->DeviceErrorType_.autonomyerror_;
}
void MissionError::set_allocated_autonomyerror(::MissionModule::AutonomyError* autonomyerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (autonomyerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::MissionModule::AutonomyError>::GetOwningArena(autonomyerror);
    if (message_arena != submessage_arena) {
      autonomyerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autonomyerror, submessage_arena);
    }
    set_has_autonomyerror();
    DeviceErrorType_.autonomyerror_ = autonomyerror;
  }
  // @@protoc_insertion_point(field_set_allocated:MissionModule.MissionError.autonomyError)
}
MissionError::MissionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.MissionError)
}
MissionError::MissionError(const MissionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::MissionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceErrorType();
  switch (from.DeviceErrorType_case()) {
    case kAutonomyError: {
      _internal_mutable_autonomyerror()->::MissionModule::AutonomyError::MergeFrom(from._internal_autonomyerror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MissionModule.MissionError)
}

inline void MissionError::SharedCtor() {
device_ = nullptr;
clear_has_DeviceErrorType();
}

MissionError::~MissionError() {
  // @@protoc_insertion_point(destructor:MissionModule.MissionError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MissionError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceErrorType()) {
    clear_DeviceErrorType();
  }
}

void MissionError::ArenaDtor(void* object) {
  MissionError* _this = reinterpret_cast< MissionError* >(object);
  (void)_this;
}
void MissionError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissionError::clear_DeviceErrorType() {
// @@protoc_insertion_point(one_of_clear_start:MissionModule.MissionError)
  switch (DeviceErrorType_case()) {
    case kAutonomyError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.autonomyerror_;
      }
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICEERRORTYPE_NOT_SET;
}


void MissionError::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.MissionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceErrorType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.AutonomyError autonomyError = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_autonomyerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.MissionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .MissionModule.AutonomyError autonomyError = 2;
  if (_internal_has_autonomyerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::autonomyerror(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.MissionError)
  return target;
}

size_t MissionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.MissionError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceErrorType_case()) {
    // .MissionModule.AutonomyError autonomyError = 2;
    case kAutonomyError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.autonomyerror_);
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissionError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MissionError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissionError::GetClassData() const { return &_class_data_; }

void MissionError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MissionError *>(to)->MergeFrom(
      static_cast<const MissionError &>(from));
}


void MissionError::MergeFrom(const MissionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.MissionError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::MissionModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceErrorType_case()) {
    case kAutonomyError: {
      _internal_mutable_autonomyerror()->::MissionModule::AutonomyError::MergeFrom(from._internal_autonomyerror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissionError::CopyFrom(const MissionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.MissionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionError::IsInitialized() const {
  return true;
}

void MissionError::InternalSwap(MissionError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceErrorType_, other->DeviceErrorType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[2]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicename().empty()) {
    devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devicename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  // @@protoc_insertion_point(copy_constructor:MissionModule.Device)
}

inline void Device::SharedCtor() {
devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&module_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:MissionModule.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicename_.ClearToEmpty();
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicetype_) -
      reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.Device.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::MissionModule::Device_Module>(val));
        } else goto handle_unusual;
        continue;
      // .MissionModule.Device.DeviceType deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::MissionModule::Device_DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // string deviceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MissionModule.Device.deviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_module(), target);
  }

  // .MissionModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicetype(), target);
  }

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MissionModule.Device.deviceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  // .MissionModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_module());
  }

  // .MissionModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.Device)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devicename().empty()) {
    _internal_set_devicename(from._internal_devicename());
  }
  if (from._internal_module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devicename_, GetArenaForAllocation(),
      &other->devicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, devicetype_)
      + sizeof(Device::devicetype_)
      - PROTOBUF_FIELD_OFFSET(Device, module_)>(
          reinterpret_cast<char*>(&module_),
          reinterpret_cast<char*>(&other->module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[3]);
}

// ===================================================================

class AutonomyStatus_Telemetry::_Internal {
 public:
  static const ::MissionModule::Position& position(const AutonomyStatus_Telemetry* msg);
};

const ::MissionModule::Position&
AutonomyStatus_Telemetry::_Internal::position(const AutonomyStatus_Telemetry* msg) {
  return *msg->position_;
}
AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyStatus.Telemetry)
}
AutonomyStatus_Telemetry::AutonomyStatus_Telemetry(const AutonomyStatus_Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::MissionModule::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(fuel_));
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyStatus.Telemetry)
}

inline void AutonomyStatus_Telemetry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fuel_) -
    reinterpret_cast<char*>(&position_)) + sizeof(fuel_));
}

AutonomyStatus_Telemetry::~AutonomyStatus_Telemetry() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyStatus.Telemetry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutonomyStatus_Telemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void AutonomyStatus_Telemetry::ArenaDtor(void* object) {
  AutonomyStatus_Telemetry* _this = reinterpret_cast< AutonomyStatus_Telemetry* >(object);
  (void)_this;
}
void AutonomyStatus_Telemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutonomyStatus_Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutonomyStatus_Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyStatus.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(fuel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyStatus_Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fuel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .MissionModule.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutonomyStatus_Telemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyStatus.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // double fuel = 2;
  if (!(this->_internal_fuel() <= 0 && this->_internal_fuel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fuel(), target);
  }

  // .MissionModule.Position position = 3;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyStatus.Telemetry)
  return target;
}

size_t AutonomyStatus_Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyStatus.Telemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double speed = 1;
  if (!(this->_internal_speed() <= 0 && this->_internal_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double fuel = 2;
  if (!(this->_internal_fuel() <= 0 && this->_internal_fuel() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyStatus_Telemetry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutonomyStatus_Telemetry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyStatus_Telemetry::GetClassData() const { return &_class_data_; }

void AutonomyStatus_Telemetry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutonomyStatus_Telemetry *>(to)->MergeFrom(
      static_cast<const AutonomyStatus_Telemetry &>(from));
}


void AutonomyStatus_Telemetry::MergeFrom(const AutonomyStatus_Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyStatus.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::MissionModule::Position::MergeFrom(from._internal_position());
  }
  if (!(from._internal_speed() <= 0 && from._internal_speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (!(from._internal_fuel() <= 0 && from._internal_fuel() >= 0)) {
    _internal_set_fuel(from._internal_fuel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyStatus_Telemetry::CopyFrom(const AutonomyStatus_Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyStatus.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyStatus_Telemetry::IsInitialized() const {
  return true;
}

void AutonomyStatus_Telemetry::InternalSwap(AutonomyStatus_Telemetry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutonomyStatus_Telemetry, fuel_)
      + sizeof(AutonomyStatus_Telemetry::fuel_)
      - PROTOBUF_FIELD_OFFSET(AutonomyStatus_Telemetry, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyStatus_Telemetry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[4]);
}

// ===================================================================

class AutonomyStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<AutonomyStatus>()._has_bits_);
  static const ::MissionModule::AutonomyStatus_Telemetry& telemetry(const AutonomyStatus* msg);
  static const ::MissionModule::Station& nextstop(const AutonomyStatus* msg);
  static void set_has_nextstop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::MissionModule::AutonomyStatus_Telemetry&
AutonomyStatus::_Internal::telemetry(const AutonomyStatus* msg) {
  return *msg->telemetry_;
}
const ::MissionModule::Station&
AutonomyStatus::_Internal::nextstop(const AutonomyStatus* msg) {
  return *msg->nextstop_;
}
AutonomyStatus::AutonomyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyStatus)
}
AutonomyStatus::AutonomyStatus(const AutonomyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::MissionModule::AutonomyStatus_Telemetry(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  if (from._internal_has_nextstop()) {
    nextstop_ = new ::MissionModule::Station(*from.nextstop_);
  } else {
    nextstop_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyStatus)
}

inline void AutonomyStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(state_));
}

AutonomyStatus::~AutonomyStatus() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutonomyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete nextstop_;
}

void AutonomyStatus::ArenaDtor(void* object) {
  AutonomyStatus* _this = reinterpret_cast< AutonomyStatus* >(object);
  (void)_this;
}
void AutonomyStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutonomyStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutonomyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nextstop_ != nullptr);
    nextstop_->Clear();
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.AutonomyStatus.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MissionModule::AutonomyStatus_State>(val));
        } else goto handle_unusual;
        continue;
      // optional .MissionModule.Station nextStop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nextstop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutonomyStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  if (this->_internal_has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry(this), target, stream);
  }

  // .MissionModule.AutonomyStatus.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional .MissionModule.Station nextStop = 3;
  if (_internal_has_nextstop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nextstop(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyStatus)
  return target;
}

size_t AutonomyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MissionModule.AutonomyStatus.Telemetry telemetry = 1;
  if (this->_internal_has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // optional .MissionModule.Station nextStop = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nextstop_);
  }

  // .MissionModule.AutonomyStatus.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutonomyStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyStatus::GetClassData() const { return &_class_data_; }

void AutonomyStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutonomyStatus *>(to)->MergeFrom(
      static_cast<const AutonomyStatus &>(from));
}


void AutonomyStatus::MergeFrom(const AutonomyStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_telemetry()) {
    _internal_mutable_telemetry()->::MissionModule::AutonomyStatus_Telemetry::MergeFrom(from._internal_telemetry());
  }
  if (from._internal_has_nextstop()) {
    _internal_mutable_nextstop()->::MissionModule::Station::MergeFrom(from._internal_nextstop());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyStatus::CopyFrom(const AutonomyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyStatus::IsInitialized() const {
  return true;
}

void AutonomyStatus::InternalSwap(AutonomyStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutonomyStatus, state_)
      + sizeof(AutonomyStatus::state_)
      - PROTOBUF_FIELD_OFFSET(AutonomyStatus, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[5]);
}

// ===================================================================

class AutonomyCommand::_Internal {
 public:
};

AutonomyCommand::AutonomyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyCommand)
}
AutonomyCommand::AutonomyCommand(const AutonomyCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_route().empty()) {
    route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route(), 
      GetArenaForAllocation());
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyCommand)
}

inline void AutonomyCommand::SharedCtor() {
route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_ = 0;
}

AutonomyCommand::~AutonomyCommand() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutonomyCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AutonomyCommand::ArenaDtor(void* object) {
  AutonomyCommand* _this = reinterpret_cast< AutonomyCommand* >(object);
  (void)_this;
}
void AutonomyCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutonomyCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutonomyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  route_.ClearToEmpty();
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MissionModule.Station stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MissionModule.AutonomyCommand.route"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.AutonomyCommand.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::MissionModule::AutonomyCommand_Action>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutonomyCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MissionModule.Station stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  // string route = 2;
  if (!this->_internal_route().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MissionModule.AutonomyCommand.route");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route(), target);
  }

  // .MissionModule.AutonomyCommand.Action action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyCommand)
  return target;
}

size_t AutonomyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MissionModule.Station stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string route = 2;
  if (!this->_internal_route().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // .MissionModule.AutonomyCommand.Action action = 3;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutonomyCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyCommand::GetClassData() const { return &_class_data_; }

void AutonomyCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutonomyCommand *>(to)->MergeFrom(
      static_cast<const AutonomyCommand &>(from));
}


void AutonomyCommand::MergeFrom(const AutonomyCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  if (!from._internal_route().empty()) {
    _internal_set_route(from._internal_route());
  }
  if (from._internal_action() != 0) {
    _internal_set_action(from._internal_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyCommand::CopyFrom(const AutonomyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyCommand::IsInitialized() const {
  return true;
}

void AutonomyCommand::InternalSwap(AutonomyCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_, GetArenaForAllocation(),
      &other->route_, other->GetArenaForAllocation()
  );
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[6]);
}

// ===================================================================

class AutonomyError::_Internal {
 public:
};

AutonomyError::AutonomyError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  finishedstops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.AutonomyError)
}
AutonomyError::AutonomyError(const AutonomyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      finishedstops_(from.finishedstops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MissionModule.AutonomyError)
}

inline void AutonomyError::SharedCtor() {
}

AutonomyError::~AutonomyError() {
  // @@protoc_insertion_point(destructor:MissionModule.AutonomyError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutonomyError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutonomyError::ArenaDtor(void* object) {
  AutonomyError* _this = reinterpret_cast< AutonomyError* >(object);
  (void)_this;
}
void AutonomyError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutonomyError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutonomyError::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.AutonomyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finishedstops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutonomyError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MissionModule.Station finishedStops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_finishedstops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutonomyError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.AutonomyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MissionModule.Station finishedStops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_finishedstops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_finishedstops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.AutonomyError)
  return target;
}

size_t AutonomyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.AutonomyError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MissionModule.Station finishedStops = 1;
  total_size += 1UL * this->_internal_finishedstops_size();
  for (const auto& msg : this->finishedstops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutonomyError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutonomyError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutonomyError::GetClassData() const { return &_class_data_; }

void AutonomyError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AutonomyError *>(to)->MergeFrom(
      static_cast<const AutonomyError &>(from));
}


void AutonomyError::MergeFrom(const AutonomyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.AutonomyError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finishedstops_.MergeFrom(from.finishedstops_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutonomyError::CopyFrom(const AutonomyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.AutonomyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutonomyError::IsInitialized() const {
  return true;
}

void AutonomyError::InternalSwap(AutonomyError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  finishedstops_.InternalSwap(&other->finishedstops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutonomyError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[7]);
}

// ===================================================================

class Station::_Internal {
 public:
  static const ::MissionModule::Position& position(const Station* msg);
};

const ::MissionModule::Position&
Station::_Internal::position(const Station* msg) {
  return *msg->position_;
}
Station::Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.Station)
}
Station::Station(const Station& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::MissionModule::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MissionModule.Station)
}

inline void Station::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
position_ = nullptr;
}

Station::~Station() {
  // @@protoc_insertion_point(destructor:MissionModule.Station)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Station::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void Station::ArenaDtor(void* object) {
  Station* _this = reinterpret_cast< Station* >(object);
  (void)_this;
}
void Station::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Station::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Station::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.Station)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Station::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MissionModule.Station.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MissionModule.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Station::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.Station)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MissionModule.Station.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .MissionModule.Position position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.Station)
  return target;
}

size_t Station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.Station)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .MissionModule.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Station::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Station::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Station::GetClassData() const { return &_class_data_; }

void Station::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Station *>(to)->MergeFrom(
      static_cast<const Station &>(from));
}


void Station::MergeFrom(const Station& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.Station)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::MissionModule::Position::MergeFrom(from._internal_position());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Station::CopyFrom(const Station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.Station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Station::IsInitialized() const {
  return true;
}

void Station::InternalSwap(Station* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Station::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[8]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MissionModule.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:MissionModule.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:MissionModule.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:MissionModule.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionModule.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->_internal_latitude() <= 0 && this->_internal_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->_internal_longitude() <= 0 && this->_internal_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  if (!(this->_internal_altitude() <= 0 && this->_internal_altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionModule.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MissionModule.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->_internal_latitude() <= 0 && this->_internal_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->_internal_longitude() <= 0 && this->_internal_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->_internal_altitude() <= 0 && this->_internal_altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }

void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Position *>(to)->MergeFrom(
      static_cast<const Position &>(from));
}


void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MissionModule.Position)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_latitude() <= 0 && from._internal_latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from._internal_longitude() <= 0 && from._internal_longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from._internal_altitude() <= 0 && from._internal_altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MissionModule.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, altitude_)
      + sizeof(Position::altitude_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fMissionModule_2eproto_getter, &descriptor_table_modules_2fMissionModule_2eproto_once,
      file_level_metadata_modules_2fMissionModule_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MissionModule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MissionModule::MissionStatus* Arena::CreateMaybeMessage< ::MissionModule::MissionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::MissionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::MissionCommand* Arena::CreateMaybeMessage< ::MissionModule::MissionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::MissionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::MissionError* Arena::CreateMaybeMessage< ::MissionModule::MissionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::MissionError >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::Device* Arena::CreateMaybeMessage< ::MissionModule::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyStatus_Telemetry* Arena::CreateMaybeMessage< ::MissionModule::AutonomyStatus_Telemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyStatus_Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyStatus* Arena::CreateMaybeMessage< ::MissionModule::AutonomyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyCommand* Arena::CreateMaybeMessage< ::MissionModule::AutonomyCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::AutonomyError* Arena::CreateMaybeMessage< ::MissionModule::AutonomyError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::AutonomyError >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::Station* Arena::CreateMaybeMessage< ::MissionModule::Station >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::Station >(arena);
}
template<> PROTOBUF_NOINLINE ::MissionModule::Position* Arena::CreateMaybeMessage< ::MissionModule::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MissionModule::Position >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
