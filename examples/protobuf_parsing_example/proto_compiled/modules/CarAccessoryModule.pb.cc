// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/CarAccessoryModule.proto

#include "modules/CarAccessoryModule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace CarAccessoryModule {
constexpr CarAccessoryStatus::CarAccessoryStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct CarAccessoryStatusDefaultTypeInternal {
  constexpr CarAccessoryStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarAccessoryStatusDefaultTypeInternal() {}
  union {
    CarAccessoryStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarAccessoryStatusDefaultTypeInternal _CarAccessoryStatus_default_instance_;
constexpr CarAccessoryCommand::CarAccessoryCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct CarAccessoryCommandDefaultTypeInternal {
  constexpr CarAccessoryCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarAccessoryCommandDefaultTypeInternal() {}
  union {
    CarAccessoryCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarAccessoryCommandDefaultTypeInternal _CarAccessoryCommand_default_instance_;
constexpr CarAccessoryError::CarAccessoryError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct CarAccessoryErrorDefaultTypeInternal {
  constexpr CarAccessoryErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarAccessoryErrorDefaultTypeInternal() {}
  union {
    CarAccessoryError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarAccessoryErrorDefaultTypeInternal _CarAccessoryError_default_instance_;
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(0)

  , devicetype_(0)
{}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr ButtonStatus::ButtonStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ispressed_(false){}
struct ButtonStatusDefaultTypeInternal {
  constexpr ButtonStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ButtonStatusDefaultTypeInternal() {}
  union {
    ButtonStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ButtonStatusDefaultTypeInternal _ButtonStatus_default_instance_;
constexpr ButtonCommand::ButtonCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
{}
struct ButtonCommandDefaultTypeInternal {
  constexpr ButtonCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ButtonCommandDefaultTypeInternal() {}
  union {
    ButtonCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ButtonCommandDefaultTypeInternal _ButtonCommand_default_instance_;
constexpr ButtonError::ButtonError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : presscount_(0u){}
struct ButtonErrorDefaultTypeInternal {
  constexpr ButtonErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ButtonErrorDefaultTypeInternal() {}
  union {
    ButtonError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ButtonErrorDefaultTypeInternal _ButtonError_default_instance_;
}  // namespace CarAccessoryModule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fCarAccessoryModule_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fCarAccessoryModule_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fCarAccessoryModule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fCarAccessoryModule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryStatus, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryStatus, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryStatus, DeviceStatusType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryCommand, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryCommand, DeviceCommandType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryError, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryError, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryError, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::CarAccessoryError, DeviceErrorType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::Device, module_),
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::Device, devicetype_),
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::Device, devicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonStatus, ispressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CarAccessoryModule::ButtonError, presscount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CarAccessoryModule::CarAccessoryStatus)},
  { 8, -1, sizeof(::CarAccessoryModule::CarAccessoryCommand)},
  { 16, -1, sizeof(::CarAccessoryModule::CarAccessoryError)},
  { 24, -1, sizeof(::CarAccessoryModule::Device)},
  { 32, -1, sizeof(::CarAccessoryModule::ButtonStatus)},
  { 38, -1, sizeof(::CarAccessoryModule::ButtonCommand)},
  { 44, -1, sizeof(::CarAccessoryModule::ButtonError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_CarAccessoryStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_CarAccessoryCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_CarAccessoryError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_ButtonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_ButtonCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CarAccessoryModule::_ButtonError_default_instance_),
};

const char descriptor_table_protodef_modules_2fCarAccessoryModule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/CarAccessoryModule.proto\022\022CarA"
  "ccessoryModule\"\216\001\n\022CarAccessoryStatus\022*\n"
  "\006device\030\001 \001(\0132\032.CarAccessoryModule.Devic"
  "e\0228\n\014buttonStatus\030\002 \001(\0132 .CarAccessoryMo"
  "dule.ButtonStatusH\000B\022\n\020DeviceStatusType\""
  "\222\001\n\023CarAccessoryCommand\022*\n\006device\030\001 \001(\0132"
  "\032.CarAccessoryModule.Device\022:\n\rbuttonCom"
  "mand\030\002 \001(\0132!.CarAccessoryModule.ButtonCo"
  "mmandH\000B\023\n\021DeviceCommandType\"\212\001\n\021CarAcce"
  "ssoryError\022*\n\006device\030\001 \001(\0132\032.CarAccessor"
  "yModule.Device\0226\n\013buttonError\030\002 \001(\0132\037.Ca"
  "rAccessoryModule.ButtonErrorH\000B\021\n\017Device"
  "ErrorType\"\335\001\n\006Device\0221\n\006module\030\001 \001(\0162!.C"
  "arAccessoryModule.Device.Module\0229\n\ndevic"
  "eType\030\002 \001(\0162%.CarAccessoryModule.Device."
  "DeviceType\022\022\n\ndeviceName\030\003 \001(\t\"7\n\006Module"
  "\022\023\n\017RESERVED_MODULE\020\000\022\030\n\024CAR_ACCESSORY_M"
  "ODULE\020\002\"\030\n\nDeviceType\022\n\n\006BUTTON\020\000\"!\n\014But"
  "tonStatus\022\021\n\tisPressed\030\001 \001(\010\"a\n\rButtonCo"
  "mmand\022:\n\007command\030\001 \001(\0162).CarAccessoryMod"
  "ule.ButtonCommand.Command\"\024\n\007Command\022\t\n\005"
  "PRESS\020\000\"!\n\013ButtonError\022\022\n\npressCount\030\001 \001"
  "(\rB>Z!../internal/pkg/ba_proto;ba_proto\252"
  "\002\030Google.Protobuf.ba_protob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fCarAccessoryModule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fCarAccessoryModule_2eproto = {
  false, false, 954, descriptor_table_protodef_modules_2fCarAccessoryModule_2eproto, "modules/CarAccessoryModule.proto", 
  &descriptor_table_modules_2fCarAccessoryModule_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_modules_2fCarAccessoryModule_2eproto::offsets,
  file_level_metadata_modules_2fCarAccessoryModule_2eproto, file_level_enum_descriptors_modules_2fCarAccessoryModule_2eproto, file_level_service_descriptors_modules_2fCarAccessoryModule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fCarAccessoryModule_2eproto_getter() {
  return &descriptor_table_modules_2fCarAccessoryModule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fCarAccessoryModule_2eproto(&descriptor_table_modules_2fCarAccessoryModule_2eproto);
namespace CarAccessoryModule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fCarAccessoryModule_2eproto);
  return file_level_enum_descriptors_modules_2fCarAccessoryModule_2eproto[0];
}
bool Device_Module_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_Module Device::RESERVED_MODULE;
constexpr Device_Module Device::CAR_ACCESSORY_MODULE;
constexpr Device_Module Device::Module_MIN;
constexpr Device_Module Device::Module_MAX;
constexpr int Device::Module_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fCarAccessoryModule_2eproto);
  return file_level_enum_descriptors_modules_2fCarAccessoryModule_2eproto[1];
}
bool Device_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_DeviceType Device::BUTTON;
constexpr Device_DeviceType Device::DeviceType_MIN;
constexpr Device_DeviceType Device::DeviceType_MAX;
constexpr int Device::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fCarAccessoryModule_2eproto);
  return file_level_enum_descriptors_modules_2fCarAccessoryModule_2eproto[2];
}
bool ButtonCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ButtonCommand_Command ButtonCommand::PRESS;
constexpr ButtonCommand_Command ButtonCommand::Command_MIN;
constexpr ButtonCommand_Command ButtonCommand::Command_MAX;
constexpr int ButtonCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CarAccessoryStatus::_Internal {
 public:
  static const ::CarAccessoryModule::Device& device(const CarAccessoryStatus* msg);
  static const ::CarAccessoryModule::ButtonStatus& buttonstatus(const CarAccessoryStatus* msg);
};

const ::CarAccessoryModule::Device&
CarAccessoryStatus::_Internal::device(const CarAccessoryStatus* msg) {
  return *msg->device_;
}
const ::CarAccessoryModule::ButtonStatus&
CarAccessoryStatus::_Internal::buttonstatus(const CarAccessoryStatus* msg) {
  return *msg->DeviceStatusType_.buttonstatus_;
}
void CarAccessoryStatus::set_allocated_buttonstatus(::CarAccessoryModule::ButtonStatus* buttonstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (buttonstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CarAccessoryModule::ButtonStatus>::GetOwningArena(buttonstatus);
    if (message_arena != submessage_arena) {
      buttonstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttonstatus, submessage_arena);
    }
    set_has_buttonstatus();
    DeviceStatusType_.buttonstatus_ = buttonstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:CarAccessoryModule.CarAccessoryStatus.buttonStatus)
}
CarAccessoryStatus::CarAccessoryStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.CarAccessoryStatus)
}
CarAccessoryStatus::CarAccessoryStatus(const CarAccessoryStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::CarAccessoryModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceStatusType();
  switch (from.DeviceStatusType_case()) {
    case kButtonStatus: {
      _internal_mutable_buttonstatus()->::CarAccessoryModule::ButtonStatus::MergeFrom(from._internal_buttonstatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.CarAccessoryStatus)
}

inline void CarAccessoryStatus::SharedCtor() {
device_ = nullptr;
clear_has_DeviceStatusType();
}

CarAccessoryStatus::~CarAccessoryStatus() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.CarAccessoryStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CarAccessoryStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceStatusType()) {
    clear_DeviceStatusType();
  }
}

void CarAccessoryStatus::ArenaDtor(void* object) {
  CarAccessoryStatus* _this = reinterpret_cast< CarAccessoryStatus* >(object);
  (void)_this;
}
void CarAccessoryStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarAccessoryStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarAccessoryStatus::clear_DeviceStatusType() {
// @@protoc_insertion_point(one_of_clear_start:CarAccessoryModule.CarAccessoryStatus)
  switch (DeviceStatusType_case()) {
    case kButtonStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.buttonstatus_;
      }
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICESTATUSTYPE_NOT_SET;
}


void CarAccessoryStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.CarAccessoryStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceStatusType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarAccessoryStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarAccessoryModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CarAccessoryModule.ButtonStatus buttonStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarAccessoryStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.CarAccessoryStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .CarAccessoryModule.ButtonStatus buttonStatus = 2;
  if (_internal_has_buttonstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buttonstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.CarAccessoryStatus)
  return target;
}

size_t CarAccessoryStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.CarAccessoryStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceStatusType_case()) {
    // .CarAccessoryModule.ButtonStatus buttonStatus = 2;
    case kButtonStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.buttonstatus_);
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarAccessoryStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarAccessoryStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarAccessoryStatus::GetClassData() const { return &_class_data_; }

void CarAccessoryStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CarAccessoryStatus *>(to)->MergeFrom(
      static_cast<const CarAccessoryStatus &>(from));
}


void CarAccessoryStatus::MergeFrom(const CarAccessoryStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.CarAccessoryStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::CarAccessoryModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceStatusType_case()) {
    case kButtonStatus: {
      _internal_mutable_buttonstatus()->::CarAccessoryModule::ButtonStatus::MergeFrom(from._internal_buttonstatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarAccessoryStatus::CopyFrom(const CarAccessoryStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.CarAccessoryStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarAccessoryStatus::IsInitialized() const {
  return true;
}

void CarAccessoryStatus::InternalSwap(CarAccessoryStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceStatusType_, other->DeviceStatusType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarAccessoryStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[0]);
}

// ===================================================================

class CarAccessoryCommand::_Internal {
 public:
  static const ::CarAccessoryModule::Device& device(const CarAccessoryCommand* msg);
  static const ::CarAccessoryModule::ButtonCommand& buttoncommand(const CarAccessoryCommand* msg);
};

const ::CarAccessoryModule::Device&
CarAccessoryCommand::_Internal::device(const CarAccessoryCommand* msg) {
  return *msg->device_;
}
const ::CarAccessoryModule::ButtonCommand&
CarAccessoryCommand::_Internal::buttoncommand(const CarAccessoryCommand* msg) {
  return *msg->DeviceCommandType_.buttoncommand_;
}
void CarAccessoryCommand::set_allocated_buttoncommand(::CarAccessoryModule::ButtonCommand* buttoncommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (buttoncommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CarAccessoryModule::ButtonCommand>::GetOwningArena(buttoncommand);
    if (message_arena != submessage_arena) {
      buttoncommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttoncommand, submessage_arena);
    }
    set_has_buttoncommand();
    DeviceCommandType_.buttoncommand_ = buttoncommand;
  }
  // @@protoc_insertion_point(field_set_allocated:CarAccessoryModule.CarAccessoryCommand.buttonCommand)
}
CarAccessoryCommand::CarAccessoryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.CarAccessoryCommand)
}
CarAccessoryCommand::CarAccessoryCommand(const CarAccessoryCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::CarAccessoryModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceCommandType();
  switch (from.DeviceCommandType_case()) {
    case kButtonCommand: {
      _internal_mutable_buttoncommand()->::CarAccessoryModule::ButtonCommand::MergeFrom(from._internal_buttoncommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.CarAccessoryCommand)
}

inline void CarAccessoryCommand::SharedCtor() {
device_ = nullptr;
clear_has_DeviceCommandType();
}

CarAccessoryCommand::~CarAccessoryCommand() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.CarAccessoryCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CarAccessoryCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceCommandType()) {
    clear_DeviceCommandType();
  }
}

void CarAccessoryCommand::ArenaDtor(void* object) {
  CarAccessoryCommand* _this = reinterpret_cast< CarAccessoryCommand* >(object);
  (void)_this;
}
void CarAccessoryCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarAccessoryCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarAccessoryCommand::clear_DeviceCommandType() {
// @@protoc_insertion_point(one_of_clear_start:CarAccessoryModule.CarAccessoryCommand)
  switch (DeviceCommandType_case()) {
    case kButtonCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.buttoncommand_;
      }
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICECOMMANDTYPE_NOT_SET;
}


void CarAccessoryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.CarAccessoryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceCommandType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarAccessoryCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarAccessoryModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CarAccessoryModule.ButtonCommand buttonCommand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttoncommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarAccessoryCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.CarAccessoryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .CarAccessoryModule.ButtonCommand buttonCommand = 2;
  if (_internal_has_buttoncommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buttoncommand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.CarAccessoryCommand)
  return target;
}

size_t CarAccessoryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.CarAccessoryCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceCommandType_case()) {
    // .CarAccessoryModule.ButtonCommand buttonCommand = 2;
    case kButtonCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.buttoncommand_);
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarAccessoryCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarAccessoryCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarAccessoryCommand::GetClassData() const { return &_class_data_; }

void CarAccessoryCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CarAccessoryCommand *>(to)->MergeFrom(
      static_cast<const CarAccessoryCommand &>(from));
}


void CarAccessoryCommand::MergeFrom(const CarAccessoryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.CarAccessoryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::CarAccessoryModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceCommandType_case()) {
    case kButtonCommand: {
      _internal_mutable_buttoncommand()->::CarAccessoryModule::ButtonCommand::MergeFrom(from._internal_buttoncommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarAccessoryCommand::CopyFrom(const CarAccessoryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.CarAccessoryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarAccessoryCommand::IsInitialized() const {
  return true;
}

void CarAccessoryCommand::InternalSwap(CarAccessoryCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceCommandType_, other->DeviceCommandType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarAccessoryCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[1]);
}

// ===================================================================

class CarAccessoryError::_Internal {
 public:
  static const ::CarAccessoryModule::Device& device(const CarAccessoryError* msg);
  static const ::CarAccessoryModule::ButtonError& buttonerror(const CarAccessoryError* msg);
};

const ::CarAccessoryModule::Device&
CarAccessoryError::_Internal::device(const CarAccessoryError* msg) {
  return *msg->device_;
}
const ::CarAccessoryModule::ButtonError&
CarAccessoryError::_Internal::buttonerror(const CarAccessoryError* msg) {
  return *msg->DeviceErrorType_.buttonerror_;
}
void CarAccessoryError::set_allocated_buttonerror(::CarAccessoryModule::ButtonError* buttonerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (buttonerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CarAccessoryModule::ButtonError>::GetOwningArena(buttonerror);
    if (message_arena != submessage_arena) {
      buttonerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttonerror, submessage_arena);
    }
    set_has_buttonerror();
    DeviceErrorType_.buttonerror_ = buttonerror;
  }
  // @@protoc_insertion_point(field_set_allocated:CarAccessoryModule.CarAccessoryError.buttonError)
}
CarAccessoryError::CarAccessoryError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.CarAccessoryError)
}
CarAccessoryError::CarAccessoryError(const CarAccessoryError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::CarAccessoryModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceErrorType();
  switch (from.DeviceErrorType_case()) {
    case kButtonError: {
      _internal_mutable_buttonerror()->::CarAccessoryModule::ButtonError::MergeFrom(from._internal_buttonerror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.CarAccessoryError)
}

inline void CarAccessoryError::SharedCtor() {
device_ = nullptr;
clear_has_DeviceErrorType();
}

CarAccessoryError::~CarAccessoryError() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.CarAccessoryError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CarAccessoryError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceErrorType()) {
    clear_DeviceErrorType();
  }
}

void CarAccessoryError::ArenaDtor(void* object) {
  CarAccessoryError* _this = reinterpret_cast< CarAccessoryError* >(object);
  (void)_this;
}
void CarAccessoryError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarAccessoryError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CarAccessoryError::clear_DeviceErrorType() {
// @@protoc_insertion_point(one_of_clear_start:CarAccessoryModule.CarAccessoryError)
  switch (DeviceErrorType_case()) {
    case kButtonError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.buttonerror_;
      }
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICEERRORTYPE_NOT_SET;
}


void CarAccessoryError::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.CarAccessoryError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceErrorType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarAccessoryError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarAccessoryModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CarAccessoryModule.ButtonError buttonError = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttonerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarAccessoryError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.CarAccessoryError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .CarAccessoryModule.ButtonError buttonError = 2;
  if (_internal_has_buttonerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buttonerror(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.CarAccessoryError)
  return target;
}

size_t CarAccessoryError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.CarAccessoryError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CarAccessoryModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceErrorType_case()) {
    // .CarAccessoryModule.ButtonError buttonError = 2;
    case kButtonError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.buttonerror_);
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarAccessoryError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CarAccessoryError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarAccessoryError::GetClassData() const { return &_class_data_; }

void CarAccessoryError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CarAccessoryError *>(to)->MergeFrom(
      static_cast<const CarAccessoryError &>(from));
}


void CarAccessoryError::MergeFrom(const CarAccessoryError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.CarAccessoryError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::CarAccessoryModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceErrorType_case()) {
    case kButtonError: {
      _internal_mutable_buttonerror()->::CarAccessoryModule::ButtonError::MergeFrom(from._internal_buttonerror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarAccessoryError::CopyFrom(const CarAccessoryError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.CarAccessoryError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarAccessoryError::IsInitialized() const {
  return true;
}

void CarAccessoryError::InternalSwap(CarAccessoryError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceErrorType_, other->DeviceErrorType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarAccessoryError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[2]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicename().empty()) {
    devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devicename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.Device)
}

inline void Device::SharedCtor() {
devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&module_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicename_.ClearToEmpty();
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicetype_) -
      reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarAccessoryModule.Device.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::CarAccessoryModule::Device_Module>(val));
        } else goto handle_unusual;
        continue;
      // .CarAccessoryModule.Device.DeviceType deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::CarAccessoryModule::Device_DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // string deviceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CarAccessoryModule.Device.deviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarAccessoryModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_module(), target);
  }

  // .CarAccessoryModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicetype(), target);
  }

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CarAccessoryModule.Device.deviceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  // .CarAccessoryModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_module());
  }

  // .CarAccessoryModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.Device)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devicename().empty()) {
    _internal_set_devicename(from._internal_devicename());
  }
  if (from._internal_module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devicename_, GetArenaForAllocation(),
      &other->devicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, devicetype_)
      + sizeof(Device::devicetype_)
      - PROTOBUF_FIELD_OFFSET(Device, module_)>(
          reinterpret_cast<char*>(&module_),
          reinterpret_cast<char*>(&other->module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[3]);
}

// ===================================================================

class ButtonStatus::_Internal {
 public:
};

ButtonStatus::ButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.ButtonStatus)
}
ButtonStatus::ButtonStatus(const ButtonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ispressed_ = from.ispressed_;
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.ButtonStatus)
}

inline void ButtonStatus::SharedCtor() {
ispressed_ = false;
}

ButtonStatus::~ButtonStatus() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.ButtonStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ButtonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ButtonStatus::ArenaDtor(void* object) {
  ButtonStatus* _this = reinterpret_cast< ButtonStatus* >(object);
  (void)_this;
}
void ButtonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ButtonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.ButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ispressed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isPressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ispressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.ButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ispressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.ButtonStatus)
  return target;
}

size_t ButtonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.ButtonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ButtonStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonStatus::GetClassData() const { return &_class_data_; }

void ButtonStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ButtonStatus *>(to)->MergeFrom(
      static_cast<const ButtonStatus &>(from));
}


void ButtonStatus::MergeFrom(const ButtonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.ButtonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ispressed() != 0) {
    _internal_set_ispressed(from._internal_ispressed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonStatus::CopyFrom(const ButtonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.ButtonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonStatus::IsInitialized() const {
  return true;
}

void ButtonStatus::InternalSwap(ButtonStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ispressed_, other->ispressed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[4]);
}

// ===================================================================

class ButtonCommand::_Internal {
 public:
};

ButtonCommand::ButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.ButtonCommand)
}
ButtonCommand::ButtonCommand(const ButtonCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.ButtonCommand)
}

inline void ButtonCommand::SharedCtor() {
command_ = 0;
}

ButtonCommand::~ButtonCommand() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.ButtonCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ButtonCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ButtonCommand::ArenaDtor(void* object) {
  ButtonCommand* _this = reinterpret_cast< ButtonCommand* >(object);
  (void)_this;
}
void ButtonCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ButtonCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.ButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CarAccessoryModule.ButtonCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::CarAccessoryModule::ButtonCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.ButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CarAccessoryModule.ButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.ButtonCommand)
  return target;
}

size_t ButtonCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.ButtonCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CarAccessoryModule.ButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ButtonCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonCommand::GetClassData() const { return &_class_data_; }

void ButtonCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ButtonCommand *>(to)->MergeFrom(
      static_cast<const ButtonCommand &>(from));
}


void ButtonCommand::MergeFrom(const ButtonCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.ButtonCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonCommand::CopyFrom(const ButtonCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.ButtonCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonCommand::IsInitialized() const {
  return true;
}

void ButtonCommand::InternalSwap(ButtonCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[5]);
}

// ===================================================================

class ButtonError::_Internal {
 public:
};

ButtonError::ButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CarAccessoryModule.ButtonError)
}
ButtonError::ButtonError(const ButtonError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  presscount_ = from.presscount_;
  // @@protoc_insertion_point(copy_constructor:CarAccessoryModule.ButtonError)
}

inline void ButtonError::SharedCtor() {
presscount_ = 0u;
}

ButtonError::~ButtonError() {
  // @@protoc_insertion_point(destructor:CarAccessoryModule.ButtonError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ButtonError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ButtonError::ArenaDtor(void* object) {
  ButtonError* _this = reinterpret_cast< ButtonError* >(object);
  (void)_this;
}
void ButtonError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ButtonError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ButtonError::Clear() {
// @@protoc_insertion_point(message_clear_start:CarAccessoryModule.ButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presscount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pressCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          presscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ButtonError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarAccessoryModule.ButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pressCount = 1;
  if (this->_internal_presscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_presscount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CarAccessoryModule.ButtonError)
  return target;
}

size_t ButtonError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CarAccessoryModule.ButtonError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pressCount = 1;
  if (this->_internal_presscount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_presscount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ButtonError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonError::GetClassData() const { return &_class_data_; }

void ButtonError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ButtonError *>(to)->MergeFrom(
      static_cast<const ButtonError &>(from));
}


void ButtonError::MergeFrom(const ButtonError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CarAccessoryModule.ButtonError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_presscount() != 0) {
    _internal_set_presscount(from._internal_presscount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonError::CopyFrom(const ButtonError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CarAccessoryModule.ButtonError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonError::IsInitialized() const {
  return true;
}

void ButtonError::InternalSwap(ButtonError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(presscount_, other->presscount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fCarAccessoryModule_2eproto_getter, &descriptor_table_modules_2fCarAccessoryModule_2eproto_once,
      file_level_metadata_modules_2fCarAccessoryModule_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CarAccessoryModule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::CarAccessoryStatus* Arena::CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::CarAccessoryStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::CarAccessoryCommand* Arena::CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::CarAccessoryCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::CarAccessoryError* Arena::CreateMaybeMessage< ::CarAccessoryModule::CarAccessoryError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::CarAccessoryError >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::Device* Arena::CreateMaybeMessage< ::CarAccessoryModule::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::ButtonStatus* Arena::CreateMaybeMessage< ::CarAccessoryModule::ButtonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::ButtonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::ButtonCommand* Arena::CreateMaybeMessage< ::CarAccessoryModule::ButtonCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::ButtonCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CarAccessoryModule::ButtonError* Arena::CreateMaybeMessage< ::CarAccessoryModule::ButtonError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CarAccessoryModule::ButtonError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
