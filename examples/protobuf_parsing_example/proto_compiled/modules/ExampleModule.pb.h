// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ExampleModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fExampleModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fExampleModule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fExampleModule_2eproto;
namespace ExampleModule {
class BlinkerCommand;
struct BlinkerCommandDefaultTypeInternal;
extern BlinkerCommandDefaultTypeInternal _BlinkerCommand_default_instance_;
class BlinkerError;
struct BlinkerErrorDefaultTypeInternal;
extern BlinkerErrorDefaultTypeInternal _BlinkerError_default_instance_;
class BlinkerStatus;
struct BlinkerStatusDefaultTypeInternal;
extern BlinkerStatusDefaultTypeInternal _BlinkerStatus_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class ExampleCommand;
struct ExampleCommandDefaultTypeInternal;
extern ExampleCommandDefaultTypeInternal _ExampleCommand_default_instance_;
class ExampleError;
struct ExampleErrorDefaultTypeInternal;
extern ExampleErrorDefaultTypeInternal _ExampleError_default_instance_;
class ExampleStatus;
struct ExampleStatusDefaultTypeInternal;
extern ExampleStatusDefaultTypeInternal _ExampleStatus_default_instance_;
class LightsCommand;
struct LightsCommandDefaultTypeInternal;
extern LightsCommandDefaultTypeInternal _LightsCommand_default_instance_;
class LightsError;
struct LightsErrorDefaultTypeInternal;
extern LightsErrorDefaultTypeInternal _LightsError_default_instance_;
class LightsStatus;
struct LightsStatusDefaultTypeInternal;
extern LightsStatusDefaultTypeInternal _LightsStatus_default_instance_;
}  // namespace ExampleModule
PROTOBUF_NAMESPACE_OPEN
template<> ::ExampleModule::BlinkerCommand* Arena::CreateMaybeMessage<::ExampleModule::BlinkerCommand>(Arena*);
template<> ::ExampleModule::BlinkerError* Arena::CreateMaybeMessage<::ExampleModule::BlinkerError>(Arena*);
template<> ::ExampleModule::BlinkerStatus* Arena::CreateMaybeMessage<::ExampleModule::BlinkerStatus>(Arena*);
template<> ::ExampleModule::Device* Arena::CreateMaybeMessage<::ExampleModule::Device>(Arena*);
template<> ::ExampleModule::ExampleCommand* Arena::CreateMaybeMessage<::ExampleModule::ExampleCommand>(Arena*);
template<> ::ExampleModule::ExampleError* Arena::CreateMaybeMessage<::ExampleModule::ExampleError>(Arena*);
template<> ::ExampleModule::ExampleStatus* Arena::CreateMaybeMessage<::ExampleModule::ExampleStatus>(Arena*);
template<> ::ExampleModule::LightsCommand* Arena::CreateMaybeMessage<::ExampleModule::LightsCommand>(Arena*);
template<> ::ExampleModule::LightsError* Arena::CreateMaybeMessage<::ExampleModule::LightsError>(Arena*);
template<> ::ExampleModule::LightsStatus* Arena::CreateMaybeMessage<::ExampleModule::LightsStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ExampleModule {

enum Device_Module : int {
  Device_Module_RESERVED_MODULE = 0,
  Device_Module_EXAMPLE_MODULE = 999,
  Device_Module_Device_Module_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Device_Module_Device_Module_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Device_Module_IsValid(int value);
constexpr Device_Module Device_Module_Module_MIN = Device_Module_RESERVED_MODULE;
constexpr Device_Module Device_Module_Module_MAX = Device_Module_EXAMPLE_MODULE;
constexpr int Device_Module_Module_ARRAYSIZE = Device_Module_Module_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor();
template<typename T>
inline const std::string& Device_Module_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_Module>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_Module_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_Module_descriptor(), enum_t_value);
}
inline bool Device_Module_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_Module* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_Module>(
    Device_Module_descriptor(), name, value);
}
enum Device_DeviceType : int {
  Device_DeviceType_BLINKER = 0,
  Device_DeviceType_LIGHTS = 1,
  Device_DeviceType_Device_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Device_DeviceType_Device_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Device_DeviceType_IsValid(int value);
constexpr Device_DeviceType Device_DeviceType_DeviceType_MIN = Device_DeviceType_BLINKER;
constexpr Device_DeviceType Device_DeviceType_DeviceType_MAX = Device_DeviceType_LIGHTS;
constexpr int Device_DeviceType_DeviceType_ARRAYSIZE = Device_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor();
template<typename T>
inline const std::string& Device_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_DeviceType_descriptor(), enum_t_value);
}
inline bool Device_DeviceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Device_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_DeviceType>(
    Device_DeviceType_descriptor(), name, value);
}
enum BlinkerCommand_Command : int {
  BlinkerCommand_Command_TURN_ON = 0,
  BlinkerCommand_Command_TURN_OFF = 1,
  BlinkerCommand_Command_BlinkerCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlinkerCommand_Command_BlinkerCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlinkerCommand_Command_IsValid(int value);
constexpr BlinkerCommand_Command BlinkerCommand_Command_Command_MIN = BlinkerCommand_Command_TURN_ON;
constexpr BlinkerCommand_Command BlinkerCommand_Command_Command_MAX = BlinkerCommand_Command_TURN_OFF;
constexpr int BlinkerCommand_Command_Command_ARRAYSIZE = BlinkerCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlinkerCommand_Command_descriptor();
template<typename T>
inline const std::string& BlinkerCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlinkerCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlinkerCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlinkerCommand_Command_descriptor(), enum_t_value);
}
inline bool BlinkerCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlinkerCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlinkerCommand_Command>(
    BlinkerCommand_Command_descriptor(), name, value);
}
enum LightsCommand_Command : int {
  LightsCommand_Command_PRESS = 0,
  LightsCommand_Command_LightsCommand_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LightsCommand_Command_LightsCommand_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LightsCommand_Command_IsValid(int value);
constexpr LightsCommand_Command LightsCommand_Command_Command_MIN = LightsCommand_Command_PRESS;
constexpr LightsCommand_Command LightsCommand_Command_Command_MAX = LightsCommand_Command_PRESS;
constexpr int LightsCommand_Command_Command_ARRAYSIZE = LightsCommand_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightsCommand_Command_descriptor();
template<typename T>
inline const std::string& LightsCommand_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightsCommand_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightsCommand_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightsCommand_Command_descriptor(), enum_t_value);
}
inline bool LightsCommand_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LightsCommand_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightsCommand_Command>(
    LightsCommand_Command_descriptor(), name, value);
}
// ===================================================================

class ExampleStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.ExampleStatus) */ {
 public:
  inline ExampleStatus() : ExampleStatus(nullptr) {}
  ~ExampleStatus() override;
  explicit constexpr ExampleStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleStatus(const ExampleStatus& from);
  ExampleStatus(ExampleStatus&& from) noexcept
    : ExampleStatus() {
    *this = ::std::move(from);
  }

  inline ExampleStatus& operator=(const ExampleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleStatus& operator=(ExampleStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleStatus& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceStatusTypeCase {
    kBlinkerStatus = 2,
    kLightsStatus = 3,
    DEVICESTATUSTYPE_NOT_SET = 0,
  };

  static inline const ExampleStatus* internal_default_instance() {
    return reinterpret_cast<const ExampleStatus*>(
               &_ExampleStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExampleStatus& a, ExampleStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExampleStatus* New() const final {
    return new ExampleStatus();
  }

  ExampleStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExampleStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExampleStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.ExampleStatus";
  }
  protected:
  explicit ExampleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kBlinkerStatusFieldNumber = 2,
    kLightsStatusFieldNumber = 3,
  };
  // .ExampleModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::ExampleModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::Device* release_device();
  ::ExampleModule::Device* mutable_device();
  void set_allocated_device(::ExampleModule::Device* device);
  private:
  const ::ExampleModule::Device& _internal_device() const;
  ::ExampleModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::ExampleModule::Device* device);
  ::ExampleModule::Device* unsafe_arena_release_device();

  // .ExampleModule.BlinkerStatus blinkerStatus = 2;
  bool has_blinkerstatus() const;
  private:
  bool _internal_has_blinkerstatus() const;
  public:
  void clear_blinkerstatus();
  const ::ExampleModule::BlinkerStatus& blinkerstatus() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::BlinkerStatus* release_blinkerstatus();
  ::ExampleModule::BlinkerStatus* mutable_blinkerstatus();
  void set_allocated_blinkerstatus(::ExampleModule::BlinkerStatus* blinkerstatus);
  private:
  const ::ExampleModule::BlinkerStatus& _internal_blinkerstatus() const;
  ::ExampleModule::BlinkerStatus* _internal_mutable_blinkerstatus();
  public:
  void unsafe_arena_set_allocated_blinkerstatus(
      ::ExampleModule::BlinkerStatus* blinkerstatus);
  ::ExampleModule::BlinkerStatus* unsafe_arena_release_blinkerstatus();

  // .ExampleModule.LightsStatus lightsStatus = 3;
  bool has_lightsstatus() const;
  private:
  bool _internal_has_lightsstatus() const;
  public:
  void clear_lightsstatus();
  const ::ExampleModule::LightsStatus& lightsstatus() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::LightsStatus* release_lightsstatus();
  ::ExampleModule::LightsStatus* mutable_lightsstatus();
  void set_allocated_lightsstatus(::ExampleModule::LightsStatus* lightsstatus);
  private:
  const ::ExampleModule::LightsStatus& _internal_lightsstatus() const;
  ::ExampleModule::LightsStatus* _internal_mutable_lightsstatus();
  public:
  void unsafe_arena_set_allocated_lightsstatus(
      ::ExampleModule::LightsStatus* lightsstatus);
  ::ExampleModule::LightsStatus* unsafe_arena_release_lightsstatus();

  void clear_DeviceStatusType();
  DeviceStatusTypeCase DeviceStatusType_case() const;
  // @@protoc_insertion_point(class_scope:ExampleModule.ExampleStatus)
 private:
  class _Internal;
  void set_has_blinkerstatus();
  void set_has_lightsstatus();

  inline bool has_DeviceStatusType() const;
  inline void clear_has_DeviceStatusType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ExampleModule::Device* device_;
  union DeviceStatusTypeUnion {
    constexpr DeviceStatusTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ExampleModule::BlinkerStatus* blinkerstatus_;
    ::ExampleModule::LightsStatus* lightsstatus_;
  } DeviceStatusType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class ExampleCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.ExampleCommand) */ {
 public:
  inline ExampleCommand() : ExampleCommand(nullptr) {}
  ~ExampleCommand() override;
  explicit constexpr ExampleCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleCommand(const ExampleCommand& from);
  ExampleCommand(ExampleCommand&& from) noexcept
    : ExampleCommand() {
    *this = ::std::move(from);
  }

  inline ExampleCommand& operator=(const ExampleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleCommand& operator=(ExampleCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleCommand& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceCommandTypeCase {
    kBlinkerCommand = 2,
    kLightsCommand = 3,
    DEVICECOMMANDTYPE_NOT_SET = 0,
  };

  static inline const ExampleCommand* internal_default_instance() {
    return reinterpret_cast<const ExampleCommand*>(
               &_ExampleCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExampleCommand& a, ExampleCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExampleCommand* New() const final {
    return new ExampleCommand();
  }

  ExampleCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExampleCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExampleCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.ExampleCommand";
  }
  protected:
  explicit ExampleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kBlinkerCommandFieldNumber = 2,
    kLightsCommandFieldNumber = 3,
  };
  // .ExampleModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::ExampleModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::Device* release_device();
  ::ExampleModule::Device* mutable_device();
  void set_allocated_device(::ExampleModule::Device* device);
  private:
  const ::ExampleModule::Device& _internal_device() const;
  ::ExampleModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::ExampleModule::Device* device);
  ::ExampleModule::Device* unsafe_arena_release_device();

  // .ExampleModule.BlinkerCommand blinkerCommand = 2;
  bool has_blinkercommand() const;
  private:
  bool _internal_has_blinkercommand() const;
  public:
  void clear_blinkercommand();
  const ::ExampleModule::BlinkerCommand& blinkercommand() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::BlinkerCommand* release_blinkercommand();
  ::ExampleModule::BlinkerCommand* mutable_blinkercommand();
  void set_allocated_blinkercommand(::ExampleModule::BlinkerCommand* blinkercommand);
  private:
  const ::ExampleModule::BlinkerCommand& _internal_blinkercommand() const;
  ::ExampleModule::BlinkerCommand* _internal_mutable_blinkercommand();
  public:
  void unsafe_arena_set_allocated_blinkercommand(
      ::ExampleModule::BlinkerCommand* blinkercommand);
  ::ExampleModule::BlinkerCommand* unsafe_arena_release_blinkercommand();

  // .ExampleModule.LightsCommand lightsCommand = 3;
  bool has_lightscommand() const;
  private:
  bool _internal_has_lightscommand() const;
  public:
  void clear_lightscommand();
  const ::ExampleModule::LightsCommand& lightscommand() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::LightsCommand* release_lightscommand();
  ::ExampleModule::LightsCommand* mutable_lightscommand();
  void set_allocated_lightscommand(::ExampleModule::LightsCommand* lightscommand);
  private:
  const ::ExampleModule::LightsCommand& _internal_lightscommand() const;
  ::ExampleModule::LightsCommand* _internal_mutable_lightscommand();
  public:
  void unsafe_arena_set_allocated_lightscommand(
      ::ExampleModule::LightsCommand* lightscommand);
  ::ExampleModule::LightsCommand* unsafe_arena_release_lightscommand();

  void clear_DeviceCommandType();
  DeviceCommandTypeCase DeviceCommandType_case() const;
  // @@protoc_insertion_point(class_scope:ExampleModule.ExampleCommand)
 private:
  class _Internal;
  void set_has_blinkercommand();
  void set_has_lightscommand();

  inline bool has_DeviceCommandType() const;
  inline void clear_has_DeviceCommandType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ExampleModule::Device* device_;
  union DeviceCommandTypeUnion {
    constexpr DeviceCommandTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ExampleModule::BlinkerCommand* blinkercommand_;
    ::ExampleModule::LightsCommand* lightscommand_;
  } DeviceCommandType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class ExampleError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.ExampleError) */ {
 public:
  inline ExampleError() : ExampleError(nullptr) {}
  ~ExampleError() override;
  explicit constexpr ExampleError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleError(const ExampleError& from);
  ExampleError(ExampleError&& from) noexcept
    : ExampleError() {
    *this = ::std::move(from);
  }

  inline ExampleError& operator=(const ExampleError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleError& operator=(ExampleError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleError& default_instance() {
    return *internal_default_instance();
  }
  enum DeviceErrorTypeCase {
    kBlinkerError = 2,
    kLightsError = 3,
    DEVICEERRORTYPE_NOT_SET = 0,
  };

  static inline const ExampleError* internal_default_instance() {
    return reinterpret_cast<const ExampleError*>(
               &_ExampleError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExampleError& a, ExampleError& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExampleError* New() const final {
    return new ExampleError();
  }

  ExampleError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExampleError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExampleError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.ExampleError";
  }
  protected:
  explicit ExampleError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kBlinkerErrorFieldNumber = 2,
    kLightsErrorFieldNumber = 3,
  };
  // .ExampleModule.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::ExampleModule::Device& device() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::Device* release_device();
  ::ExampleModule::Device* mutable_device();
  void set_allocated_device(::ExampleModule::Device* device);
  private:
  const ::ExampleModule::Device& _internal_device() const;
  ::ExampleModule::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::ExampleModule::Device* device);
  ::ExampleModule::Device* unsafe_arena_release_device();

  // .ExampleModule.BlinkerError blinkerError = 2;
  bool has_blinkererror() const;
  private:
  bool _internal_has_blinkererror() const;
  public:
  void clear_blinkererror();
  const ::ExampleModule::BlinkerError& blinkererror() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::BlinkerError* release_blinkererror();
  ::ExampleModule::BlinkerError* mutable_blinkererror();
  void set_allocated_blinkererror(::ExampleModule::BlinkerError* blinkererror);
  private:
  const ::ExampleModule::BlinkerError& _internal_blinkererror() const;
  ::ExampleModule::BlinkerError* _internal_mutable_blinkererror();
  public:
  void unsafe_arena_set_allocated_blinkererror(
      ::ExampleModule::BlinkerError* blinkererror);
  ::ExampleModule::BlinkerError* unsafe_arena_release_blinkererror();

  // .ExampleModule.LightsError lightsError = 3;
  bool has_lightserror() const;
  private:
  bool _internal_has_lightserror() const;
  public:
  void clear_lightserror();
  const ::ExampleModule::LightsError& lightserror() const;
  PROTOBUF_MUST_USE_RESULT ::ExampleModule::LightsError* release_lightserror();
  ::ExampleModule::LightsError* mutable_lightserror();
  void set_allocated_lightserror(::ExampleModule::LightsError* lightserror);
  private:
  const ::ExampleModule::LightsError& _internal_lightserror() const;
  ::ExampleModule::LightsError* _internal_mutable_lightserror();
  public:
  void unsafe_arena_set_allocated_lightserror(
      ::ExampleModule::LightsError* lightserror);
  ::ExampleModule::LightsError* unsafe_arena_release_lightserror();

  void clear_DeviceErrorType();
  DeviceErrorTypeCase DeviceErrorType_case() const;
  // @@protoc_insertion_point(class_scope:ExampleModule.ExampleError)
 private:
  class _Internal;
  void set_has_blinkererror();
  void set_has_lightserror();

  inline bool has_DeviceErrorType() const;
  inline void clear_has_DeviceErrorType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ExampleModule::Device* device_;
  union DeviceErrorTypeUnion {
    constexpr DeviceErrorTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::ExampleModule::BlinkerError* blinkererror_;
    ::ExampleModule::LightsError* lightserror_;
  } DeviceErrorType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return new Device();
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Device_Module Module;
  static constexpr Module RESERVED_MODULE =
    Device_Module_RESERVED_MODULE;
  static constexpr Module EXAMPLE_MODULE =
    Device_Module_EXAMPLE_MODULE;
  static inline bool Module_IsValid(int value) {
    return Device_Module_IsValid(value);
  }
  static constexpr Module Module_MIN =
    Device_Module_Module_MIN;
  static constexpr Module Module_MAX =
    Device_Module_Module_MAX;
  static constexpr int Module_ARRAYSIZE =
    Device_Module_Module_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Module_descriptor() {
    return Device_Module_descriptor();
  }
  template<typename T>
  static inline const std::string& Module_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Module>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Module_Name.");
    return Device_Module_Name(enum_t_value);
  }
  static inline bool Module_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Module* value) {
    return Device_Module_Parse(name, value);
  }

  typedef Device_DeviceType DeviceType;
  static constexpr DeviceType BLINKER =
    Device_DeviceType_BLINKER;
  static constexpr DeviceType LIGHTS =
    Device_DeviceType_LIGHTS;
  static inline bool DeviceType_IsValid(int value) {
    return Device_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    Device_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    Device_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return Device_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return Device_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeviceType* value) {
    return Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 3,
    kModuleFieldNumber = 1,
    kDeviceTypeFieldNumber = 2,
  };
  // string deviceName = 3;
  void clear_devicename();
  const std::string& devicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_devicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_devicename();
  PROTOBUF_MUST_USE_RESULT std::string* release_devicename();
  void set_allocated_devicename(std::string* devicename);
  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(const std::string& value);
  std::string* _internal_mutable_devicename();
  public:

  // .ExampleModule.Device.Module module = 1;
  void clear_module();
  ::ExampleModule::Device_Module module() const;
  void set_module(::ExampleModule::Device_Module value);
  private:
  ::ExampleModule::Device_Module _internal_module() const;
  void _internal_set_module(::ExampleModule::Device_Module value);
  public:

  // .ExampleModule.Device.DeviceType deviceType = 2;
  void clear_devicetype();
  ::ExampleModule::Device_DeviceType devicetype() const;
  void set_devicetype(::ExampleModule::Device_DeviceType value);
  private:
  ::ExampleModule::Device_DeviceType _internal_devicetype() const;
  void _internal_set_devicetype(::ExampleModule::Device_DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
  int module_;
  int devicetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class BlinkerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerStatus) */ {
 public:
  inline BlinkerStatus() : BlinkerStatus(nullptr) {}
  ~BlinkerStatus() override;
  explicit constexpr BlinkerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerStatus(const BlinkerStatus& from);
  BlinkerStatus(BlinkerStatus&& from) noexcept
    : BlinkerStatus() {
    *this = ::std::move(from);
  }

  inline BlinkerStatus& operator=(const BlinkerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerStatus& operator=(BlinkerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerStatus* internal_default_instance() {
    return reinterpret_cast<const BlinkerStatus*>(
               &_BlinkerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlinkerStatus& a, BlinkerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlinkerStatus* New() const final {
    return new BlinkerStatus();
  }

  BlinkerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlinkerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlinkerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerStatus";
  }
  protected:
  explicit BlinkerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFlashingFieldNumber = 1,
  };
  // bool isFlashing = 1;
  void clear_isflashing();
  bool isflashing() const;
  void set_isflashing(bool value);
  private:
  bool _internal_isflashing() const;
  void _internal_set_isflashing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool isflashing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsStatus) */ {
 public:
  inline LightsStatus() : LightsStatus(nullptr) {}
  ~LightsStatus() override;
  explicit constexpr LightsStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsStatus(const LightsStatus& from);
  LightsStatus(LightsStatus&& from) noexcept
    : LightsStatus() {
    *this = ::std::move(from);
  }

  inline LightsStatus& operator=(const LightsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsStatus& operator=(LightsStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsStatus* internal_default_instance() {
    return reinterpret_cast<const LightsStatus*>(
               &_LightsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LightsStatus& a, LightsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightsStatus* New() const final {
    return new LightsStatus();
  }

  LightsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightsStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LightsStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsStatus";
  }
  protected:
  explicit LightsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOnFieldNumber = 1,
  };
  // bool isOn = 1;
  void clear_ison();
  bool ison() const;
  void set_ison(bool value);
  private:
  bool _internal_ison() const;
  void _internal_set_ison(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class BlinkerCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerCommand) */ {
 public:
  inline BlinkerCommand() : BlinkerCommand(nullptr) {}
  ~BlinkerCommand() override;
  explicit constexpr BlinkerCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerCommand(const BlinkerCommand& from);
  BlinkerCommand(BlinkerCommand&& from) noexcept
    : BlinkerCommand() {
    *this = ::std::move(from);
  }

  inline BlinkerCommand& operator=(const BlinkerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerCommand& operator=(BlinkerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerCommand* internal_default_instance() {
    return reinterpret_cast<const BlinkerCommand*>(
               &_BlinkerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlinkerCommand& a, BlinkerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlinkerCommand* New() const final {
    return new BlinkerCommand();
  }

  BlinkerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlinkerCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlinkerCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerCommand";
  }
  protected:
  explicit BlinkerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlinkerCommand_Command Command;
  static constexpr Command TURN_ON =
    BlinkerCommand_Command_TURN_ON;
  static constexpr Command TURN_OFF =
    BlinkerCommand_Command_TURN_OFF;
  static inline bool Command_IsValid(int value) {
    return BlinkerCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    BlinkerCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    BlinkerCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    BlinkerCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return BlinkerCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return BlinkerCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return BlinkerCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ExampleModule.BlinkerCommand.Command command = 1;
  void clear_command();
  ::ExampleModule::BlinkerCommand_Command command() const;
  void set_command(::ExampleModule::BlinkerCommand_Command value);
  private:
  ::ExampleModule::BlinkerCommand_Command _internal_command() const;
  void _internal_set_command(::ExampleModule::BlinkerCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsCommand) */ {
 public:
  inline LightsCommand() : LightsCommand(nullptr) {}
  ~LightsCommand() override;
  explicit constexpr LightsCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsCommand(const LightsCommand& from);
  LightsCommand(LightsCommand&& from) noexcept
    : LightsCommand() {
    *this = ::std::move(from);
  }

  inline LightsCommand& operator=(const LightsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsCommand& operator=(LightsCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsCommand* internal_default_instance() {
    return reinterpret_cast<const LightsCommand*>(
               &_LightsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LightsCommand& a, LightsCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsCommand* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightsCommand* New() const final {
    return new LightsCommand();
  }

  LightsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightsCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LightsCommand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsCommand";
  }
  protected:
  explicit LightsCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LightsCommand_Command Command;
  static constexpr Command PRESS =
    LightsCommand_Command_PRESS;
  static inline bool Command_IsValid(int value) {
    return LightsCommand_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    LightsCommand_Command_Command_MIN;
  static constexpr Command Command_MAX =
    LightsCommand_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    LightsCommand_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return LightsCommand_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return LightsCommand_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return LightsCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // .ExampleModule.LightsCommand.Command command = 1;
  void clear_command();
  ::ExampleModule::LightsCommand_Command command() const;
  void set_command(::ExampleModule::LightsCommand_Command value);
  private:
  ::ExampleModule::LightsCommand_Command _internal_command() const;
  void _internal_set_command(::ExampleModule::LightsCommand_Command value);
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class BlinkerError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.BlinkerError) */ {
 public:
  inline BlinkerError() : BlinkerError(nullptr) {}
  ~BlinkerError() override;
  explicit constexpr BlinkerError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlinkerError(const BlinkerError& from);
  BlinkerError(BlinkerError&& from) noexcept
    : BlinkerError() {
    *this = ::std::move(from);
  }

  inline BlinkerError& operator=(const BlinkerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlinkerError& operator=(BlinkerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlinkerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlinkerError* internal_default_instance() {
    return reinterpret_cast<const BlinkerError*>(
               &_BlinkerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BlinkerError& a, BlinkerError& b) {
    a.Swap(&b);
  }
  inline void Swap(BlinkerError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlinkerError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlinkerError* New() const final {
    return new BlinkerError();
  }

  BlinkerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlinkerError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlinkerError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlinkerError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlinkerError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.BlinkerError";
  }
  protected:
  explicit BlinkerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_MUST_USE_RESULT std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.BlinkerError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// -------------------------------------------------------------------

class LightsError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExampleModule.LightsError) */ {
 public:
  inline LightsError() : LightsError(nullptr) {}
  ~LightsError() override;
  explicit constexpr LightsError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightsError(const LightsError& from);
  LightsError(LightsError&& from) noexcept
    : LightsError() {
    *this = ::std::move(from);
  }

  inline LightsError& operator=(const LightsError& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightsError& operator=(LightsError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightsError& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightsError* internal_default_instance() {
    return reinterpret_cast<const LightsError*>(
               &_LightsError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LightsError& a, LightsError& b) {
    a.Swap(&b);
  }
  inline void Swap(LightsError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightsError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightsError* New() const final {
    return new LightsError();
  }

  LightsError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightsError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightsError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LightsError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightsError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExampleModule.LightsError";
  }
  protected:
  explicit LightsError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 1,
  };
  // string errorMessage = 1;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_MUST_USE_RESULT std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // @@protoc_insertion_point(class_scope:ExampleModule.LightsError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_modules_2fExampleModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExampleStatus

// .ExampleModule.Device device = 1;
inline bool ExampleStatus::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool ExampleStatus::has_device() const {
  return _internal_has_device();
}
inline void ExampleStatus::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::ExampleModule::Device& ExampleStatus::_internal_device() const {
  const ::ExampleModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::ExampleModule::Device&>(
      ::ExampleModule::_Device_default_instance_);
}
inline const ::ExampleModule::Device& ExampleStatus::device() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleStatus.device)
  return _internal_device();
}
inline void ExampleStatus::unsafe_arena_set_allocated_device(
    ::ExampleModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleStatus.device)
}
inline ::ExampleModule::Device* ExampleStatus::release_device() {
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ExampleModule::Device* ExampleStatus::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleStatus.device)
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::ExampleModule::Device* ExampleStatus::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExampleModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::ExampleModule::Device* ExampleStatus::mutable_device() {
  ::ExampleModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleStatus.device)
  return _msg;
}
inline void ExampleStatus::set_allocated_device(::ExampleModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ExampleModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.ExampleStatus.device)
}

// .ExampleModule.BlinkerStatus blinkerStatus = 2;
inline bool ExampleStatus::_internal_has_blinkerstatus() const {
  return DeviceStatusType_case() == kBlinkerStatus;
}
inline bool ExampleStatus::has_blinkerstatus() const {
  return _internal_has_blinkerstatus();
}
inline void ExampleStatus::set_has_blinkerstatus() {
  _oneof_case_[0] = kBlinkerStatus;
}
inline void ExampleStatus::clear_blinkerstatus() {
  if (_internal_has_blinkerstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceStatusType_.blinkerstatus_;
    }
    clear_has_DeviceStatusType();
  }
}
inline ::ExampleModule::BlinkerStatus* ExampleStatus::release_blinkerstatus() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleStatus.blinkerStatus)
  if (_internal_has_blinkerstatus()) {
    clear_has_DeviceStatusType();
      ::ExampleModule::BlinkerStatus* temp = DeviceStatusType_.blinkerstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceStatusType_.blinkerstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::BlinkerStatus& ExampleStatus::_internal_blinkerstatus() const {
  return _internal_has_blinkerstatus()
      ? *DeviceStatusType_.blinkerstatus_
      : reinterpret_cast< ::ExampleModule::BlinkerStatus&>(::ExampleModule::_BlinkerStatus_default_instance_);
}
inline const ::ExampleModule::BlinkerStatus& ExampleStatus::blinkerstatus() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleStatus.blinkerStatus)
  return _internal_blinkerstatus();
}
inline ::ExampleModule::BlinkerStatus* ExampleStatus::unsafe_arena_release_blinkerstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleStatus.blinkerStatus)
  if (_internal_has_blinkerstatus()) {
    clear_has_DeviceStatusType();
    ::ExampleModule::BlinkerStatus* temp = DeviceStatusType_.blinkerstatus_;
    DeviceStatusType_.blinkerstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleStatus::unsafe_arena_set_allocated_blinkerstatus(::ExampleModule::BlinkerStatus* blinkerstatus) {
  clear_DeviceStatusType();
  if (blinkerstatus) {
    set_has_blinkerstatus();
    DeviceStatusType_.blinkerstatus_ = blinkerstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleStatus.blinkerStatus)
}
inline ::ExampleModule::BlinkerStatus* ExampleStatus::_internal_mutable_blinkerstatus() {
  if (!_internal_has_blinkerstatus()) {
    clear_DeviceStatusType();
    set_has_blinkerstatus();
    DeviceStatusType_.blinkerstatus_ = CreateMaybeMessage< ::ExampleModule::BlinkerStatus >(GetArenaForAllocation());
  }
  return DeviceStatusType_.blinkerstatus_;
}
inline ::ExampleModule::BlinkerStatus* ExampleStatus::mutable_blinkerstatus() {
  ::ExampleModule::BlinkerStatus* _msg = _internal_mutable_blinkerstatus();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleStatus.blinkerStatus)
  return _msg;
}

// .ExampleModule.LightsStatus lightsStatus = 3;
inline bool ExampleStatus::_internal_has_lightsstatus() const {
  return DeviceStatusType_case() == kLightsStatus;
}
inline bool ExampleStatus::has_lightsstatus() const {
  return _internal_has_lightsstatus();
}
inline void ExampleStatus::set_has_lightsstatus() {
  _oneof_case_[0] = kLightsStatus;
}
inline void ExampleStatus::clear_lightsstatus() {
  if (_internal_has_lightsstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceStatusType_.lightsstatus_;
    }
    clear_has_DeviceStatusType();
  }
}
inline ::ExampleModule::LightsStatus* ExampleStatus::release_lightsstatus() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleStatus.lightsStatus)
  if (_internal_has_lightsstatus()) {
    clear_has_DeviceStatusType();
      ::ExampleModule::LightsStatus* temp = DeviceStatusType_.lightsstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceStatusType_.lightsstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::LightsStatus& ExampleStatus::_internal_lightsstatus() const {
  return _internal_has_lightsstatus()
      ? *DeviceStatusType_.lightsstatus_
      : reinterpret_cast< ::ExampleModule::LightsStatus&>(::ExampleModule::_LightsStatus_default_instance_);
}
inline const ::ExampleModule::LightsStatus& ExampleStatus::lightsstatus() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleStatus.lightsStatus)
  return _internal_lightsstatus();
}
inline ::ExampleModule::LightsStatus* ExampleStatus::unsafe_arena_release_lightsstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleStatus.lightsStatus)
  if (_internal_has_lightsstatus()) {
    clear_has_DeviceStatusType();
    ::ExampleModule::LightsStatus* temp = DeviceStatusType_.lightsstatus_;
    DeviceStatusType_.lightsstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleStatus::unsafe_arena_set_allocated_lightsstatus(::ExampleModule::LightsStatus* lightsstatus) {
  clear_DeviceStatusType();
  if (lightsstatus) {
    set_has_lightsstatus();
    DeviceStatusType_.lightsstatus_ = lightsstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleStatus.lightsStatus)
}
inline ::ExampleModule::LightsStatus* ExampleStatus::_internal_mutable_lightsstatus() {
  if (!_internal_has_lightsstatus()) {
    clear_DeviceStatusType();
    set_has_lightsstatus();
    DeviceStatusType_.lightsstatus_ = CreateMaybeMessage< ::ExampleModule::LightsStatus >(GetArenaForAllocation());
  }
  return DeviceStatusType_.lightsstatus_;
}
inline ::ExampleModule::LightsStatus* ExampleStatus::mutable_lightsstatus() {
  ::ExampleModule::LightsStatus* _msg = _internal_mutable_lightsstatus();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleStatus.lightsStatus)
  return _msg;
}

inline bool ExampleStatus::has_DeviceStatusType() const {
  return DeviceStatusType_case() != DEVICESTATUSTYPE_NOT_SET;
}
inline void ExampleStatus::clear_has_DeviceStatusType() {
  _oneof_case_[0] = DEVICESTATUSTYPE_NOT_SET;
}
inline ExampleStatus::DeviceStatusTypeCase ExampleStatus::DeviceStatusType_case() const {
  return ExampleStatus::DeviceStatusTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExampleCommand

// .ExampleModule.Device device = 1;
inline bool ExampleCommand::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool ExampleCommand::has_device() const {
  return _internal_has_device();
}
inline void ExampleCommand::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::ExampleModule::Device& ExampleCommand::_internal_device() const {
  const ::ExampleModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::ExampleModule::Device&>(
      ::ExampleModule::_Device_default_instance_);
}
inline const ::ExampleModule::Device& ExampleCommand::device() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleCommand.device)
  return _internal_device();
}
inline void ExampleCommand::unsafe_arena_set_allocated_device(
    ::ExampleModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleCommand.device)
}
inline ::ExampleModule::Device* ExampleCommand::release_device() {
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ExampleModule::Device* ExampleCommand::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleCommand.device)
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::ExampleModule::Device* ExampleCommand::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExampleModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::ExampleModule::Device* ExampleCommand::mutable_device() {
  ::ExampleModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleCommand.device)
  return _msg;
}
inline void ExampleCommand::set_allocated_device(::ExampleModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ExampleModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.ExampleCommand.device)
}

// .ExampleModule.BlinkerCommand blinkerCommand = 2;
inline bool ExampleCommand::_internal_has_blinkercommand() const {
  return DeviceCommandType_case() == kBlinkerCommand;
}
inline bool ExampleCommand::has_blinkercommand() const {
  return _internal_has_blinkercommand();
}
inline void ExampleCommand::set_has_blinkercommand() {
  _oneof_case_[0] = kBlinkerCommand;
}
inline void ExampleCommand::clear_blinkercommand() {
  if (_internal_has_blinkercommand()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceCommandType_.blinkercommand_;
    }
    clear_has_DeviceCommandType();
  }
}
inline ::ExampleModule::BlinkerCommand* ExampleCommand::release_blinkercommand() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleCommand.blinkerCommand)
  if (_internal_has_blinkercommand()) {
    clear_has_DeviceCommandType();
      ::ExampleModule::BlinkerCommand* temp = DeviceCommandType_.blinkercommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceCommandType_.blinkercommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::BlinkerCommand& ExampleCommand::_internal_blinkercommand() const {
  return _internal_has_blinkercommand()
      ? *DeviceCommandType_.blinkercommand_
      : reinterpret_cast< ::ExampleModule::BlinkerCommand&>(::ExampleModule::_BlinkerCommand_default_instance_);
}
inline const ::ExampleModule::BlinkerCommand& ExampleCommand::blinkercommand() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleCommand.blinkerCommand)
  return _internal_blinkercommand();
}
inline ::ExampleModule::BlinkerCommand* ExampleCommand::unsafe_arena_release_blinkercommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleCommand.blinkerCommand)
  if (_internal_has_blinkercommand()) {
    clear_has_DeviceCommandType();
    ::ExampleModule::BlinkerCommand* temp = DeviceCommandType_.blinkercommand_;
    DeviceCommandType_.blinkercommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleCommand::unsafe_arena_set_allocated_blinkercommand(::ExampleModule::BlinkerCommand* blinkercommand) {
  clear_DeviceCommandType();
  if (blinkercommand) {
    set_has_blinkercommand();
    DeviceCommandType_.blinkercommand_ = blinkercommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleCommand.blinkerCommand)
}
inline ::ExampleModule::BlinkerCommand* ExampleCommand::_internal_mutable_blinkercommand() {
  if (!_internal_has_blinkercommand()) {
    clear_DeviceCommandType();
    set_has_blinkercommand();
    DeviceCommandType_.blinkercommand_ = CreateMaybeMessage< ::ExampleModule::BlinkerCommand >(GetArenaForAllocation());
  }
  return DeviceCommandType_.blinkercommand_;
}
inline ::ExampleModule::BlinkerCommand* ExampleCommand::mutable_blinkercommand() {
  ::ExampleModule::BlinkerCommand* _msg = _internal_mutable_blinkercommand();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleCommand.blinkerCommand)
  return _msg;
}

// .ExampleModule.LightsCommand lightsCommand = 3;
inline bool ExampleCommand::_internal_has_lightscommand() const {
  return DeviceCommandType_case() == kLightsCommand;
}
inline bool ExampleCommand::has_lightscommand() const {
  return _internal_has_lightscommand();
}
inline void ExampleCommand::set_has_lightscommand() {
  _oneof_case_[0] = kLightsCommand;
}
inline void ExampleCommand::clear_lightscommand() {
  if (_internal_has_lightscommand()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceCommandType_.lightscommand_;
    }
    clear_has_DeviceCommandType();
  }
}
inline ::ExampleModule::LightsCommand* ExampleCommand::release_lightscommand() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleCommand.lightsCommand)
  if (_internal_has_lightscommand()) {
    clear_has_DeviceCommandType();
      ::ExampleModule::LightsCommand* temp = DeviceCommandType_.lightscommand_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceCommandType_.lightscommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::LightsCommand& ExampleCommand::_internal_lightscommand() const {
  return _internal_has_lightscommand()
      ? *DeviceCommandType_.lightscommand_
      : reinterpret_cast< ::ExampleModule::LightsCommand&>(::ExampleModule::_LightsCommand_default_instance_);
}
inline const ::ExampleModule::LightsCommand& ExampleCommand::lightscommand() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleCommand.lightsCommand)
  return _internal_lightscommand();
}
inline ::ExampleModule::LightsCommand* ExampleCommand::unsafe_arena_release_lightscommand() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleCommand.lightsCommand)
  if (_internal_has_lightscommand()) {
    clear_has_DeviceCommandType();
    ::ExampleModule::LightsCommand* temp = DeviceCommandType_.lightscommand_;
    DeviceCommandType_.lightscommand_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleCommand::unsafe_arena_set_allocated_lightscommand(::ExampleModule::LightsCommand* lightscommand) {
  clear_DeviceCommandType();
  if (lightscommand) {
    set_has_lightscommand();
    DeviceCommandType_.lightscommand_ = lightscommand;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleCommand.lightsCommand)
}
inline ::ExampleModule::LightsCommand* ExampleCommand::_internal_mutable_lightscommand() {
  if (!_internal_has_lightscommand()) {
    clear_DeviceCommandType();
    set_has_lightscommand();
    DeviceCommandType_.lightscommand_ = CreateMaybeMessage< ::ExampleModule::LightsCommand >(GetArenaForAllocation());
  }
  return DeviceCommandType_.lightscommand_;
}
inline ::ExampleModule::LightsCommand* ExampleCommand::mutable_lightscommand() {
  ::ExampleModule::LightsCommand* _msg = _internal_mutable_lightscommand();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleCommand.lightsCommand)
  return _msg;
}

inline bool ExampleCommand::has_DeviceCommandType() const {
  return DeviceCommandType_case() != DEVICECOMMANDTYPE_NOT_SET;
}
inline void ExampleCommand::clear_has_DeviceCommandType() {
  _oneof_case_[0] = DEVICECOMMANDTYPE_NOT_SET;
}
inline ExampleCommand::DeviceCommandTypeCase ExampleCommand::DeviceCommandType_case() const {
  return ExampleCommand::DeviceCommandTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExampleError

// .ExampleModule.Device device = 1;
inline bool ExampleError::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool ExampleError::has_device() const {
  return _internal_has_device();
}
inline void ExampleError::clear_device() {
  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::ExampleModule::Device& ExampleError::_internal_device() const {
  const ::ExampleModule::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::ExampleModule::Device&>(
      ::ExampleModule::_Device_default_instance_);
}
inline const ::ExampleModule::Device& ExampleError::device() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleError.device)
  return _internal_device();
}
inline void ExampleError::unsafe_arena_set_allocated_device(
    ::ExampleModule::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleError.device)
}
inline ::ExampleModule::Device* ExampleError::release_device() {
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ExampleModule::Device* ExampleError::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleError.device)
  
  ::ExampleModule::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::ExampleModule::Device* ExampleError::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::ExampleModule::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::ExampleModule::Device* ExampleError::mutable_device() {
  ::ExampleModule::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleError.device)
  return _msg;
}
inline void ExampleError::set_allocated_device(::ExampleModule::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ExampleModule::Device>::GetOwningArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.ExampleError.device)
}

// .ExampleModule.BlinkerError blinkerError = 2;
inline bool ExampleError::_internal_has_blinkererror() const {
  return DeviceErrorType_case() == kBlinkerError;
}
inline bool ExampleError::has_blinkererror() const {
  return _internal_has_blinkererror();
}
inline void ExampleError::set_has_blinkererror() {
  _oneof_case_[0] = kBlinkerError;
}
inline void ExampleError::clear_blinkererror() {
  if (_internal_has_blinkererror()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceErrorType_.blinkererror_;
    }
    clear_has_DeviceErrorType();
  }
}
inline ::ExampleModule::BlinkerError* ExampleError::release_blinkererror() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleError.blinkerError)
  if (_internal_has_blinkererror()) {
    clear_has_DeviceErrorType();
      ::ExampleModule::BlinkerError* temp = DeviceErrorType_.blinkererror_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceErrorType_.blinkererror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::BlinkerError& ExampleError::_internal_blinkererror() const {
  return _internal_has_blinkererror()
      ? *DeviceErrorType_.blinkererror_
      : reinterpret_cast< ::ExampleModule::BlinkerError&>(::ExampleModule::_BlinkerError_default_instance_);
}
inline const ::ExampleModule::BlinkerError& ExampleError::blinkererror() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleError.blinkerError)
  return _internal_blinkererror();
}
inline ::ExampleModule::BlinkerError* ExampleError::unsafe_arena_release_blinkererror() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleError.blinkerError)
  if (_internal_has_blinkererror()) {
    clear_has_DeviceErrorType();
    ::ExampleModule::BlinkerError* temp = DeviceErrorType_.blinkererror_;
    DeviceErrorType_.blinkererror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleError::unsafe_arena_set_allocated_blinkererror(::ExampleModule::BlinkerError* blinkererror) {
  clear_DeviceErrorType();
  if (blinkererror) {
    set_has_blinkererror();
    DeviceErrorType_.blinkererror_ = blinkererror;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleError.blinkerError)
}
inline ::ExampleModule::BlinkerError* ExampleError::_internal_mutable_blinkererror() {
  if (!_internal_has_blinkererror()) {
    clear_DeviceErrorType();
    set_has_blinkererror();
    DeviceErrorType_.blinkererror_ = CreateMaybeMessage< ::ExampleModule::BlinkerError >(GetArenaForAllocation());
  }
  return DeviceErrorType_.blinkererror_;
}
inline ::ExampleModule::BlinkerError* ExampleError::mutable_blinkererror() {
  ::ExampleModule::BlinkerError* _msg = _internal_mutable_blinkererror();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleError.blinkerError)
  return _msg;
}

// .ExampleModule.LightsError lightsError = 3;
inline bool ExampleError::_internal_has_lightserror() const {
  return DeviceErrorType_case() == kLightsError;
}
inline bool ExampleError::has_lightserror() const {
  return _internal_has_lightserror();
}
inline void ExampleError::set_has_lightserror() {
  _oneof_case_[0] = kLightsError;
}
inline void ExampleError::clear_lightserror() {
  if (_internal_has_lightserror()) {
    if (GetArenaForAllocation() == nullptr) {
      delete DeviceErrorType_.lightserror_;
    }
    clear_has_DeviceErrorType();
  }
}
inline ::ExampleModule::LightsError* ExampleError::release_lightserror() {
  // @@protoc_insertion_point(field_release:ExampleModule.ExampleError.lightsError)
  if (_internal_has_lightserror()) {
    clear_has_DeviceErrorType();
      ::ExampleModule::LightsError* temp = DeviceErrorType_.lightserror_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    DeviceErrorType_.lightserror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ExampleModule::LightsError& ExampleError::_internal_lightserror() const {
  return _internal_has_lightserror()
      ? *DeviceErrorType_.lightserror_
      : reinterpret_cast< ::ExampleModule::LightsError&>(::ExampleModule::_LightsError_default_instance_);
}
inline const ::ExampleModule::LightsError& ExampleError::lightserror() const {
  // @@protoc_insertion_point(field_get:ExampleModule.ExampleError.lightsError)
  return _internal_lightserror();
}
inline ::ExampleModule::LightsError* ExampleError::unsafe_arena_release_lightserror() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ExampleModule.ExampleError.lightsError)
  if (_internal_has_lightserror()) {
    clear_has_DeviceErrorType();
    ::ExampleModule::LightsError* temp = DeviceErrorType_.lightserror_;
    DeviceErrorType_.lightserror_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExampleError::unsafe_arena_set_allocated_lightserror(::ExampleModule::LightsError* lightserror) {
  clear_DeviceErrorType();
  if (lightserror) {
    set_has_lightserror();
    DeviceErrorType_.lightserror_ = lightserror;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ExampleModule.ExampleError.lightsError)
}
inline ::ExampleModule::LightsError* ExampleError::_internal_mutable_lightserror() {
  if (!_internal_has_lightserror()) {
    clear_DeviceErrorType();
    set_has_lightserror();
    DeviceErrorType_.lightserror_ = CreateMaybeMessage< ::ExampleModule::LightsError >(GetArenaForAllocation());
  }
  return DeviceErrorType_.lightserror_;
}
inline ::ExampleModule::LightsError* ExampleError::mutable_lightserror() {
  ::ExampleModule::LightsError* _msg = _internal_mutable_lightserror();
  // @@protoc_insertion_point(field_mutable:ExampleModule.ExampleError.lightsError)
  return _msg;
}

inline bool ExampleError::has_DeviceErrorType() const {
  return DeviceErrorType_case() != DEVICEERRORTYPE_NOT_SET;
}
inline void ExampleError::clear_has_DeviceErrorType() {
  _oneof_case_[0] = DEVICEERRORTYPE_NOT_SET;
}
inline ExampleError::DeviceErrorTypeCase ExampleError::DeviceErrorType_case() const {
  return ExampleError::DeviceErrorTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Device

// .ExampleModule.Device.Module module = 1;
inline void Device::clear_module() {
  module_ = 0;
}
inline ::ExampleModule::Device_Module Device::_internal_module() const {
  return static_cast< ::ExampleModule::Device_Module >(module_);
}
inline ::ExampleModule::Device_Module Device::module() const {
  // @@protoc_insertion_point(field_get:ExampleModule.Device.module)
  return _internal_module();
}
inline void Device::_internal_set_module(::ExampleModule::Device_Module value) {
  
  module_ = value;
}
inline void Device::set_module(::ExampleModule::Device_Module value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:ExampleModule.Device.module)
}

// .ExampleModule.Device.DeviceType deviceType = 2;
inline void Device::clear_devicetype() {
  devicetype_ = 0;
}
inline ::ExampleModule::Device_DeviceType Device::_internal_devicetype() const {
  return static_cast< ::ExampleModule::Device_DeviceType >(devicetype_);
}
inline ::ExampleModule::Device_DeviceType Device::devicetype() const {
  // @@protoc_insertion_point(field_get:ExampleModule.Device.deviceType)
  return _internal_devicetype();
}
inline void Device::_internal_set_devicetype(::ExampleModule::Device_DeviceType value) {
  
  devicetype_ = value;
}
inline void Device::set_devicetype(::ExampleModule::Device_DeviceType value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:ExampleModule.Device.deviceType)
}

// string deviceName = 3;
inline void Device::clear_devicename() {
  devicename_.ClearToEmpty();
}
inline const std::string& Device::devicename() const {
  // @@protoc_insertion_point(field_get:ExampleModule.Device.deviceName)
  return _internal_devicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_devicename(ArgT0&& arg0, ArgT... args) {
 
 devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExampleModule.Device.deviceName)
}
inline std::string* Device::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:ExampleModule.Device.deviceName)
  return _s;
}
inline const std::string& Device::_internal_devicename() const {
  return devicename_.Get();
}
inline void Device::_internal_set_devicename(const std::string& value) {
  
  devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_devicename() {
  
  return devicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_devicename() {
  // @@protoc_insertion_point(field_release:ExampleModule.Device.deviceName)
  return devicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_devicename(std::string* devicename) {
  if (devicename != nullptr) {
    
  } else {
    
  }
  devicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devicename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.Device.deviceName)
}

// -------------------------------------------------------------------

// BlinkerStatus

// bool isFlashing = 1;
inline void BlinkerStatus::clear_isflashing() {
  isflashing_ = false;
}
inline bool BlinkerStatus::_internal_isflashing() const {
  return isflashing_;
}
inline bool BlinkerStatus::isflashing() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerStatus.isFlashing)
  return _internal_isflashing();
}
inline void BlinkerStatus::_internal_set_isflashing(bool value) {
  
  isflashing_ = value;
}
inline void BlinkerStatus::set_isflashing(bool value) {
  _internal_set_isflashing(value);
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerStatus.isFlashing)
}

// -------------------------------------------------------------------

// LightsStatus

// bool isOn = 1;
inline void LightsStatus::clear_ison() {
  ison_ = false;
}
inline bool LightsStatus::_internal_ison() const {
  return ison_;
}
inline bool LightsStatus::ison() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsStatus.isOn)
  return _internal_ison();
}
inline void LightsStatus::_internal_set_ison(bool value) {
  
  ison_ = value;
}
inline void LightsStatus::set_ison(bool value) {
  _internal_set_ison(value);
  // @@protoc_insertion_point(field_set:ExampleModule.LightsStatus.isOn)
}

// -------------------------------------------------------------------

// BlinkerCommand

// .ExampleModule.BlinkerCommand.Command command = 1;
inline void BlinkerCommand::clear_command() {
  command_ = 0;
}
inline ::ExampleModule::BlinkerCommand_Command BlinkerCommand::_internal_command() const {
  return static_cast< ::ExampleModule::BlinkerCommand_Command >(command_);
}
inline ::ExampleModule::BlinkerCommand_Command BlinkerCommand::command() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerCommand.command)
  return _internal_command();
}
inline void BlinkerCommand::_internal_set_command(::ExampleModule::BlinkerCommand_Command value) {
  
  command_ = value;
}
inline void BlinkerCommand::set_command(::ExampleModule::BlinkerCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerCommand.command)
}

// -------------------------------------------------------------------

// LightsCommand

// .ExampleModule.LightsCommand.Command command = 1;
inline void LightsCommand::clear_command() {
  command_ = 0;
}
inline ::ExampleModule::LightsCommand_Command LightsCommand::_internal_command() const {
  return static_cast< ::ExampleModule::LightsCommand_Command >(command_);
}
inline ::ExampleModule::LightsCommand_Command LightsCommand::command() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsCommand.command)
  return _internal_command();
}
inline void LightsCommand::_internal_set_command(::ExampleModule::LightsCommand_Command value) {
  
  command_ = value;
}
inline void LightsCommand::set_command(::ExampleModule::LightsCommand_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ExampleModule.LightsCommand.command)
}

// -------------------------------------------------------------------

// BlinkerError

// string errorMessage = 1;
inline void BlinkerError::clear_errormessage() {
  errormessage_.ClearToEmpty();
}
inline const std::string& BlinkerError::errormessage() const {
  // @@protoc_insertion_point(field_get:ExampleModule.BlinkerError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlinkerError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExampleModule.BlinkerError.errorMessage)
}
inline std::string* BlinkerError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ExampleModule.BlinkerError.errorMessage)
  return _s;
}
inline const std::string& BlinkerError::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void BlinkerError::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlinkerError::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlinkerError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ExampleModule.BlinkerError.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlinkerError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.BlinkerError.errorMessage)
}

// -------------------------------------------------------------------

// LightsError

// string errorMessage = 1;
inline void LightsError::clear_errormessage() {
  errormessage_.ClearToEmpty();
}
inline const std::string& LightsError::errormessage() const {
  // @@protoc_insertion_point(field_get:ExampleModule.LightsError.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LightsError::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ExampleModule.LightsError.errorMessage)
}
inline std::string* LightsError::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:ExampleModule.LightsError.errorMessage)
  return _s;
}
inline const std::string& LightsError::_internal_errormessage() const {
  return errormessage_.Get();
}
inline void LightsError::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LightsError::_internal_mutable_errormessage() {
  
  return errormessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LightsError::release_errormessage() {
  // @@protoc_insertion_point(field_release:ExampleModule.LightsError.errorMessage)
  return errormessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LightsError::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ExampleModule.LightsError.errorMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExampleModule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ExampleModule::Device_Module> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::Device_Module>() {
  return ::ExampleModule::Device_Module_descriptor();
}
template <> struct is_proto_enum< ::ExampleModule::Device_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::Device_DeviceType>() {
  return ::ExampleModule::Device_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::ExampleModule::BlinkerCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::BlinkerCommand_Command>() {
  return ::ExampleModule::BlinkerCommand_Command_descriptor();
}
template <> struct is_proto_enum< ::ExampleModule::LightsCommand_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExampleModule::LightsCommand_Command>() {
  return ::ExampleModule::LightsCommand_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fExampleModule_2eproto
