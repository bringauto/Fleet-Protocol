// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ActionModule.proto

#include "modules/ActionModule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ActionModule {
constexpr ActionStatus::ActionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct ActionStatusDefaultTypeInternal {
  constexpr ActionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionStatusDefaultTypeInternal() {}
  union {
    ActionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionStatusDefaultTypeInternal _ActionStatus_default_instance_;
constexpr ActionCommand::ActionCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , _oneof_case_{}{}
struct ActionCommandDefaultTypeInternal {
  constexpr ActionCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionCommandDefaultTypeInternal() {}
  union {
    ActionCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionCommandDefaultTypeInternal _ActionCommand_default_instance_;
constexpr ActionError::ActionError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_(nullptr)
  , type_(0)

  , _oneof_case_{}{}
struct ActionErrorDefaultTypeInternal {
  constexpr ActionErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionErrorDefaultTypeInternal() {}
  union {
    ActionError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionErrorDefaultTypeInternal _ActionError_default_instance_;
constexpr Device::Device(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(0)

  , devicetype_(0)
{}
struct DeviceDefaultTypeInternal {
  constexpr DeviceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceDefaultTypeInternal _Device_default_instance_;
constexpr SystemLoggerStatus::SystemLoggerStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , sourcedevice_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verbosity_(0)
{}
struct SystemLoggerStatusDefaultTypeInternal {
  constexpr SystemLoggerStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemLoggerStatusDefaultTypeInternal() {}
  union {
    SystemLoggerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemLoggerStatusDefaultTypeInternal _SystemLoggerStatus_default_instance_;
constexpr GreenButtonStatus::GreenButtonStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ispressed_(false)
  , isalive_(false){}
struct GreenButtonStatusDefaultTypeInternal {
  constexpr GreenButtonStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GreenButtonStatusDefaultTypeInternal() {}
  union {
    GreenButtonStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GreenButtonStatusDefaultTypeInternal _GreenButtonStatus_default_instance_;
constexpr RedButtonStatus::RedButtonStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ispressed_(false){}
struct RedButtonStatusDefaultTypeInternal {
  constexpr RedButtonStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RedButtonStatusDefaultTypeInternal() {}
  union {
    RedButtonStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RedButtonStatusDefaultTypeInternal _RedButtonStatus_default_instance_;
constexpr WatchdogStatus::WatchdogStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isalive_(false){}
struct WatchdogStatusDefaultTypeInternal {
  constexpr WatchdogStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogStatusDefaultTypeInternal() {}
  union {
    WatchdogStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogStatusDefaultTypeInternal _WatchdogStatus_default_instance_;
constexpr SystemLoggerCommand::SystemLoggerCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
{}
struct SystemLoggerCommandDefaultTypeInternal {
  constexpr SystemLoggerCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemLoggerCommandDefaultTypeInternal() {}
  union {
    SystemLoggerCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemLoggerCommandDefaultTypeInternal _SystemLoggerCommand_default_instance_;
constexpr GreenButtonCommand::GreenButtonCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
{}
struct GreenButtonCommandDefaultTypeInternal {
  constexpr GreenButtonCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GreenButtonCommandDefaultTypeInternal() {}
  union {
    GreenButtonCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GreenButtonCommandDefaultTypeInternal _GreenButtonCommand_default_instance_;
constexpr RedButtonCommand::RedButtonCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
{}
struct RedButtonCommandDefaultTypeInternal {
  constexpr RedButtonCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RedButtonCommandDefaultTypeInternal() {}
  union {
    RedButtonCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RedButtonCommandDefaultTypeInternal _RedButtonCommand_default_instance_;
constexpr WatchdogCommand::WatchdogCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
{}
struct WatchdogCommandDefaultTypeInternal {
  constexpr WatchdogCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogCommandDefaultTypeInternal() {}
  union {
    WatchdogCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogCommandDefaultTypeInternal _WatchdogCommand_default_instance_;
constexpr SystemLoggerError::SystemLoggerError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errormessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SystemLoggerErrorDefaultTypeInternal {
  constexpr SystemLoggerErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemLoggerErrorDefaultTypeInternal() {}
  union {
    SystemLoggerError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemLoggerErrorDefaultTypeInternal _SystemLoggerError_default_instance_;
constexpr GreenButtonError::GreenButtonError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errormessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GreenButtonErrorDefaultTypeInternal {
  constexpr GreenButtonErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GreenButtonErrorDefaultTypeInternal() {}
  union {
    GreenButtonError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GreenButtonErrorDefaultTypeInternal _GreenButtonError_default_instance_;
constexpr RedButtonError::RedButtonError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errormessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RedButtonErrorDefaultTypeInternal {
  constexpr RedButtonErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RedButtonErrorDefaultTypeInternal() {}
  union {
    RedButtonError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RedButtonErrorDefaultTypeInternal _RedButtonError_default_instance_;
constexpr WatchdogError::WatchdogError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errormessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WatchdogErrorDefaultTypeInternal {
  constexpr WatchdogErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchdogErrorDefaultTypeInternal() {}
  union {
    WatchdogError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchdogErrorDefaultTypeInternal _WatchdogError_default_instance_;
}  // namespace ActionModule
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fActionModule_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fActionModule_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fActionModule_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fActionModule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionStatus, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionStatus, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionStatus, DeviceStatusType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionCommand, device_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionCommand, DeviceCommandType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionError, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionError, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionError, device_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionError, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ActionModule::ActionError, DeviceErrorType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::Device, module_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::Device, devicetype_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::Device, devicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerStatus, sourcedevice_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerStatus, logs_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerStatus, verbosity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonStatus, ispressed_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonStatus, isalive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonStatus, ispressed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogStatus, isalive_),
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogStatus, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::SystemLoggerError, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::GreenButtonError, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::RedButtonError, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActionModule::WatchdogError, errormessage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ActionModule::ActionStatus)},
  { 11, -1, sizeof(::ActionModule::ActionCommand)},
  { 22, -1, sizeof(::ActionModule::ActionError)},
  { 34, -1, sizeof(::ActionModule::Device)},
  { 42, -1, sizeof(::ActionModule::SystemLoggerStatus)},
  { 50, -1, sizeof(::ActionModule::GreenButtonStatus)},
  { 57, -1, sizeof(::ActionModule::RedButtonStatus)},
  { 63, -1, sizeof(::ActionModule::WatchdogStatus)},
  { 70, -1, sizeof(::ActionModule::SystemLoggerCommand)},
  { 76, -1, sizeof(::ActionModule::GreenButtonCommand)},
  { 82, -1, sizeof(::ActionModule::RedButtonCommand)},
  { 88, -1, sizeof(::ActionModule::WatchdogCommand)},
  { 94, -1, sizeof(::ActionModule::SystemLoggerError)},
  { 100, -1, sizeof(::ActionModule::GreenButtonError)},
  { 106, -1, sizeof(::ActionModule::RedButtonError)},
  { 112, -1, sizeof(::ActionModule::WatchdogError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_ActionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_ActionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_ActionError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_SystemLoggerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_GreenButtonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_RedButtonStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_WatchdogStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_SystemLoggerCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_GreenButtonCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_RedButtonCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_WatchdogCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_SystemLoggerError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_GreenButtonError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_RedButtonError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ActionModule::_WatchdogError_default_instance_),
};

const char descriptor_table_protodef_modules_2fActionModule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032modules/ActionModule.proto\022\014ActionModu"
  "le\"\270\002\n\014ActionStatus\022$\n\006device\030\001 \001(\0132\024.Ac"
  "tionModule.Device\022>\n\022systemLoggerStatus\030"
  "\002 \001(\0132 .ActionModule.SystemLoggerStatusH"
  "\000\022<\n\021greenButtonStatus\030\003 \001(\0132\037.ActionMod"
  "ule.GreenButtonStatusH\000\0228\n\017redButtonStat"
  "us\030\004 \001(\0132\035.ActionModule.RedButtonStatusH"
  "\000\0226\n\016watchdogStatus\030\005 \001(\0132\034.ActionModule"
  ".WatchdogStatusH\000B\022\n\020DeviceStatusType\"\302\002"
  "\n\rActionCommand\022$\n\006device\030\001 \001(\0132\024.Action"
  "Module.Device\022>\n\022greenButtonCommand\030\002 \001("
  "\0132 .ActionModule.GreenButtonCommandH\000\022:\n"
  "\020redButtonCommand\030\003 \001(\0132\036.ActionModule.R"
  "edButtonCommandH\000\0228\n\017watchdogCommand\030\004 \001"
  "(\0132\035.ActionModule.WatchdogCommandH\000\022@\n\023s"
  "ystemLoggerCommand\030\005 \001(\0132!.ActionModule."
  "SystemLoggerCommandH\000B\023\n\021DeviceCommandTy"
  "pe\"\376\002\n\013ActionError\022$\n\006device\030\001 \001(\0132\024.Act"
  "ionModule.Device\022,\n\004type\030\002 \001(\0162\036.ActionM"
  "odule.ActionError.Type\022:\n\020greenButtonErr"
  "or\030\003 \001(\0132\036.ActionModule.GreenButtonError"
  "H\000\0226\n\016redButtonError\030\004 \001(\0132\034.ActionModul"
  "e.RedButtonErrorH\000\0224\n\rwatchdogError\030\005 \001("
  "\0132\033.ActionModule.WatchdogErrorH\000\022<\n\021syst"
  "emLoggerError\030\006 \001(\0132\037.ActionModule.Syste"
  "mLoggerErrorH\000\" \n\004Type\022\006\n\002OK\020\000\022\020\n\014SERVER"
  "_ERROR\020\001B\021\n\017DeviceErrorType\"\372\001\n\006Device\022+"
  "\n\006module\030\001 \001(\0162\033.ActionModule.Device.Mod"
  "ule\0223\n\ndeviceType\030\002 \001(\0162\037.ActionModule.D"
  "evice.DeviceType\022\022\n\ndeviceName\030\003 \001(\t\"0\n\006"
  "Module\022\023\n\017RESERVED_MODULE\020\000\022\021\n\rACTION_MO"
  "DULE\020\003\"H\n\nDeviceType\022\020\n\014GREEN_BUTTON\020\000\022\016"
  "\n\nRED_BUTTON\020\001\022\014\n\010WATCHDOG\020\002\022\n\n\006LOGGER\020\003"
  "\"\261\001\n\022SystemLoggerStatus\022\024\n\014sourceDevice\030"
  "\001 \001(\t\022\014\n\004logs\030\002 \003(\t\022=\n\tverbosity\030\003 \001(\0162*"
  ".ActionModule.SystemLoggerStatus.Verbosi"
  "ty\"8\n\tVerbosity\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\005\022\013\n\007"
  "WARNING\020\n\022\t\n\005ERROR\020\017\"7\n\021GreenButtonStatu"
  "s\022\021\n\tisPressed\030\001 \001(\010\022\017\n\007isAlive\030\002 \001(\010\"$\n"
  "\017RedButtonStatus\022\021\n\tisPressed\030\001 \001(\010\"0\n\016W"
  "atchdogStatus\022\017\n\007isAlive\030\001 \001(\010\022\r\n\005state\030"
  "\002 \001(\t\"e\n\023SystemLoggerCommand\022:\n\007command\030"
  "\001 \001(\0162).ActionModule.SystemLoggerCommand"
  ".Command\"\022\n\007Command\022\007\n\003LOG\020\000\"e\n\022GreenBut"
  "tonCommand\0229\n\007command\030\001 \001(\0162(.ActionModu"
  "le.GreenButtonCommand.Command\"\024\n\007Command"
  "\022\t\n\005PRESS\020\000\"a\n\020RedButtonCommand\0227\n\007comma"
  "nd\030\001 \001(\0162&.ActionModule.RedButtonCommand"
  ".Command\"\024\n\007Command\022\t\n\005PRESS\020\000\"_\n\017Watchd"
  "ogCommand\0226\n\007command\030\001 \001(\0162%.ActionModul"
  "e.WatchdogCommand.Command\"\024\n\007Command\022\t\n\005"
  "RESET\020\000\")\n\021SystemLoggerError\022\024\n\014errorMes"
  "sage\030\001 \001(\t\"(\n\020GreenButtonError\022\024\n\014errorM"
  "essage\030\001 \001(\t\"&\n\016RedButtonError\022\024\n\014errorM"
  "essage\030\001 \001(\t\"%\n\rWatchdogError\022\024\n\014errorMe"
  "ssage\030\001 \001(\tB>Z!../internal/pkg/ba_proto;"
  "ba_proto\252\002\030Google.Protobuf.ba_protob\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fActionModule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fActionModule_2eproto = {
  false, false, 2283, descriptor_table_protodef_modules_2fActionModule_2eproto, "modules/ActionModule.proto", 
  &descriptor_table_modules_2fActionModule_2eproto_once, nullptr, 0, 16,
  schemas, file_default_instances, TableStruct_modules_2fActionModule_2eproto::offsets,
  file_level_metadata_modules_2fActionModule_2eproto, file_level_enum_descriptors_modules_2fActionModule_2eproto, file_level_service_descriptors_modules_2fActionModule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fActionModule_2eproto_getter() {
  return &descriptor_table_modules_2fActionModule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fActionModule_2eproto(&descriptor_table_modules_2fActionModule_2eproto);
namespace ActionModule {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionError_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[0];
}
bool ActionError_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionError_Type ActionError::OK;
constexpr ActionError_Type ActionError::SERVER_ERROR;
constexpr ActionError_Type ActionError::Type_MIN;
constexpr ActionError_Type ActionError::Type_MAX;
constexpr int ActionError::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_Module_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[1];
}
bool Device_Module_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_Module Device::RESERVED_MODULE;
constexpr Device_Module Device::ACTION_MODULE;
constexpr Device_Module Device::Module_MIN;
constexpr Device_Module Device::Module_MAX;
constexpr int Device::Module_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[2];
}
bool Device_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Device_DeviceType Device::GREEN_BUTTON;
constexpr Device_DeviceType Device::RED_BUTTON;
constexpr Device_DeviceType Device::WATCHDOG;
constexpr Device_DeviceType Device::LOGGER;
constexpr Device_DeviceType Device::DeviceType_MIN;
constexpr Device_DeviceType Device::DeviceType_MAX;
constexpr int Device::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemLoggerStatus_Verbosity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[3];
}
bool SystemLoggerStatus_Verbosity_IsValid(int value) {
  switch (value) {
    case 0:
    case 5:
    case 10:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::DEBUG;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::INFO;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::WARNING;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::ERROR;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::Verbosity_MIN;
constexpr SystemLoggerStatus_Verbosity SystemLoggerStatus::Verbosity_MAX;
constexpr int SystemLoggerStatus::Verbosity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemLoggerCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[4];
}
bool SystemLoggerCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemLoggerCommand_Command SystemLoggerCommand::LOG;
constexpr SystemLoggerCommand_Command SystemLoggerCommand::Command_MIN;
constexpr SystemLoggerCommand_Command SystemLoggerCommand::Command_MAX;
constexpr int SystemLoggerCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GreenButtonCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[5];
}
bool GreenButtonCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GreenButtonCommand_Command GreenButtonCommand::PRESS;
constexpr GreenButtonCommand_Command GreenButtonCommand::Command_MIN;
constexpr GreenButtonCommand_Command GreenButtonCommand::Command_MAX;
constexpr int GreenButtonCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedButtonCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[6];
}
bool RedButtonCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RedButtonCommand_Command RedButtonCommand::PRESS;
constexpr RedButtonCommand_Command RedButtonCommand::Command_MIN;
constexpr RedButtonCommand_Command RedButtonCommand::Command_MAX;
constexpr int RedButtonCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchdogCommand_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fActionModule_2eproto);
  return file_level_enum_descriptors_modules_2fActionModule_2eproto[7];
}
bool WatchdogCommand_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WatchdogCommand_Command WatchdogCommand::RESET;
constexpr WatchdogCommand_Command WatchdogCommand::Command_MIN;
constexpr WatchdogCommand_Command WatchdogCommand::Command_MAX;
constexpr int WatchdogCommand::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ActionStatus::_Internal {
 public:
  static const ::ActionModule::Device& device(const ActionStatus* msg);
  static const ::ActionModule::SystemLoggerStatus& systemloggerstatus(const ActionStatus* msg);
  static const ::ActionModule::GreenButtonStatus& greenbuttonstatus(const ActionStatus* msg);
  static const ::ActionModule::RedButtonStatus& redbuttonstatus(const ActionStatus* msg);
  static const ::ActionModule::WatchdogStatus& watchdogstatus(const ActionStatus* msg);
};

const ::ActionModule::Device&
ActionStatus::_Internal::device(const ActionStatus* msg) {
  return *msg->device_;
}
const ::ActionModule::SystemLoggerStatus&
ActionStatus::_Internal::systemloggerstatus(const ActionStatus* msg) {
  return *msg->DeviceStatusType_.systemloggerstatus_;
}
const ::ActionModule::GreenButtonStatus&
ActionStatus::_Internal::greenbuttonstatus(const ActionStatus* msg) {
  return *msg->DeviceStatusType_.greenbuttonstatus_;
}
const ::ActionModule::RedButtonStatus&
ActionStatus::_Internal::redbuttonstatus(const ActionStatus* msg) {
  return *msg->DeviceStatusType_.redbuttonstatus_;
}
const ::ActionModule::WatchdogStatus&
ActionStatus::_Internal::watchdogstatus(const ActionStatus* msg) {
  return *msg->DeviceStatusType_.watchdogstatus_;
}
void ActionStatus::set_allocated_systemloggerstatus(::ActionModule::SystemLoggerStatus* systemloggerstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (systemloggerstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::SystemLoggerStatus>::GetOwningArena(systemloggerstatus);
    if (message_arena != submessage_arena) {
      systemloggerstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemloggerstatus, submessage_arena);
    }
    set_has_systemloggerstatus();
    DeviceStatusType_.systemloggerstatus_ = systemloggerstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionStatus.systemLoggerStatus)
}
void ActionStatus::set_allocated_greenbuttonstatus(::ActionModule::GreenButtonStatus* greenbuttonstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (greenbuttonstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::GreenButtonStatus>::GetOwningArena(greenbuttonstatus);
    if (message_arena != submessage_arena) {
      greenbuttonstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greenbuttonstatus, submessage_arena);
    }
    set_has_greenbuttonstatus();
    DeviceStatusType_.greenbuttonstatus_ = greenbuttonstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionStatus.greenButtonStatus)
}
void ActionStatus::set_allocated_redbuttonstatus(::ActionModule::RedButtonStatus* redbuttonstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (redbuttonstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::RedButtonStatus>::GetOwningArena(redbuttonstatus);
    if (message_arena != submessage_arena) {
      redbuttonstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbuttonstatus, submessage_arena);
    }
    set_has_redbuttonstatus();
    DeviceStatusType_.redbuttonstatus_ = redbuttonstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionStatus.redButtonStatus)
}
void ActionStatus::set_allocated_watchdogstatus(::ActionModule::WatchdogStatus* watchdogstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceStatusType();
  if (watchdogstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::WatchdogStatus>::GetOwningArena(watchdogstatus);
    if (message_arena != submessage_arena) {
      watchdogstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchdogstatus, submessage_arena);
    }
    set_has_watchdogstatus();
    DeviceStatusType_.watchdogstatus_ = watchdogstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionStatus.watchdogStatus)
}
ActionStatus::ActionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.ActionStatus)
}
ActionStatus::ActionStatus(const ActionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::ActionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceStatusType();
  switch (from.DeviceStatusType_case()) {
    case kSystemLoggerStatus: {
      _internal_mutable_systemloggerstatus()->::ActionModule::SystemLoggerStatus::MergeFrom(from._internal_systemloggerstatus());
      break;
    }
    case kGreenButtonStatus: {
      _internal_mutable_greenbuttonstatus()->::ActionModule::GreenButtonStatus::MergeFrom(from._internal_greenbuttonstatus());
      break;
    }
    case kRedButtonStatus: {
      _internal_mutable_redbuttonstatus()->::ActionModule::RedButtonStatus::MergeFrom(from._internal_redbuttonstatus());
      break;
    }
    case kWatchdogStatus: {
      _internal_mutable_watchdogstatus()->::ActionModule::WatchdogStatus::MergeFrom(from._internal_watchdogstatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.ActionStatus)
}

inline void ActionStatus::SharedCtor() {
device_ = nullptr;
clear_has_DeviceStatusType();
}

ActionStatus::~ActionStatus() {
  // @@protoc_insertion_point(destructor:ActionModule.ActionStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceStatusType()) {
    clear_DeviceStatusType();
  }
}

void ActionStatus::ArenaDtor(void* object) {
  ActionStatus* _this = reinterpret_cast< ActionStatus* >(object);
  (void)_this;
}
void ActionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionStatus::clear_DeviceStatusType() {
// @@protoc_insertion_point(one_of_clear_start:ActionModule.ActionStatus)
  switch (DeviceStatusType_case()) {
    case kSystemLoggerStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.systemloggerstatus_;
      }
      break;
    }
    case kGreenButtonStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.greenbuttonstatus_;
      }
      break;
    }
    case kRedButtonStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.redbuttonstatus_;
      }
      break;
    }
    case kWatchdogStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceStatusType_.watchdogstatus_;
      }
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICESTATUSTYPE_NOT_SET;
}


void ActionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.ActionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceStatusType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.SystemLoggerStatus systemLoggerStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemloggerstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.GreenButtonStatus greenButtonStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_greenbuttonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.RedButtonStatus redButtonStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbuttonstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.WatchdogStatus watchdogStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchdogstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.ActionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .ActionModule.SystemLoggerStatus systemLoggerStatus = 2;
  if (_internal_has_systemloggerstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::systemloggerstatus(this), target, stream);
  }

  // .ActionModule.GreenButtonStatus greenButtonStatus = 3;
  if (_internal_has_greenbuttonstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::greenbuttonstatus(this), target, stream);
  }

  // .ActionModule.RedButtonStatus redButtonStatus = 4;
  if (_internal_has_redbuttonstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::redbuttonstatus(this), target, stream);
  }

  // .ActionModule.WatchdogStatus watchdogStatus = 5;
  if (_internal_has_watchdogstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::watchdogstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.ActionStatus)
  return target;
}

size_t ActionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.ActionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceStatusType_case()) {
    // .ActionModule.SystemLoggerStatus systemLoggerStatus = 2;
    case kSystemLoggerStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.systemloggerstatus_);
      break;
    }
    // .ActionModule.GreenButtonStatus greenButtonStatus = 3;
    case kGreenButtonStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.greenbuttonstatus_);
      break;
    }
    // .ActionModule.RedButtonStatus redButtonStatus = 4;
    case kRedButtonStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.redbuttonstatus_);
      break;
    }
    // .ActionModule.WatchdogStatus watchdogStatus = 5;
    case kWatchdogStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceStatusType_.watchdogstatus_);
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionStatus::GetClassData() const { return &_class_data_; }

void ActionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActionStatus *>(to)->MergeFrom(
      static_cast<const ActionStatus &>(from));
}


void ActionStatus::MergeFrom(const ActionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.ActionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::ActionModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceStatusType_case()) {
    case kSystemLoggerStatus: {
      _internal_mutable_systemloggerstatus()->::ActionModule::SystemLoggerStatus::MergeFrom(from._internal_systemloggerstatus());
      break;
    }
    case kGreenButtonStatus: {
      _internal_mutable_greenbuttonstatus()->::ActionModule::GreenButtonStatus::MergeFrom(from._internal_greenbuttonstatus());
      break;
    }
    case kRedButtonStatus: {
      _internal_mutable_redbuttonstatus()->::ActionModule::RedButtonStatus::MergeFrom(from._internal_redbuttonstatus());
      break;
    }
    case kWatchdogStatus: {
      _internal_mutable_watchdogstatus()->::ActionModule::WatchdogStatus::MergeFrom(from._internal_watchdogstatus());
      break;
    }
    case DEVICESTATUSTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionStatus::CopyFrom(const ActionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.ActionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionStatus::IsInitialized() const {
  return true;
}

void ActionStatus::InternalSwap(ActionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceStatusType_, other->DeviceStatusType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[0]);
}

// ===================================================================

class ActionCommand::_Internal {
 public:
  static const ::ActionModule::Device& device(const ActionCommand* msg);
  static const ::ActionModule::GreenButtonCommand& greenbuttoncommand(const ActionCommand* msg);
  static const ::ActionModule::RedButtonCommand& redbuttoncommand(const ActionCommand* msg);
  static const ::ActionModule::WatchdogCommand& watchdogcommand(const ActionCommand* msg);
  static const ::ActionModule::SystemLoggerCommand& systemloggercommand(const ActionCommand* msg);
};

const ::ActionModule::Device&
ActionCommand::_Internal::device(const ActionCommand* msg) {
  return *msg->device_;
}
const ::ActionModule::GreenButtonCommand&
ActionCommand::_Internal::greenbuttoncommand(const ActionCommand* msg) {
  return *msg->DeviceCommandType_.greenbuttoncommand_;
}
const ::ActionModule::RedButtonCommand&
ActionCommand::_Internal::redbuttoncommand(const ActionCommand* msg) {
  return *msg->DeviceCommandType_.redbuttoncommand_;
}
const ::ActionModule::WatchdogCommand&
ActionCommand::_Internal::watchdogcommand(const ActionCommand* msg) {
  return *msg->DeviceCommandType_.watchdogcommand_;
}
const ::ActionModule::SystemLoggerCommand&
ActionCommand::_Internal::systemloggercommand(const ActionCommand* msg) {
  return *msg->DeviceCommandType_.systemloggercommand_;
}
void ActionCommand::set_allocated_greenbuttoncommand(::ActionModule::GreenButtonCommand* greenbuttoncommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (greenbuttoncommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::GreenButtonCommand>::GetOwningArena(greenbuttoncommand);
    if (message_arena != submessage_arena) {
      greenbuttoncommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greenbuttoncommand, submessage_arena);
    }
    set_has_greenbuttoncommand();
    DeviceCommandType_.greenbuttoncommand_ = greenbuttoncommand;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionCommand.greenButtonCommand)
}
void ActionCommand::set_allocated_redbuttoncommand(::ActionModule::RedButtonCommand* redbuttoncommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (redbuttoncommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::RedButtonCommand>::GetOwningArena(redbuttoncommand);
    if (message_arena != submessage_arena) {
      redbuttoncommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbuttoncommand, submessage_arena);
    }
    set_has_redbuttoncommand();
    DeviceCommandType_.redbuttoncommand_ = redbuttoncommand;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionCommand.redButtonCommand)
}
void ActionCommand::set_allocated_watchdogcommand(::ActionModule::WatchdogCommand* watchdogcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (watchdogcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::WatchdogCommand>::GetOwningArena(watchdogcommand);
    if (message_arena != submessage_arena) {
      watchdogcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchdogcommand, submessage_arena);
    }
    set_has_watchdogcommand();
    DeviceCommandType_.watchdogcommand_ = watchdogcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionCommand.watchdogCommand)
}
void ActionCommand::set_allocated_systemloggercommand(::ActionModule::SystemLoggerCommand* systemloggercommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceCommandType();
  if (systemloggercommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::SystemLoggerCommand>::GetOwningArena(systemloggercommand);
    if (message_arena != submessage_arena) {
      systemloggercommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemloggercommand, submessage_arena);
    }
    set_has_systemloggercommand();
    DeviceCommandType_.systemloggercommand_ = systemloggercommand;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionCommand.systemLoggerCommand)
}
ActionCommand::ActionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.ActionCommand)
}
ActionCommand::ActionCommand(const ActionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::ActionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  clear_has_DeviceCommandType();
  switch (from.DeviceCommandType_case()) {
    case kGreenButtonCommand: {
      _internal_mutable_greenbuttoncommand()->::ActionModule::GreenButtonCommand::MergeFrom(from._internal_greenbuttoncommand());
      break;
    }
    case kRedButtonCommand: {
      _internal_mutable_redbuttoncommand()->::ActionModule::RedButtonCommand::MergeFrom(from._internal_redbuttoncommand());
      break;
    }
    case kWatchdogCommand: {
      _internal_mutable_watchdogcommand()->::ActionModule::WatchdogCommand::MergeFrom(from._internal_watchdogcommand());
      break;
    }
    case kSystemLoggerCommand: {
      _internal_mutable_systemloggercommand()->::ActionModule::SystemLoggerCommand::MergeFrom(from._internal_systemloggercommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.ActionCommand)
}

inline void ActionCommand::SharedCtor() {
device_ = nullptr;
clear_has_DeviceCommandType();
}

ActionCommand::~ActionCommand() {
  // @@protoc_insertion_point(destructor:ActionModule.ActionCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceCommandType()) {
    clear_DeviceCommandType();
  }
}

void ActionCommand::ArenaDtor(void* object) {
  ActionCommand* _this = reinterpret_cast< ActionCommand* >(object);
  (void)_this;
}
void ActionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionCommand::clear_DeviceCommandType() {
// @@protoc_insertion_point(one_of_clear_start:ActionModule.ActionCommand)
  switch (DeviceCommandType_case()) {
    case kGreenButtonCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.greenbuttoncommand_;
      }
      break;
    }
    case kRedButtonCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.redbuttoncommand_;
      }
      break;
    }
    case kWatchdogCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.watchdogcommand_;
      }
      break;
    }
    case kSystemLoggerCommand: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceCommandType_.systemloggercommand_;
      }
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICECOMMANDTYPE_NOT_SET;
}


void ActionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.ActionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  clear_DeviceCommandType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.GreenButtonCommand greenButtonCommand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_greenbuttoncommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.RedButtonCommand redButtonCommand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbuttoncommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.WatchdogCommand watchdogCommand = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchdogcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.SystemLoggerCommand systemLoggerCommand = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemloggercommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.ActionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .ActionModule.GreenButtonCommand greenButtonCommand = 2;
  if (_internal_has_greenbuttoncommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::greenbuttoncommand(this), target, stream);
  }

  // .ActionModule.RedButtonCommand redButtonCommand = 3;
  if (_internal_has_redbuttoncommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::redbuttoncommand(this), target, stream);
  }

  // .ActionModule.WatchdogCommand watchdogCommand = 4;
  if (_internal_has_watchdogcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::watchdogcommand(this), target, stream);
  }

  // .ActionModule.SystemLoggerCommand systemLoggerCommand = 5;
  if (_internal_has_systemloggercommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::systemloggercommand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.ActionCommand)
  return target;
}

size_t ActionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.ActionCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  switch (DeviceCommandType_case()) {
    // .ActionModule.GreenButtonCommand greenButtonCommand = 2;
    case kGreenButtonCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.greenbuttoncommand_);
      break;
    }
    // .ActionModule.RedButtonCommand redButtonCommand = 3;
    case kRedButtonCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.redbuttoncommand_);
      break;
    }
    // .ActionModule.WatchdogCommand watchdogCommand = 4;
    case kWatchdogCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.watchdogcommand_);
      break;
    }
    // .ActionModule.SystemLoggerCommand systemLoggerCommand = 5;
    case kSystemLoggerCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceCommandType_.systemloggercommand_);
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionCommand::GetClassData() const { return &_class_data_; }

void ActionCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActionCommand *>(to)->MergeFrom(
      static_cast<const ActionCommand &>(from));
}


void ActionCommand::MergeFrom(const ActionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.ActionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::ActionModule::Device::MergeFrom(from._internal_device());
  }
  switch (from.DeviceCommandType_case()) {
    case kGreenButtonCommand: {
      _internal_mutable_greenbuttoncommand()->::ActionModule::GreenButtonCommand::MergeFrom(from._internal_greenbuttoncommand());
      break;
    }
    case kRedButtonCommand: {
      _internal_mutable_redbuttoncommand()->::ActionModule::RedButtonCommand::MergeFrom(from._internal_redbuttoncommand());
      break;
    }
    case kWatchdogCommand: {
      _internal_mutable_watchdogcommand()->::ActionModule::WatchdogCommand::MergeFrom(from._internal_watchdogcommand());
      break;
    }
    case kSystemLoggerCommand: {
      _internal_mutable_systemloggercommand()->::ActionModule::SystemLoggerCommand::MergeFrom(from._internal_systemloggercommand());
      break;
    }
    case DEVICECOMMANDTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionCommand::CopyFrom(const ActionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.ActionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCommand::IsInitialized() const {
  return true;
}

void ActionCommand::InternalSwap(ActionCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(DeviceCommandType_, other->DeviceCommandType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[1]);
}

// ===================================================================

class ActionError::_Internal {
 public:
  static const ::ActionModule::Device& device(const ActionError* msg);
  static const ::ActionModule::GreenButtonError& greenbuttonerror(const ActionError* msg);
  static const ::ActionModule::RedButtonError& redbuttonerror(const ActionError* msg);
  static const ::ActionModule::WatchdogError& watchdogerror(const ActionError* msg);
  static const ::ActionModule::SystemLoggerError& systemloggererror(const ActionError* msg);
};

const ::ActionModule::Device&
ActionError::_Internal::device(const ActionError* msg) {
  return *msg->device_;
}
const ::ActionModule::GreenButtonError&
ActionError::_Internal::greenbuttonerror(const ActionError* msg) {
  return *msg->DeviceErrorType_.greenbuttonerror_;
}
const ::ActionModule::RedButtonError&
ActionError::_Internal::redbuttonerror(const ActionError* msg) {
  return *msg->DeviceErrorType_.redbuttonerror_;
}
const ::ActionModule::WatchdogError&
ActionError::_Internal::watchdogerror(const ActionError* msg) {
  return *msg->DeviceErrorType_.watchdogerror_;
}
const ::ActionModule::SystemLoggerError&
ActionError::_Internal::systemloggererror(const ActionError* msg) {
  return *msg->DeviceErrorType_.systemloggererror_;
}
void ActionError::set_allocated_greenbuttonerror(::ActionModule::GreenButtonError* greenbuttonerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (greenbuttonerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::GreenButtonError>::GetOwningArena(greenbuttonerror);
    if (message_arena != submessage_arena) {
      greenbuttonerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, greenbuttonerror, submessage_arena);
    }
    set_has_greenbuttonerror();
    DeviceErrorType_.greenbuttonerror_ = greenbuttonerror;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionError.greenButtonError)
}
void ActionError::set_allocated_redbuttonerror(::ActionModule::RedButtonError* redbuttonerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (redbuttonerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::RedButtonError>::GetOwningArena(redbuttonerror);
    if (message_arena != submessage_arena) {
      redbuttonerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redbuttonerror, submessage_arena);
    }
    set_has_redbuttonerror();
    DeviceErrorType_.redbuttonerror_ = redbuttonerror;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionError.redButtonError)
}
void ActionError::set_allocated_watchdogerror(::ActionModule::WatchdogError* watchdogerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (watchdogerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::WatchdogError>::GetOwningArena(watchdogerror);
    if (message_arena != submessage_arena) {
      watchdogerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchdogerror, submessage_arena);
    }
    set_has_watchdogerror();
    DeviceErrorType_.watchdogerror_ = watchdogerror;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionError.watchdogError)
}
void ActionError::set_allocated_systemloggererror(::ActionModule::SystemLoggerError* systemloggererror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_DeviceErrorType();
  if (systemloggererror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ActionModule::SystemLoggerError>::GetOwningArena(systemloggererror);
    if (message_arena != submessage_arena) {
      systemloggererror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, systemloggererror, submessage_arena);
    }
    set_has_systemloggererror();
    DeviceErrorType_.systemloggererror_ = systemloggererror;
  }
  // @@protoc_insertion_point(field_set_allocated:ActionModule.ActionError.systemLoggerError)
}
ActionError::ActionError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.ActionError)
}
ActionError::ActionError(const ActionError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::ActionModule::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  type_ = from.type_;
  clear_has_DeviceErrorType();
  switch (from.DeviceErrorType_case()) {
    case kGreenButtonError: {
      _internal_mutable_greenbuttonerror()->::ActionModule::GreenButtonError::MergeFrom(from._internal_greenbuttonerror());
      break;
    }
    case kRedButtonError: {
      _internal_mutable_redbuttonerror()->::ActionModule::RedButtonError::MergeFrom(from._internal_redbuttonerror());
      break;
    }
    case kWatchdogError: {
      _internal_mutable_watchdogerror()->::ActionModule::WatchdogError::MergeFrom(from._internal_watchdogerror());
      break;
    }
    case kSystemLoggerError: {
      _internal_mutable_systemloggererror()->::ActionModule::SystemLoggerError::MergeFrom(from._internal_systemloggererror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.ActionError)
}

inline void ActionError::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&device_)) + sizeof(type_));
clear_has_DeviceErrorType();
}

ActionError::~ActionError() {
  // @@protoc_insertion_point(destructor:ActionModule.ActionError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (has_DeviceErrorType()) {
    clear_DeviceErrorType();
  }
}

void ActionError::ArenaDtor(void* object) {
  ActionError* _this = reinterpret_cast< ActionError* >(object);
  (void)_this;
}
void ActionError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionError::clear_DeviceErrorType() {
// @@protoc_insertion_point(one_of_clear_start:ActionModule.ActionError)
  switch (DeviceErrorType_case()) {
    case kGreenButtonError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.greenbuttonerror_;
      }
      break;
    }
    case kRedButtonError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.redbuttonerror_;
      }
      break;
    }
    case kWatchdogError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.watchdogerror_;
      }
      break;
    }
    case kSystemLoggerError: {
      if (GetArenaForAllocation() == nullptr) {
        delete DeviceErrorType_.systemloggererror_;
      }
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICEERRORTYPE_NOT_SET;
}


void ActionError::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.ActionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  type_ = 0;
  clear_DeviceErrorType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.ActionError.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ActionModule::ActionError_Type>(val));
        } else goto handle_unusual;
        continue;
      // .ActionModule.GreenButtonError greenButtonError = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_greenbuttonerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.RedButtonError redButtonError = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_redbuttonerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.WatchdogError watchdogError = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchdogerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ActionModule.SystemLoggerError systemLoggerError = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_systemloggererror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.ActionError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .ActionModule.ActionError.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .ActionModule.GreenButtonError greenButtonError = 3;
  if (_internal_has_greenbuttonerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::greenbuttonerror(this), target, stream);
  }

  // .ActionModule.RedButtonError redButtonError = 4;
  if (_internal_has_redbuttonerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::redbuttonerror(this), target, stream);
  }

  // .ActionModule.WatchdogError watchdogError = 5;
  if (_internal_has_watchdogerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::watchdogerror(this), target, stream);
  }

  // .ActionModule.SystemLoggerError systemLoggerError = 6;
  if (_internal_has_systemloggererror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::systemloggererror(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.ActionError)
  return target;
}

size_t ActionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.ActionError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.Device device = 1;
  if (this->_internal_has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .ActionModule.ActionError.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (DeviceErrorType_case()) {
    // .ActionModule.GreenButtonError greenButtonError = 3;
    case kGreenButtonError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.greenbuttonerror_);
      break;
    }
    // .ActionModule.RedButtonError redButtonError = 4;
    case kRedButtonError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.redbuttonerror_);
      break;
    }
    // .ActionModule.WatchdogError watchdogError = 5;
    case kWatchdogError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.watchdogerror_);
      break;
    }
    // .ActionModule.SystemLoggerError systemLoggerError = 6;
    case kSystemLoggerError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *DeviceErrorType_.systemloggererror_);
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionError::GetClassData() const { return &_class_data_; }

void ActionError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ActionError *>(to)->MergeFrom(
      static_cast<const ActionError &>(from));
}


void ActionError::MergeFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.ActionError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device()) {
    _internal_mutable_device()->::ActionModule::Device::MergeFrom(from._internal_device());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.DeviceErrorType_case()) {
    case kGreenButtonError: {
      _internal_mutable_greenbuttonerror()->::ActionModule::GreenButtonError::MergeFrom(from._internal_greenbuttonerror());
      break;
    }
    case kRedButtonError: {
      _internal_mutable_redbuttonerror()->::ActionModule::RedButtonError::MergeFrom(from._internal_redbuttonerror());
      break;
    }
    case kWatchdogError: {
      _internal_mutable_watchdogerror()->::ActionModule::WatchdogError::MergeFrom(from._internal_watchdogerror());
      break;
    }
    case kSystemLoggerError: {
      _internal_mutable_systemloggererror()->::ActionModule::SystemLoggerError::MergeFrom(from._internal_systemloggererror());
      break;
    }
    case DEVICEERRORTYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionError::CopyFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionError::IsInitialized() const {
  return true;
}

void ActionError::InternalSwap(ActionError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionError, type_)
      + sizeof(ActionError::type_)
      - PROTOBUF_FIELD_OFFSET(ActionError, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
  swap(DeviceErrorType_, other->DeviceErrorType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[2]);
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devicename().empty()) {
    devicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devicename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  // @@protoc_insertion_point(copy_constructor:ActionModule.Device)
}

inline void Device::SharedCtor() {
devicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&module_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&devicetype_) -
    reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:ActionModule.Device)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicename_.ClearToEmpty();
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicetype_) -
      reinterpret_cast<char*>(&module_)) + sizeof(devicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.Device.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::ActionModule::Device_Module>(val));
        } else goto handle_unusual;
        continue;
      // .ActionModule.Device.DeviceType deviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_devicetype(static_cast<::ActionModule::Device_DeviceType>(val));
        } else goto handle_unusual;
        continue;
      // string deviceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_devicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.Device.deviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_module(), target);
  }

  // .ActionModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_devicetype(), target);
  }

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicename().data(), static_cast<int>(this->_internal_devicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.Device.deviceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceName = 3;
  if (!this->_internal_devicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicename());
  }

  // .ActionModule.Device.Module module = 1;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_module());
  }

  // .ActionModule.Device.DeviceType deviceType = 2;
  if (this->_internal_devicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_devicetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }

void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Device *>(to)->MergeFrom(
      static_cast<const Device &>(from));
}


void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.Device)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devicename().empty()) {
    _internal_set_devicename(from._internal_devicename());
  }
  if (from._internal_module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from._internal_devicetype() != 0) {
    _internal_set_devicetype(from._internal_devicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devicename_, GetArenaForAllocation(),
      &other->devicename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, devicetype_)
      + sizeof(Device::devicetype_)
      - PROTOBUF_FIELD_OFFSET(Device, module_)>(
          reinterpret_cast<char*>(&module_),
          reinterpret_cast<char*>(&other->module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[3]);
}

// ===================================================================

class SystemLoggerStatus::_Internal {
 public:
};

SystemLoggerStatus::SystemLoggerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.SystemLoggerStatus)
}
SystemLoggerStatus::SystemLoggerStatus(const SystemLoggerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourcedevice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sourcedevice().empty()) {
    sourcedevice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcedevice(), 
      GetArenaForAllocation());
  }
  verbosity_ = from.verbosity_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.SystemLoggerStatus)
}

inline void SystemLoggerStatus::SharedCtor() {
sourcedevice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
verbosity_ = 0;
}

SystemLoggerStatus::~SystemLoggerStatus() {
  // @@protoc_insertion_point(destructor:ActionModule.SystemLoggerStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemLoggerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sourcedevice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemLoggerStatus::ArenaDtor(void* object) {
  SystemLoggerStatus* _this = reinterpret_cast< SystemLoggerStatus* >(object);
  (void)_this;
}
void SystemLoggerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemLoggerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemLoggerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.SystemLoggerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  sourcedevice_.ClearToEmpty();
  verbosity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemLoggerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceDevice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourcedevice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.SystemLoggerStatus.sourceDevice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.SystemLoggerStatus.logs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .ActionModule.SystemLoggerStatus.Verbosity verbosity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_verbosity(static_cast<::ActionModule::SystemLoggerStatus_Verbosity>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemLoggerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.SystemLoggerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceDevice = 1;
  if (!this->_internal_sourcedevice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcedevice().data(), static_cast<int>(this->_internal_sourcedevice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.SystemLoggerStatus.sourceDevice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcedevice(), target);
  }

  // repeated string logs = 2;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.SystemLoggerStatus.logs");
    target = stream->WriteString(2, s, target);
  }

  // .ActionModule.SystemLoggerStatus.Verbosity verbosity = 3;
  if (this->_internal_verbosity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_verbosity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.SystemLoggerStatus)
  return target;
}

size_t SystemLoggerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.SystemLoggerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logs_.Get(i));
  }

  // string sourceDevice = 1;
  if (!this->_internal_sourcedevice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcedevice());
  }

  // .ActionModule.SystemLoggerStatus.Verbosity verbosity = 3;
  if (this->_internal_verbosity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_verbosity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemLoggerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemLoggerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemLoggerStatus::GetClassData() const { return &_class_data_; }

void SystemLoggerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SystemLoggerStatus *>(to)->MergeFrom(
      static_cast<const SystemLoggerStatus &>(from));
}


void SystemLoggerStatus::MergeFrom(const SystemLoggerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.SystemLoggerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (!from._internal_sourcedevice().empty()) {
    _internal_set_sourcedevice(from._internal_sourcedevice());
  }
  if (from._internal_verbosity() != 0) {
    _internal_set_verbosity(from._internal_verbosity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemLoggerStatus::CopyFrom(const SystemLoggerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.SystemLoggerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemLoggerStatus::IsInitialized() const {
  return true;
}

void SystemLoggerStatus::InternalSwap(SystemLoggerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourcedevice_, GetArenaForAllocation(),
      &other->sourcedevice_, other->GetArenaForAllocation()
  );
  swap(verbosity_, other->verbosity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemLoggerStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[4]);
}

// ===================================================================

class GreenButtonStatus::_Internal {
 public:
};

GreenButtonStatus::GreenButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.GreenButtonStatus)
}
GreenButtonStatus::GreenButtonStatus(const GreenButtonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ispressed_, &from.ispressed_,
    static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&ispressed_)) + sizeof(isalive_));
  // @@protoc_insertion_point(copy_constructor:ActionModule.GreenButtonStatus)
}

inline void GreenButtonStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ispressed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isalive_) -
    reinterpret_cast<char*>(&ispressed_)) + sizeof(isalive_));
}

GreenButtonStatus::~GreenButtonStatus() {
  // @@protoc_insertion_point(destructor:ActionModule.GreenButtonStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GreenButtonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GreenButtonStatus::ArenaDtor(void* object) {
  GreenButtonStatus* _this = reinterpret_cast< GreenButtonStatus* >(object);
  (void)_this;
}
void GreenButtonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GreenButtonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GreenButtonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.GreenButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ispressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isalive_) -
      reinterpret_cast<char*>(&ispressed_)) + sizeof(isalive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreenButtonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isPressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ispressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAlive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GreenButtonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.GreenButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ispressed(), target);
  }

  // bool isAlive = 2;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isalive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.GreenButtonStatus)
  return target;
}

size_t GreenButtonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.GreenButtonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    total_size += 1 + 1;
  }

  // bool isAlive = 2;
  if (this->_internal_isalive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GreenButtonStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GreenButtonStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GreenButtonStatus::GetClassData() const { return &_class_data_; }

void GreenButtonStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GreenButtonStatus *>(to)->MergeFrom(
      static_cast<const GreenButtonStatus &>(from));
}


void GreenButtonStatus::MergeFrom(const GreenButtonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.GreenButtonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ispressed() != 0) {
    _internal_set_ispressed(from._internal_ispressed());
  }
  if (from._internal_isalive() != 0) {
    _internal_set_isalive(from._internal_isalive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GreenButtonStatus::CopyFrom(const GreenButtonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.GreenButtonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreenButtonStatus::IsInitialized() const {
  return true;
}

void GreenButtonStatus::InternalSwap(GreenButtonStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GreenButtonStatus, isalive_)
      + sizeof(GreenButtonStatus::isalive_)
      - PROTOBUF_FIELD_OFFSET(GreenButtonStatus, ispressed_)>(
          reinterpret_cast<char*>(&ispressed_),
          reinterpret_cast<char*>(&other->ispressed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GreenButtonStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[5]);
}

// ===================================================================

class RedButtonStatus::_Internal {
 public:
};

RedButtonStatus::RedButtonStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.RedButtonStatus)
}
RedButtonStatus::RedButtonStatus(const RedButtonStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ispressed_ = from.ispressed_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.RedButtonStatus)
}

inline void RedButtonStatus::SharedCtor() {
ispressed_ = false;
}

RedButtonStatus::~RedButtonStatus() {
  // @@protoc_insertion_point(destructor:ActionModule.RedButtonStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RedButtonStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedButtonStatus::ArenaDtor(void* object) {
  RedButtonStatus* _this = reinterpret_cast< RedButtonStatus* >(object);
  (void)_this;
}
void RedButtonStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedButtonStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedButtonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.RedButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ispressed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedButtonStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isPressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ispressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedButtonStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.RedButtonStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ispressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.RedButtonStatus)
  return target;
}

size_t RedButtonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.RedButtonStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isPressed = 1;
  if (this->_internal_ispressed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedButtonStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RedButtonStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedButtonStatus::GetClassData() const { return &_class_data_; }

void RedButtonStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RedButtonStatus *>(to)->MergeFrom(
      static_cast<const RedButtonStatus &>(from));
}


void RedButtonStatus::MergeFrom(const RedButtonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.RedButtonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ispressed() != 0) {
    _internal_set_ispressed(from._internal_ispressed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedButtonStatus::CopyFrom(const RedButtonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.RedButtonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedButtonStatus::IsInitialized() const {
  return true;
}

void RedButtonStatus::InternalSwap(RedButtonStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ispressed_, other->ispressed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedButtonStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[6]);
}

// ===================================================================

class WatchdogStatus::_Internal {
 public:
};

WatchdogStatus::WatchdogStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.WatchdogStatus)
}
WatchdogStatus::WatchdogStatus(const WatchdogStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  isalive_ = from.isalive_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.WatchdogStatus)
}

inline void WatchdogStatus::SharedCtor() {
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
isalive_ = false;
}

WatchdogStatus::~WatchdogStatus() {
  // @@protoc_insertion_point(destructor:ActionModule.WatchdogStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchdogStatus::ArenaDtor(void* object) {
  WatchdogStatus* _this = reinterpret_cast< WatchdogStatus* >(object);
  (void)_this;
}
void WatchdogStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.WatchdogStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.ClearToEmpty();
  isalive_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isAlive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isalive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.WatchdogStatus.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.WatchdogStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isalive(), target);
  }

  // string state = 2;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.WatchdogStatus.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.WatchdogStatus)
  return target;
}

size_t WatchdogStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.WatchdogStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 2;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // bool isAlive = 1;
  if (this->_internal_isalive() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogStatus::GetClassData() const { return &_class_data_; }

void WatchdogStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogStatus *>(to)->MergeFrom(
      static_cast<const WatchdogStatus &>(from));
}


void WatchdogStatus::MergeFrom(const WatchdogStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.WatchdogStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_isalive() != 0) {
    _internal_set_isalive(from._internal_isalive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogStatus::CopyFrom(const WatchdogStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.WatchdogStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogStatus::IsInitialized() const {
  return true;
}

void WatchdogStatus::InternalSwap(WatchdogStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, GetArenaForAllocation(),
      &other->state_, other->GetArenaForAllocation()
  );
  swap(isalive_, other->isalive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[7]);
}

// ===================================================================

class SystemLoggerCommand::_Internal {
 public:
};

SystemLoggerCommand::SystemLoggerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.SystemLoggerCommand)
}
SystemLoggerCommand::SystemLoggerCommand(const SystemLoggerCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.SystemLoggerCommand)
}

inline void SystemLoggerCommand::SharedCtor() {
command_ = 0;
}

SystemLoggerCommand::~SystemLoggerCommand() {
  // @@protoc_insertion_point(destructor:ActionModule.SystemLoggerCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemLoggerCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SystemLoggerCommand::ArenaDtor(void* object) {
  SystemLoggerCommand* _this = reinterpret_cast< SystemLoggerCommand* >(object);
  (void)_this;
}
void SystemLoggerCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemLoggerCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemLoggerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.SystemLoggerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemLoggerCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.SystemLoggerCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::ActionModule::SystemLoggerCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemLoggerCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.SystemLoggerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.SystemLoggerCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.SystemLoggerCommand)
  return target;
}

size_t SystemLoggerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.SystemLoggerCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.SystemLoggerCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemLoggerCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemLoggerCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemLoggerCommand::GetClassData() const { return &_class_data_; }

void SystemLoggerCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SystemLoggerCommand *>(to)->MergeFrom(
      static_cast<const SystemLoggerCommand &>(from));
}


void SystemLoggerCommand::MergeFrom(const SystemLoggerCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.SystemLoggerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemLoggerCommand::CopyFrom(const SystemLoggerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.SystemLoggerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemLoggerCommand::IsInitialized() const {
  return true;
}

void SystemLoggerCommand::InternalSwap(SystemLoggerCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemLoggerCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[8]);
}

// ===================================================================

class GreenButtonCommand::_Internal {
 public:
};

GreenButtonCommand::GreenButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.GreenButtonCommand)
}
GreenButtonCommand::GreenButtonCommand(const GreenButtonCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.GreenButtonCommand)
}

inline void GreenButtonCommand::SharedCtor() {
command_ = 0;
}

GreenButtonCommand::~GreenButtonCommand() {
  // @@protoc_insertion_point(destructor:ActionModule.GreenButtonCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GreenButtonCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GreenButtonCommand::ArenaDtor(void* object) {
  GreenButtonCommand* _this = reinterpret_cast< GreenButtonCommand* >(object);
  (void)_this;
}
void GreenButtonCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GreenButtonCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GreenButtonCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.GreenButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreenButtonCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.GreenButtonCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::ActionModule::GreenButtonCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GreenButtonCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.GreenButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.GreenButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.GreenButtonCommand)
  return target;
}

size_t GreenButtonCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.GreenButtonCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.GreenButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GreenButtonCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GreenButtonCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GreenButtonCommand::GetClassData() const { return &_class_data_; }

void GreenButtonCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GreenButtonCommand *>(to)->MergeFrom(
      static_cast<const GreenButtonCommand &>(from));
}


void GreenButtonCommand::MergeFrom(const GreenButtonCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.GreenButtonCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GreenButtonCommand::CopyFrom(const GreenButtonCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.GreenButtonCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreenButtonCommand::IsInitialized() const {
  return true;
}

void GreenButtonCommand::InternalSwap(GreenButtonCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GreenButtonCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[9]);
}

// ===================================================================

class RedButtonCommand::_Internal {
 public:
};

RedButtonCommand::RedButtonCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.RedButtonCommand)
}
RedButtonCommand::RedButtonCommand(const RedButtonCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.RedButtonCommand)
}

inline void RedButtonCommand::SharedCtor() {
command_ = 0;
}

RedButtonCommand::~RedButtonCommand() {
  // @@protoc_insertion_point(destructor:ActionModule.RedButtonCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RedButtonCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RedButtonCommand::ArenaDtor(void* object) {
  RedButtonCommand* _this = reinterpret_cast< RedButtonCommand* >(object);
  (void)_this;
}
void RedButtonCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedButtonCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedButtonCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.RedButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedButtonCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.RedButtonCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::ActionModule::RedButtonCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedButtonCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.RedButtonCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.RedButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.RedButtonCommand)
  return target;
}

size_t RedButtonCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.RedButtonCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.RedButtonCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedButtonCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RedButtonCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedButtonCommand::GetClassData() const { return &_class_data_; }

void RedButtonCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RedButtonCommand *>(to)->MergeFrom(
      static_cast<const RedButtonCommand &>(from));
}


void RedButtonCommand::MergeFrom(const RedButtonCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.RedButtonCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedButtonCommand::CopyFrom(const RedButtonCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.RedButtonCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedButtonCommand::IsInitialized() const {
  return true;
}

void RedButtonCommand::InternalSwap(RedButtonCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedButtonCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[10]);
}

// ===================================================================

class WatchdogCommand::_Internal {
 public:
};

WatchdogCommand::WatchdogCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.WatchdogCommand)
}
WatchdogCommand::WatchdogCommand(const WatchdogCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:ActionModule.WatchdogCommand)
}

inline void WatchdogCommand::SharedCtor() {
command_ = 0;
}

WatchdogCommand::~WatchdogCommand() {
  // @@protoc_insertion_point(destructor:ActionModule.WatchdogCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchdogCommand::ArenaDtor(void* object) {
  WatchdogCommand* _this = reinterpret_cast< WatchdogCommand* >(object);
  (void)_this;
}
void WatchdogCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.WatchdogCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ActionModule.WatchdogCommand.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::ActionModule::WatchdogCommand_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.WatchdogCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ActionModule.WatchdogCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.WatchdogCommand)
  return target;
}

size_t WatchdogCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.WatchdogCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ActionModule.WatchdogCommand.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogCommand::GetClassData() const { return &_class_data_; }

void WatchdogCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogCommand *>(to)->MergeFrom(
      static_cast<const WatchdogCommand &>(from));
}


void WatchdogCommand::MergeFrom(const WatchdogCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.WatchdogCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogCommand::CopyFrom(const WatchdogCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.WatchdogCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogCommand::IsInitialized() const {
  return true;
}

void WatchdogCommand::InternalSwap(WatchdogCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[11]);
}

// ===================================================================

class SystemLoggerError::_Internal {
 public:
};

SystemLoggerError::SystemLoggerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.SystemLoggerError)
}
SystemLoggerError::SystemLoggerError(const SystemLoggerError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.SystemLoggerError)
}

inline void SystemLoggerError::SharedCtor() {
errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SystemLoggerError::~SystemLoggerError() {
  // @@protoc_insertion_point(destructor:ActionModule.SystemLoggerError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemLoggerError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemLoggerError::ArenaDtor(void* object) {
  SystemLoggerError* _this = reinterpret_cast< SystemLoggerError* >(object);
  (void)_this;
}
void SystemLoggerError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemLoggerError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemLoggerError::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.SystemLoggerError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemLoggerError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string errorMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.SystemLoggerError.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemLoggerError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.SystemLoggerError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.SystemLoggerError.errorMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.SystemLoggerError)
  return target;
}

size_t SystemLoggerError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.SystemLoggerError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemLoggerError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemLoggerError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemLoggerError::GetClassData() const { return &_class_data_; }

void SystemLoggerError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SystemLoggerError *>(to)->MergeFrom(
      static_cast<const SystemLoggerError &>(from));
}


void SystemLoggerError::MergeFrom(const SystemLoggerError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.SystemLoggerError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _internal_set_errormessage(from._internal_errormessage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemLoggerError::CopyFrom(const SystemLoggerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.SystemLoggerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemLoggerError::IsInitialized() const {
  return true;
}

void SystemLoggerError::InternalSwap(SystemLoggerError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormessage_, GetArenaForAllocation(),
      &other->errormessage_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemLoggerError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[12]);
}

// ===================================================================

class GreenButtonError::_Internal {
 public:
};

GreenButtonError::GreenButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.GreenButtonError)
}
GreenButtonError::GreenButtonError(const GreenButtonError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.GreenButtonError)
}

inline void GreenButtonError::SharedCtor() {
errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GreenButtonError::~GreenButtonError() {
  // @@protoc_insertion_point(destructor:ActionModule.GreenButtonError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GreenButtonError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GreenButtonError::ArenaDtor(void* object) {
  GreenButtonError* _this = reinterpret_cast< GreenButtonError* >(object);
  (void)_this;
}
void GreenButtonError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GreenButtonError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GreenButtonError::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.GreenButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GreenButtonError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string errorMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.GreenButtonError.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GreenButtonError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.GreenButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.GreenButtonError.errorMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.GreenButtonError)
  return target;
}

size_t GreenButtonError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.GreenButtonError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GreenButtonError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GreenButtonError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GreenButtonError::GetClassData() const { return &_class_data_; }

void GreenButtonError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GreenButtonError *>(to)->MergeFrom(
      static_cast<const GreenButtonError &>(from));
}


void GreenButtonError::MergeFrom(const GreenButtonError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.GreenButtonError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _internal_set_errormessage(from._internal_errormessage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GreenButtonError::CopyFrom(const GreenButtonError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.GreenButtonError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GreenButtonError::IsInitialized() const {
  return true;
}

void GreenButtonError::InternalSwap(GreenButtonError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormessage_, GetArenaForAllocation(),
      &other->errormessage_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GreenButtonError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[13]);
}

// ===================================================================

class RedButtonError::_Internal {
 public:
};

RedButtonError::RedButtonError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.RedButtonError)
}
RedButtonError::RedButtonError(const RedButtonError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.RedButtonError)
}

inline void RedButtonError::SharedCtor() {
errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RedButtonError::~RedButtonError() {
  // @@protoc_insertion_point(destructor:ActionModule.RedButtonError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RedButtonError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedButtonError::ArenaDtor(void* object) {
  RedButtonError* _this = reinterpret_cast< RedButtonError* >(object);
  (void)_this;
}
void RedButtonError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedButtonError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedButtonError::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.RedButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedButtonError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string errorMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.RedButtonError.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedButtonError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.RedButtonError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.RedButtonError.errorMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.RedButtonError)
  return target;
}

size_t RedButtonError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.RedButtonError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedButtonError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RedButtonError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedButtonError::GetClassData() const { return &_class_data_; }

void RedButtonError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RedButtonError *>(to)->MergeFrom(
      static_cast<const RedButtonError &>(from));
}


void RedButtonError::MergeFrom(const RedButtonError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.RedButtonError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _internal_set_errormessage(from._internal_errormessage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedButtonError::CopyFrom(const RedButtonError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.RedButtonError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedButtonError::IsInitialized() const {
  return true;
}

void RedButtonError::InternalSwap(RedButtonError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormessage_, GetArenaForAllocation(),
      &other->errormessage_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RedButtonError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[14]);
}

// ===================================================================

class WatchdogError::_Internal {
 public:
};

WatchdogError::WatchdogError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ActionModule.WatchdogError)
}
WatchdogError::WatchdogError(const WatchdogError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormessage(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ActionModule.WatchdogError)
}

inline void WatchdogError::SharedCtor() {
errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WatchdogError::~WatchdogError() {
  // @@protoc_insertion_point(destructor:ActionModule.WatchdogError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchdogError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchdogError::ArenaDtor(void* object) {
  WatchdogError* _this = reinterpret_cast< WatchdogError* >(object);
  (void)_this;
}
void WatchdogError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchdogError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchdogError::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionModule.WatchdogError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string errorMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActionModule.WatchdogError.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchdogError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionModule.WatchdogError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActionModule.WatchdogError.errorMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionModule.WatchdogError)
  return target;
}

size_t WatchdogError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionModule.WatchdogError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 1;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchdogError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogError::GetClassData() const { return &_class_data_; }

void WatchdogError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WatchdogError *>(to)->MergeFrom(
      static_cast<const WatchdogError &>(from));
}


void WatchdogError::MergeFrom(const WatchdogError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActionModule.WatchdogError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormessage().empty()) {
    _internal_set_errormessage(from._internal_errormessage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogError::CopyFrom(const WatchdogError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionModule.WatchdogError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogError::IsInitialized() const {
  return true;
}

void WatchdogError::InternalSwap(WatchdogError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errormessage_, GetArenaForAllocation(),
      &other->errormessage_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fActionModule_2eproto_getter, &descriptor_table_modules_2fActionModule_2eproto_once,
      file_level_metadata_modules_2fActionModule_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ActionModule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ActionModule::ActionStatus* Arena::CreateMaybeMessage< ::ActionModule::ActionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::ActionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::ActionCommand* Arena::CreateMaybeMessage< ::ActionModule::ActionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::ActionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::ActionError* Arena::CreateMaybeMessage< ::ActionModule::ActionError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::ActionError >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::Device* Arena::CreateMaybeMessage< ::ActionModule::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::SystemLoggerStatus* Arena::CreateMaybeMessage< ::ActionModule::SystemLoggerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::SystemLoggerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::GreenButtonStatus* Arena::CreateMaybeMessage< ::ActionModule::GreenButtonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::GreenButtonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::RedButtonStatus* Arena::CreateMaybeMessage< ::ActionModule::RedButtonStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::RedButtonStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::WatchdogStatus* Arena::CreateMaybeMessage< ::ActionModule::WatchdogStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::WatchdogStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::SystemLoggerCommand* Arena::CreateMaybeMessage< ::ActionModule::SystemLoggerCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::SystemLoggerCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::GreenButtonCommand* Arena::CreateMaybeMessage< ::ActionModule::GreenButtonCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::GreenButtonCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::RedButtonCommand* Arena::CreateMaybeMessage< ::ActionModule::RedButtonCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::RedButtonCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::WatchdogCommand* Arena::CreateMaybeMessage< ::ActionModule::WatchdogCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::WatchdogCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::SystemLoggerError* Arena::CreateMaybeMessage< ::ActionModule::SystemLoggerError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::SystemLoggerError >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::GreenButtonError* Arena::CreateMaybeMessage< ::ActionModule::GreenButtonError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::GreenButtonError >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::RedButtonError* Arena::CreateMaybeMessage< ::ActionModule::RedButtonError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::RedButtonError >(arena);
}
template<> PROTOBUF_NOINLINE ::ActionModule::WatchdogError* Arena::CreateMaybeMessage< ::ActionModule::WatchdogError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActionModule::WatchdogError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
